<?xml version="1.0" encoding="UTF-8" ?>

<project name="Custom deployment scripts" default="ac-deploy">

  <property name="acquia.repo.dir" value="acquia-cloud" />
  <property name="acquia.repo.url" value="ecfpfis@svn-3084.devcloud.hosting.acquia.com:ecfpfis.git" />
  <property name="acquia.repo" value="${phing.project.tmp.dir}/${acquia.repo.dir}" />
  <property name="acquia.dump" value="${phing.project.tmp.dir}/ac-cloud.mysql" />
  <property name="acquia.branch" value="master" />
  <property name="acquia.docroot" value="${acquia.repo}/docroot" />

  <target name="ac-deploy" description="Deliver code to Acquia repository" depends="build-acceptance">
    <if>
      <not>
        <available file="${acquia.repo}" type="dir" />
      </not>
      <then>
        <mkdir dir="${acquia.repo}" />
        <exec dir="${phing.project.tmp.dir}" command="git clone ${acquia.repo.url} ${acquia.repo.dir}"></exec>
        <echo msg="acquia-cloud repository cloned to '${acquia.repo}'" />
      </then>
    </if>
    <exec dir="${acquia.repo}" command="git checkout ${acquia.branch}"></exec>
    <exec dir="${acquia.repo}" command="git pull origin ${acquia.branch}"></exec>
    <exec dir="${acquia.repo}" command="git pull --tags"></exec>

    <echo msg="Delete acquia-cloud/docroot." />
    <delete includeemptydirs="true" failonerror="false">
      <fileset dir="${acquia.docroot}">
        <patternset>
          <exclude name="files"/>
          <exclude name="sites/*/files"/>
          <exclude name="sites/*/private"/>
          <exclude name="**/settings.php"/>
          <exclude name="**/sites.php/"/>
        </patternset>
      </fileset>
    </delete>
    <echo msg="Copy files to acquia-cloud/docroot." />
    <copy todir="${acquia.docroot}">
        <fileset dir="${phing.project.tmp.dir}/build">
          <patternset>
            <exclude name="**/settings.php"/>
            <exclude name="**/sites.php/"/>
            <exclude name="sites/*/files"/>
          </patternset>
      </fileset>
    </copy>

    <tstamp>
      <format property="DATE" pattern="%c" locale="nl_NL"/>
    </tstamp>

    <!-- commit all modified / deleted files -->
    <exec dir="${project.basedir}" command="git rev-parse --abbrev-ref HEAD" outputProperty="BRANCHNAME"></exec>
    <exec dir="${acquia.repo}" command="git add -A"></exec>
    <exec dir="${acquia.repo}" command="git commit -m 'Packaged by Phing in project ${project.name} from ${BRANCHNAME} on ${DATE}'"></exec>

    <!-- Push -->
    <echo msg="Pushing deployment to acquia." />
    <exec dir="${acquia.repo}" command="git push origin ${acquia.branch}"></exec>
  </target>

  <target name="restore-ac-db" description="Replaces the local database with the AC database." depends="">
    <drush command="sql-drop" assume="yes" root="${platform.build.dir}" bin="${drush.bin}">
    </drush>
    <echo msg="Database dropped." />
    <!-- Aliases are not handled by Phing Drush Task so we use exec. -->
    <if>
      <not>
        <available file="${acquia.dump}" type="file" property="available_phing_project_ac_dump"/>
      </not>
      <then>
        <phingcall target="fetch-ac-db" />
      </then>
    </if>

    <echo msg="Restoring AC database." />
    <exec command="cat ${acquia.dump} | ${drush.bin} --root=${platform.build.dir} -y sqlc" />
    <echo msg="AC database restored." />

    <echo msg="Set temporary file directory" />
    <exec command="${drush.bin} --root=${platform.build.dir} vset file_temporary_path 'sites/default/files/tmp'" />

    <echo msg="Clearing caches" />
    <exec command="${drush.bin} --root=${platform.build.dir} -y cc all" />
    <echo msg="Caches cleared" />

    <echo msg="Rebuilding registry." />
    <drush command="registry-rebuild" assume="yes" root="${platform.build.dir}" bin="${drush.bin}">
    </drush>
    <echo msg="Registry rebuilt." />

    <drush command="user-password" assume="yes" root="${platform.build.dir}" bin="${drush.bin}">
      <param>admin</param>
      <option name="password">pass</option>
    </drush>
    <echo msg="Password for user admin is set to pass." />

    <!-- Also set editor password for easy testing. -->
    <drush command="user-password" assume="yes" root="${platform.build.dir}" bin="${drush.bin}">
      <param>editor_test</param>
      <option name="password">editor_test</option>
    </drush>
    <echo msg="Password for user editor_test is set to pass." />

    <!-- Disable cache -->
    <exec command="${drush.bin} --root=${platform.build.dir} vset --exact cache 0" />
    <echo msg="Cache has been disabled." />
    <!-- Disable preprocess css -->
    <exec command="${drush.bin} --root=${platform.build.dir} vset --exact preprocess_css 0" />
    <echo msg="Disable css pre processing." />
    <!-- Disable preprocess css -->
    <exec command="${drush.bin} --root=${platform.build.dir} vset --exact preprocess_js 0" />
    <echo msg="Disable js pre processing." />

    <phingcall target="enable-development-modules" />

    <drush command="variable-set" assume="yes" root="${platform.build.dir}" bin="${drush.bin}">
      <param>stage_file_proxy_origin</param>
      <param>${subsite.production.root}</param>
    </drush>

    <drush command="variable-set" assume="yes" root="${platform.build.dir}" bin="${drush.bin}">
      <param>stage_file_proxy_origin_dir</param>
      <param>sites/${subsite.production.key}/files</param>
    </drush>

  </target>

  <target name="fetch-ac-db" description="Downloads the AC database." depends="">
    <delete file="${acquia.dump}" />
    <echo msg="Downloading remote database" />
    <exec command="${drush.bin} -y @${drush.alias.acquia} sql-dump --gzip > ${acquia.dump}.gz" />
    <echo msg="AC database downloaded." />
    <echo msg="Unpacking database" />
    <exec command="gunzip ${acquia.dump}.gz" />
    <echo msg="Database unpacked" />
  </target>

  <!-- Release to SVN. -->
  <property name="release" value="${phing.project.tmp.dir}/release" />
  <property name="release.svn" value="${phing.project.tmp.dir}/release-svn" />
  <property name="release.make" value="${phing.project.tmp.dir}/release-make" />
  <property name="release.build" value="${phing.project.tmp.dir}/release-build" />

  <target name="release" description="Release code to MULTISITE SVN">
    <!-- Prepare the folders. -->
    <delete dir="${release}" includeemptydirs="true" failonerror="false" />
    <mkdir dir="${release}" />
    <delete dir="${release.svn}" includeemptydirs="true" failonerror="false" />
    <mkdir dir="${release.svn}" />
    <delete dir="${release.make}" includeemptydirs="true" failonerror="false" />
    <mkdir dir="${release.make}" />
    <delete dir="${release.build}" includeemptydirs="true" failonerror="false" />
    <mkdir dir="${release.build}" />

    <!-- Create new release -->
    <phingcall target="package" />

    <!-- Checkout the SVN  -->
    <exec dir="${project.basedir}" command="svn checkout ${phing.project.svn} ${release.svn}"></exec>
    <delete includeemptydirs="true" failonerror="true">
        <fileset dir="${release.svn}" excludes=".svn/**" defaultexcludes="false" />
    </delete>

    <!--Move files to SVN-->
    <copy todir="${release.svn}" overwrite="true">
      <fileset dir="${release}" />
    </copy>

    <!-- SVN remove locally deleted files  -->
    <exec dir="${release.svn}" command="svn st | grep ^! | awk '{print &quot; --force &quot;$2}' | xargs svn rm"></exec>
    <!-- Add latest code  -->
    <exec dir="${release.svn}" command="svn add . --force"></exec>

    <input propertyname="commitmessage">Please provide a commit message:</input>
    <echo msg="${commitmessage}" />
    <exec dir="${release.svn}" command="svn commit -m '${commitmessage}'"></exec>

  </target>

  <target name="package" description="Package files for production use (multisite installation, sites folder).">

    <!-- Assemble the new release. -->
    <phingcall target="drush-make-no-core">
      <property name="drush.make.target.file" value="${subsite.make}" />
      <property name="drush.make.root" value="${release.make}" />
    </phingcall>
    <copy todir="${release.build}" overwrite="true">
      <fileset dir="${release.make}/sites/all" />
    </copy>
    <copy todir="${release.build}/modules/features/custom" overwrite="true">
      <fileset dir="${subsite.resources.features.dir}" />
    </copy>
    <copy todir="${release.build}/modules/custom" overwrite="true">
      <fileset dir="${subsite.resources.modules.dir}" />
    </copy>
    <copy todir="${release.build}/themes" overwrite="true">
      <fileset dir="${subsite.resources.themes.dir}" />
    </copy>

    <copy todir="${release}" overwrite="false">
      <fileset dir="${release.build}">
        <patternset>
          <exclude name="**/development/**"/>
          <exclude name="**/node_modules/**"/>
          <exclude name="**/styleguide/**"/>
          <exclude name="**/Gruntfile.js"/>
          <exclude name="**/Watchfile"/>
          <exclude name="**/package.json"/>
          <exclude name="**/commissioner_OLD/**"/>
        </patternset>
      </fileset>
    </copy>

  </target>

  <!-- Unpack the platform. -->
  <target name="unpack-acceptance-platform" depends="download-platform">
    <!-- Use the faster native commands on UNIX systems. -->
    <if>
      <os family="unix" />
      <then>
        <echo msg='mkdir "${phing.project.tmp.dir}/build"' />
        <exec
                command='mkdir "${phing.project.tmp.dir}/build"'
                dir="${project.basedir}"
                passthru="true"
        />
        <echo msg='tar xzf "${platform.package.tarball}" -C "${phing.project.tmp.dir}/build"' />
        <exec
                command='tar xzf "${platform.package.tarball}" -C "${phing.project.tmp.dir}/build"'
                dir="${project.basedir}"
                passthru="true"
                checkreturn="true"
        />
      </then>
      <else>
        <untar file="${platform.package.tarball}" todir="${phing.project.tmp.dir}/build" />
      </else>
    </if>
  </target>

  <!-- Download development modules. -->
  <target name="download-development-modules-acceptance" depends="generate-development-makefile">
    <echo msg="Download development modules." />
    <phingcall target="drush-make-no-core">
      <property name="drush.make.target.file" value="${subsite.temporary.development.make}" />
      <property name="drush.make.root" value="${phing.project.tmp.dir}/build" />
    </phingcall>
  </target>

  <target name="copy-acceptance-files">
    <exec
      command='cp -r ${dist.build.dir}/* "${phing.project.tmp.dir}/build/sites/all/"'
      dir="${project.basedir}"
      passthru="true"
      checkreturn="true"
    />
  </target>

  <target
    name="build-acceptance"
    description="Build a version of the subsite intended to distribute as a release package."
    depends="build-dist, unpack-acceptance-platform, copy-acceptance-files, download-development-modules-acceptance" />

</project>
