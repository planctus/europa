<?php

/**
 * @file
 * Multisite dynamic_basetheme definition module.
 */

define('MULTISITE_DYNAMIC_BASETHEME_JQUERY_VERSION', '1.7');
define('MULTISITE_DYNAMIC_BASETHEME_JMUTLI_LOAD_ALWAYS', '1');


/**
 * Implements hook_form_BASE_FORM_ID_alter.
 *
 * BASE_FORM_ID : system_theme_settings.
 */
function multisite_dynamic_basetheme_form_system_theme_settings_alter(&$form, $form_state) {
  // Get current theme object.
  if (isset ($form_state['build_info']['args'][0])) {
    $theme_key = $form_state['build_info']['args'][0];
    $themes = list_themes();
    $theme_object = $themes[$theme_key];

    if (isset ($theme_object->base_theme)) {
      $form['base_theme_fieldset'] = array(
        '#type' => 'fieldset',
        '#title' => t('Base theme'),
        '#weight' => -100,
      );

      $default_value = (theme_get_setting('ec_resp_base_theme_of_subtheme', $theme_key)) ? theme_get_setting('ec_resp_base_theme_of_subtheme', $theme_key) : 0;

      $form['base_theme_fieldset']['ec_resp_base_theme_of_subtheme'] = array(
        '#type' => 'select',
        '#title' => t('Current base theme'),
        '#default_value' => $default_value,
        '#options' => multisite_dynamic_basetheme_get_base_theme_list($theme_key),
        '#description' => t('Select the base theme for this subtheme. Default correspond to the theme defined in the info file.'),
      );
      $form['#submit'][] = 'multisite_dynamic_basetheme_form_system_theme_settings_submit';

  
      $var = 'theme_' . $theme_key . '_settings';
      $settings = variable_get($var);
    }
  }
}

/**
 * Submit function of 'system_theme_settings' form.
 *
 * Rebuild the themes informations if ec_resp_base_theme_of_subtheme has changed.
 */
function multisite_dynamic_basetheme_form_system_theme_settings_submit($form, &$form_state) {
  $old_value = $form['base_theme_fieldset']['ec_resp_base_theme_of_subtheme']['#default_value'];
  $new_value = $form_state['values']['ec_resp_base_theme_of_subtheme'];
  if ($old_value !== $new_value) {
    _multisite_dynamic_basetheme_rebuild_system_theme();
    
    if ($new_value == '') {
      $theme_key = $form_state['build_info']['args'][0];
      $theme_info_file = drupal_parse_info_file(drupal_get_path('theme', $theme_key) . "/$theme_key.info");
      $new_value = $theme_info_file['base theme'];
    }
    _multisite_dynamic_basetheme_jquery_modules_handle($new_value);
  }
}

/**
 * Handle jquery modules.
 *
 */
function _multisite_dynamic_basetheme_jquery_modules_handle($base_theme) {
  // Enable-disable jquery modules.
  if (empty($base_theme)) {
    return;
  }
  if ( $base_theme == 'ec_resp' ) {
    // Assume ec_resp > 1.6, i.e. require jquery_update.
    if (!module_exists('jquery_update')) {
      module_enable(array('jquery_update'));
      variable_set('jquery_update_jquery_version', MULTISITE_DYNAMIC_BASETHEME_JQUERY_VERSION);
      variable_del('jqmulti_load_always');
    }
    if (module_exists('jqmulti')) {
      module_disable(array('jqmulti'));
    }
  }
  elseif ($base_theme <= 'ec_resp_16') {
    if (!module_exists('jqmulti')) {
      module_enable(array('jqmulti'));
    }
    if (module_exists('jquery_update')) {
      module_disable(array('jquery_update'));
      variable_set('jqmulti_load_always', MULTISITE_DYNAMIC_BASETHEME_JMUTLI_LOAD_ALWAYS);
      variable_del('jquery_update_jquery_version');
    }
  }
}

/**
 * Rebuild theme information.
 *
 */
function _multisite_dynamic_basetheme_rebuild_system_theme() {
  drupal_static_reset("theme_get_setting");
  system_rebuild_theme_data();
  drupal_theme_rebuild();
}

/**
 * Return true if the theme is a multisite base theme.
 *
 * @param object $theme
 * @return boolean 
 *
 */
function _multisite_dynamic_basetheme_is_multisite_base_theme($theme) {
  if (is_object ($theme)) {
    return (isset ($theme->info['multisite']) && $theme->info['multisite'] == 1);
  }
  return FALSE;
}

/**
 * Return list of available base theme (theme with 'multisite = 1').
 *
 * @return array available multisite base themes.
 *
 */
function multisite_dynamic_basetheme_get_base_theme_list($theme_key = FALSE) {
  $options = array();
  $themes = list_themes();

  // Get all available themes.
  foreach ($themes as $theme_id => $theme_obj) {
    if (_multisite_dynamic_basetheme_is_multisite_base_theme($theme_obj)) {
      $options[$theme_id] = $theme_obj->info['name'] . " ($theme_id)";
    }
  }

  // Get the original base theme of $theme_key from info file.
  if ($theme_key) {
    $theme_info_file = drupal_parse_info_file(drupal_get_path('theme', $theme_key) . "/$theme_key.info");
    $theme_base_key = $theme_info_file['base theme'];
    $theme_base_name = (isset($themes[$theme_base_key]) && _multisite_dynamic_basetheme_is_multisite_base_theme($themes[$theme_base_key])) ? $themes[$theme_base_key]->info['name'] : t("BASE THEME NOT FOUND");
    $options_default[''] = t("Default: @base_theme (@base_theme_key)", array("@base_theme" => $theme_base_name, "@base_theme_key" => $theme_base_key));
    $options = $options_default + $options;
    unset($options[$theme_base_key]);
  }

  return $options;
}

/**
 * Implements hook_system_info_alter().
 *
 * Rewrite 'base theme' of all subtheme with the setting "ec_resp_base_theme_of_subtheme" (if defined).
 */
function multisite_dynamic_basetheme_system_info_alter(&$info, $file, $type) {
  if ($type == "theme" && isset($file->info['base theme'])) {
    $theme_key = $file->name;
    if ($new_base_theme = theme_get_setting('ec_resp_base_theme_of_subtheme', $theme_key)) {
      $themes = list_themes();
      if (isset($themes[$new_base_theme]) && _multisite_dynamic_basetheme_is_multisite_base_theme($themes[$new_base_theme])) {
        $info['base theme'] = $new_base_theme;
      }
    }
  }
}
