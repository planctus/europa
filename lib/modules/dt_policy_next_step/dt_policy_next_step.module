<?php

/**
 * @file
 * The next step field definition for NextEuropa Strategy Policy content type.
 */

/**
 * Implements hook_field_info().
 */
function dt_policy_next_step_field_info() {
  return [
    'dt_policy_next_step_field' => [
      'label' => t('Next step'),
      'description' => t('Next step field for NextEuropa Strategy Policy.'),
      'settings' => [
        'max_length' => 255,
        'rows' => 5,
        'timezone' => 1,
        'timeline_type' => 'timeline',
      ],
      'default_widget' => 'dt_policy_next_step_widget',
      'default_formatter' => 'dt_policy_next_step_formatter_default',
    ],
  ];
}

/**
 * Implements hook_field_widget_info().
 */
function dt_policy_next_step_field_widget_info() {
  return [
    'dt_policy_next_step_widget' => [
      'label' => t('Next step'),
      'field types' => ['dt_policy_next_step_field'],
    ],
  ];
}

/**
 * Implements hook_field_widget_settings_form().
 */
function dt_policy_next_step_field_widget_settings_form($field, $instance) {
  $widget = $instance['widget'];
  $settings = $widget['settings'];

  $element['timeline_type'] = [
    '#title' => t('Select type'),
    '#type' => 'radios',
    '#default_value' => isset($settings['value']['timeline_type']) ? $settings['value']['timeline_type'] : $settings['timeline_type'],
    '#description' => t('This option will define visualization'),
    '#options' => [
      'timeline' => t('Timeline'),
      'timeline_schedule' => t('Timeline Schedule'),
    ],
  ];

  // Settings available if the type is a default Timeline.
  // Max lenght settings.
  $element['size'] = [
    '#type' => 'textfield',
    '#title' => t('Size of when/timeframe'),
    '#default_value' => isset($settings['value']['size']) ? $settings['value']['size'] : $settings['size'],
    '#required' => FALSE,
    '#element_validate' => ['element_validate_integer_positive'],
    '#states' => [
      'visible' => [
        ':input[name*="timeline_type"]' => ['value' => 'timeline'],
      ],
      'required' => [
        ':input[name*="timeline_type"]' => ['value' => 'timeline'],
      ],
    ],
  ];
  $element['rows'] = [
    '#type' => 'textfield',
    '#title' => t('Rows of steps in bullet'),
    '#default_value' => isset($settings['value']['rows']) ? $settings['value']['rows'] : $settings['rows'],
    '#required' => FALSE,
    '#element_validate' => ['element_validate_integer_positive'],
    '#states' => [
      'visible' => [
        ':input[name*="timeline_type"]' => ['value' => 'timeline'],
      ],
      'required' => [
        ':input[name*="timeline_type"]' => ['value' => 'timeline'],
      ],
    ],
  ];

  // Settings available if the type is a Timeline Schedule.
  $element['timezone'] = [
    '#type' => 'checkbox',
    '#title' => t('Use timezone functionality'),
    '#description' => t('Enable attaching this information ot the timeline item.'),
    '#default_value' => isset($settings['value']['timezone']) ? $settings['value']['timezone'] : $settings['timezone'],
    '#return_value' => 1,
    '#states' => [
      'visible' => [
        ':input[name*="timeline_type"]' => ['value' => 'timeline_schedule'],
      ],
    ],
  ];

  return ['value' => $element];
}

/**
 * Implements hook_field_widget_form().
 */
function dt_policy_next_step_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $widget = $instance['widget'];
  $settings = $widget['settings'];

  $timeline_type = isset($settings['value']['timeline_type']) ? $settings['value']['timeline_type'] : $settings['timeline_type'];
  $timezone = isset($settings['value']['timezone']) ? $settings['value']['timezone'] : $settings['timezone'];

  // In case of only one field item used.
  if ($field['cardinality'] == 1) {
    $element['#type'] = 'fieldset';
  }

  // Item description.
  $element['steps_in_bullets'] = [
    '#title' => t('Step in bullets'),
    '#type' => 'text_format',
    '#description' => t('Please give the steps in bullet bulleted list format.'),
    '#default_value' => isset($items[$delta]['steps_in_bullets']) ? $items[$delta]['steps_in_bullets'] : NULL,
    '#rows' => isset($settings['rows']) ? $settings['rows'] : 5,
    '#attributes' => ['class' => ['text-full']],
    '#format' => 'full_html',
    '#weight' => 100,
  ];

  switch ($timeline_type) {
    case 'timeline':
      $element['when_timeframe'] = [
        '#title' => t('When/timeframe'),
        '#type' => 'textfield',
        '#description' => t('Please provide date and time information.'),
        '#default_value' => isset($items[$delta]['when_timeframe']) ? $items[$delta]['when_timeframe'] : NULL,
      ];
      break;

    case 'timeline_schedule':
      if ($timezone) {
        $element['timezone'] = [
          '#type' => 'date_timezone',
          '#date_label_position' => 'above',
          '#options' => system_time_zones(),
          '#default_value' => isset($items[$delta]['timezone']) ? $items[$delta]['timezone'] : date_default_timezone(),
          '#description' => t('Will be displayed on the first item of the timeline list.'),
          '#required' => FALSE,
        ];
      }
      $element['time_date_start'] = [
        '#title' => t('Schedule item start'),
        '#type' => 'date_popup',
        '#required' => FALSE,
        '#default_value' => isset($items[$delta]['time_date_start']) ? $items[$delta]['time_date_start'] : '',
        '#date_format' => 'm-d-Y H:i',
        '#description' => t('The time will be displayed for the user.'),
      ];
      $element['time_date_end'] = [
        '#title' => t('Schedule item end'),
        '#type' => 'date_popup',
        '#default_value' => isset($items[$delta]['time_date_end']) ? $items[$delta]['time_date_end'] : '',
        '#date_format' => 'm-d-Y H:i',
        '#description' => t('The time will be displayed for the user.'),
      ];

      $element['#element_validate'] = ['_dt_policy_next_step_time_start_date_validate'];
      break;
  }

  return $element;
}

/**
 * Helper to validate time_start_date field.
 */
function _dt_policy_next_step_time_start_date_validate($element, &$form_state, $form) {
  $start_date = $element['time_date_start']['#value'];
  $start_date_is_empty = (empty($start_date['date'])|| empty($start_date['time']));
  $end_date = $element['time_date_end']['#value'];
  $end_date_is_empty = (empty($end_date['date']) || empty($end_date['time']));
  $steps_in_bullets = $element['steps_in_bullets']['value']['#value'];
  $steps_in_bullets_is_empty = empty($steps_in_bullets);

  if (($start_date_is_empty && !$end_date_is_empty) ||
    ($start_date_is_empty && !$steps_in_bullets_is_empty)) {
    form_error($element['time_date_start'], t('Start date is required.'));
  }
}

/**
 * Implements hook_field_is_empty().
 */
function dt_policy_next_step_field_is_empty($item, $field) {
  if (empty($item['time_date_start']) && empty($item['when_timeframe'])) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_field_presave().
 */
function dt_policy_next_step_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
  if ($field['type'] == 'dt_policy_next_step_field') {
    foreach ($items as $delta => $item) {
      // The hook_field_presave() called multiple times.
      // Have to be sure if $item['steps_in_bullets']['value'] exits.
      if (isset($item['steps_in_bullets']['value']) && is_array($item['steps_in_bullets'])) {
        $items[$delta]['steps_in_bullets'] = $item['steps_in_bullets']['value'];
      }
    }
  }
}

/**
 * Implements hook_field_validate().
 */
function dt_policy_next_step_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  foreach ($items as $delta => $item) {
    // Check the length on when/timeframe.
    if (!empty($item['when_timeframe'])) {
      if (!empty($field['settings']['max_length']) && drupal_strlen($item['when_timeframe']) > $field['settings']['max_length']) {
        $errors[$field['when_timeframe']][$langcode][$delta][] = [
          'error' => 'dt_policy_next_step_max_length',
          'message' => t('%name: the value may not be longer than %max characters.',
            [
              '%name' => $instance['label'],
              '%max' => $field['settings']['max_length'],
            ]
          ),
        ];
      }
    }
  }
}

/**
 * Implements hook_field_widget_error().
 */
function dt_policy_next_step_field_widget_error($element, $error, $form, &$form_state) {
  switch ($error['error']) {
    case 'dt_policy_next_step_max_length':
      form_error($element, $error['message']);
      break;
  }
}

/**
 * Implements hook_field_formatter_info().
 */
function dt_policy_next_step_field_formatter_info() {
  return [
    'dt_policy_next_step_formatter_default' => [
      'label' => 'Next step format',
      'field types' => ['dt_policy_next_step_field'],
      'settings' => [
        'modifier' => '',
        'timeline_expander_disable' => 0,
        'date_formatter' => '',
        'show_timezone' => 1,
      ],
    ],
  ];
}

/**
 * Add the field formatter settings form.
 */
function dt_policy_next_step_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $element = [];

  $element['timeline_expander_disable'] = [
    '#title' => t('Disable timeline expander'),
    '#type' => 'checkbox',
    '#default_value' => isset($settings['timeline_expander_disable']) ? $settings['timeline_expander_disable'] : 0,
    '#description' => t('Choose whether to display all timeline items at once.'),
  ];
  $element['modifier'] = [
    '#title' => t('Modifier'),
    '#type' => 'select',
    '#options' => [
      '' => t('None'),
      'timeline--nopadding' => t('No padding'),
    ],
    '#default_value' => $settings['modifier'],
  ];
  $element['date_formatter'] = [
    '#title' => t('Dates formatter'),
    '#type' => 'textfield',
    '#default_value' => isset($settings['date_formatter']) ? $settings['date_formatter'] : 'H:i',
    '#description' => t('!rules formatting rules can be applied',
      ['!rules' => l(t('These'), 'http://php.net/manual/en/function.date.php')]),
  ];
  $element['show_timezone'] = [
    '#type' => 'select',
    '#title' => t('Show timezone information'),
    '#description' => t('Enable the display of the timezone information in the front-end.'),
    '#default_value' => isset($settings['show_timezone']) ? $settings['show_timezone'] : 1,
    '#options' => [
      1 => t('Yes'),
      0 => t('No'),
    ],
  ];

  return $element;
}

/**
 * Implements hook_field_formatter_view().
 */
function dt_policy_next_step_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $elements = [];
  if (!empty($items)) {

    $timeline_expander_disable = isset($display['settings']['timeline_expander_disable']) ? $display['settings']['timeline_expander_disable'] : 0;
    $modifier = !empty($display['settings']['modifier']) ? ' ' . $display['settings']['modifier'] : '';
    $date_formatter = empty($display['settings']['date_formatter']) ? 'H.i' : $display['settings']['date_formatter'];
    $show_timezone = isset($display['settings']['show_timezone']) ? $display['settings']['show_timezone'] : 1;

    $elements['#prefix'] = '<div class="timeline' . $modifier . '" data-expander-disable=' . $timeline_expander_disable . '>';
    $elements['#suffix'] = '</div><div class="clearfix"></div>';
    foreach ($items as $delta => $item) {
      $item = _dt_policy_next_step_sanitize($item, $langcode);
      $elements[$delta] = [
        '#theme' => $display['type'],
        '#element' => $item,
        '#field' => $instance,
        '#display' => $display,
        '#date_formatter' => $date_formatter,
        '#show_timezone' => $show_timezone,
      ];
    }
  }

  return $elements;
}

/**
 * Helper function for sanitizing a displaying value.
 *
 * @param array $items
 *   Items to sanitize.
 * @param string $langcode
 *   Language code.
 *
 * @return array
 *   Sanitized item.
 */
function _dt_policy_next_step_sanitize($items, $langcode) {
  // Sanitizing items.
  foreach ($items as $key => $item) {
    switch ($key) {
      case 'when_timeframe':
        $items[$key] = check_plain($item);
        break;

      case 'steps_in_bullets':
        $items[$key] = check_markup($item, filter_default_format(), $langcode);
        break;
    }
  }

  return $items;
}

/**
 * Implements hook_theme().
 */
function dt_policy_next_step_theme() {
  return [
    'dt_policy_next_step_formatter_default' => [
      'variables' => [
        'element' => NULL,
        'field' => NULL,
        'modifiers' => [],
        'date_formatter' => '',
        'show_timezone' => '',
      ],
    ],
  ];
}

/**
 * Formats a next step default.
 */
function theme_dt_policy_next_step_formatter_default($vars) {
  static $delta = 0;
  $element = $vars['element'];
  $widget_settings = $vars['field']['widget']['settings'];
  $timeline_type = isset($widget_settings['value']['timeline_type']) ? $widget_settings['value']['timeline_type'] : $widget_settings['timeline_type'];
  $show_timezone = $vars['show_timezone'];
  $date_formatter = $vars['date_formatter'];

  $output = '<div class="timeline__item">';

  switch ($timeline_type) {
    case 'timeline':
      // When/timeframe.
      if (!empty($element['when_timeframe'])) {
        $output .= '<div class="timeline__item-title">' . $element['when_timeframe'] . '</div>';
      }
      break;

    case 'timeline_schedule':
      $output .= '<div class="timeline__item-title">';
      if (!empty($element['time_date_start'])) {
        $output .= date($date_formatter, strtotime($element['time_date_start']));
      }
      if (!empty($element['time_date_end'])) {
        $output .= ' - ' . date($date_formatter, strtotime($element['time_date_end']));
      }
      // If timezone is desired and set, put it only on the first item.
      if ($show_timezone && isset($element['timezone']) && $delta == 0) {
        $output .= ' (' . $element['timezone'] . ')';
      }
      $output .= '</div>';
      break;
  }

  if (!empty($element['steps_in_bullets'])) {
    $output .= '<div class="timeline__text">' . $element['steps_in_bullets'] . '</div>';
  }

  $output .= '</div>';

  ++$delta;
  return $output;
}
