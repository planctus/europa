<?php

/**
 * @file
 * Provides simple way to print exposed filter data.
 */

/**
 * Implements hook_theme().
 */
function dt_exposed_filter_data_theme() {
  return array(
    'exposed_filter_data' => array(
      'template' => 'dt_exposed_filter_data',
      'variables' => array(
        'view' => NULL,
      ),
    ),
  );
}

/**
 * Implements hook_preprocess().
 *
 * By default the function uses the views exposed filters to build the facets.
 * But we can add custom_filters to the views object which will then be added to
 * the facets array.
 */
function dt_exposed_filter_data_preprocess_exposed_filter_data(&$vars) {
  // In case no view - get the current view.
  if (!$view = $vars['view']) {
    $view = views_get_current_view();
  }

  // Search api current search.
  $exposed_filters = dt_exposed_filter_data_get_exposed_filters($view);
  // Get the active exposed data.
  $exposed_input = $view->get_exposed_input();
  // Initialize our exposed display.
  $displays = [];

  // Attempt to get the searcher (searchapi). If we have one, we parse the
  // values. We do this in 2 foreach loops to avoid to much load on the server.
  if ($active = facetapi_get_active_searchers()) {
    $adapter = facetapi_build_realm(reset($active), 'views');

    foreach ($exposed_filters as $id => $filter) {
      // If the facet is part of the adapter, we know it is active.
      if (isset($filter->options['facet'])) {
        if (isset($adapter[$filter->options['facet']['facet']])) {
          // We must be sure it has a value.
          $value = isset($exposed_input[$adapter[$filter->options['facet']['facet']]['#facet_identifier']]) ? $exposed_input[$adapter[$filter->options['facet']['facet']]['#facet_identifier']] : NULL;
          $value_has_data = isset($adapter[$filter->options['facet']['facet']]['#facet_data']) && array_key_exists($value, $adapter[$filter->options['facet']['facet']]['#facet_data']);
          if ($value && $value_has_data) {
            if ($adapter[$filter->options['facet']['facet']]['#facet_type'] == 'checkboxes') {
              $displays[$filter->options['id']]['label'] = $adapter[$filter->options['facet']['facet']]['#title'];
              $displays[$filter->options['id']]['value'] = t('Yes');
            }
            else {
              $displays[$filter->options['id']]['label'] = $filter->options['expose']['label'];
              $displays[$filter->options['id']]['value'] = $adapter[$filter->options['facet']['facet']]['#facet_data'][$value];
            }
          }
        }
        unset($exposed_filters[$id]);
      }
    }
  }

  // Get the All string as we dont want to use it.
  $all_string = t('All');

  // Go over the normal views values.
  foreach ($exposed_filters as $id => $filter) {
    if (isset($exposed_input[$filter->options['id']]) && $exposed_input[$filter->options['id']] !== $all_string) {
      $displays[$filter->options['id']]['label'] = $filter->options['expose']['label'];
      // If we can get the value from the filter we use it.
      if (isset($filter->value_options) && is_array($filter->value_options) && isset($filter->value_options[$exposed_input[$filter->options['id']]])) {
        $displays[$filter->options['id']]['value'] = $filter->value_options[$exposed_input[$filter->options['id']]];
      }
      // Fallback to the original value.
      else {
        $displays[$filter->options['id']]['value'] = $exposed_input[$filter->options['id']];
      }
    }
  }

  // If we have data in our $display array, we add the facets.
  if (isset($displays)) {
    foreach ($displays as $data) {
      // When it are dates, it is an array.
      if (is_array($data['value']) && isset($data['value']['date']) && !empty($data['value']['date'])) {
        $data['value'] = $data['value']['date'];
      }
      if (!is_array($data['value']) && !empty($data['value'])) {
        $vars['exposed_filters'][$data['label']] = $data['value'];
      }
    }
  }
}

/**
 * Gets all the exposed filters of a view.
 *
 * @param object $view
 *   The views object.
 *
 * @return array
 *   List of exposed filters.
 */
function dt_exposed_filter_data_get_exposed_filters($view) {
  $exposed_filters = [];
  foreach ($view->filter as $filter) {
    if ($filter->is_exposed()) {
      $exposed_filters[] = $filter;
    }
  }
  return $exposed_filters;
}

/**
 * Helper to get the human pretty name of a given field by value.
 *
 * @param string $filter
 *   Exposed filter.
 * @param object $view
 *   View object.
 *
 * @return array
 *   filter settings
 */
function _dt_exposed_filter_data_get_pretty($filter, $view) {
  $result = array();
  foreach ($view->display_handler->handlers['filter'] as $filter_handler) {
    if ($filter_handler->options['expose']['identifier'] === $filter) {
      // Combined filters will need custom handling.
      $is_combined = $filter_handler->field == 'combine';

      $result['label'] = $is_combined ? t('containing') : $filter_handler->options['expose']['label'];
      $result['filter'] = array();
      $value = $filter_handler->value;
      if (is_array($value)) {
        if (isset($value['type']) && $value['type'] === "date") {
          // We could have 2 different times.
          if (empty($value['value']) && (!empty($value['min']) || !empty($value['max']))) {
            // Prepare the formatted date range.
            $date_min_formatted = '';
            $date_max_formatted = '';

            // Start date.
            if (!empty($value['min'])) {
              $date_min_formatted = format_date(strtotime($value['min']), 'ec_date_j_f_y');
              if (empty($value['max'])) {
                // If the end date is not set make it the same.
                $date_max_formatted = format_date(strtotime($value['min']), 'ec_date_j_f_y');
              }
            }
            // End date.
            if (!empty($value['max'])) {
              $date_max_formatted = format_date(strtotime($value['max']), 'ec_date_j_f_y');
              if (empty($value['min'])) {
                // If the start date is not set make it the same.
                $date_min_formatted = format_date(strtotime($value['max']), 'ec_date_j_f_y');
              }
            }

            $date_formatted = _dt_get_date_formatted($date_min_formatted, $date_max_formatted);
          }
          else {
            $date = strtotime($value['value']);
            $date_formatted = format_date($date, 'ec_date_j_f_y');
          }

          // Check if we actually got some date.
          if (!empty($date_formatted)) {
            $result['filter'][] = '"' . $date_formatted . '"';
          }
        }
        $raw_values = array();
        foreach ($value as $val) {
          $raw_values[] = $val;
        }
        foreach ($raw_values as $raw_value) {
          if (isset($filter_handler->value_options[$raw_value]) && !empty($filter_handler->value_options[$raw_value])) {
            $result['filter'][] = '"' . trim($filter_handler->value_options[$raw_value]) . '"';
          }
        }
      }
      elseif (!empty($value)) {
        $result['filter'] = $is_combined ? ('"' . $value . '"') : $value;
      }
    }
  }

  if (!empty($result)) {
    return $result;
  }

  return FALSE;
}

/**
 * Helper to get the facet tags of a given date filter by value.
 *
 * @param object $view
 *   View object.
 *
 * @return array
 *   filter settings
 */
function _dt_exposed_filter_data_get_date_facet_tags($view) {
  // Prepare the result.
  $result = array();
  $result['label'] = '';
  $result['filter'] = array();

  // Get date range values from filters.
  $filter_min = $view->exposed_input['date_filter_min']['value']['date'];
  $filter_max = $view->exposed_input['date_filter_max']['value']['date'];

  // Prepare the formatted date range.
  $date_min_formatted = '';
  $date_max_formatted = '';

  // Start date.
  if (!empty($filter_min)) {
    // Convert date value to european format to be well formatted.
    $date_min = str_replace('/', '-', $filter_min);
    $date_min_formatted = format_date(strtotime($date_min), 'ec_date_j_f_y');
  }
  // End date.
  if (!empty($filter_max)) {
    // Convert date value to european format to be well formatted.
    $date_max = str_replace('/', '-', $filter_max);
    $date_max_formatted = format_date(strtotime($date_max), 'ec_date_j_f_y');
  }

  if (!empty($filter_min) && !empty($filter_max)) {
    $date_formatted = _dt_get_date_formatted($date_min_formatted, $date_max_formatted);
  }
  else {
    // In case of just having start date, display FROM ##DATE##.
    if (!empty($date_min_formatted)) {
      $date_formatted = t('From') . ' ' . $date_min_formatted;
    }
    // In case of just having end date, display TO ##DATE##.
    elseif (!empty($date_max_formatted)) {
      $date_formatted = t('To') . ' ' . $date_max_formatted;
    }
  }

  // Check if we actually got some date.
  if (!empty($date_formatted)) {
    $result['filter'][] = '"' . $date_formatted . '"';
  }

  return $result;
}

/**
 * Helper to get the date formatted.
 *
 * @param string $date_min_formatted
 *   Minimum date formatted.
 * @param string $date_max_formatted
 *   Maximum date formatted.
 *
 * @return string
 *   date formatted
 */
function _dt_get_date_formatted($date_min_formatted, $date_max_formatted) {
  // Prepare our filters.
  $between_date = (!empty($date_min_formatted) && !empty($date_max_formatted));
  $different_date = ($date_min_formatted <> $date_max_formatted);

  // Create the markup.
  // In case 2 different dates, display BETWEEN ##DATE##.
  $date_formatted = ($between_date && $different_date) ? t('Between') . ' ' : '';
  // In case of the same date, display ON ##DATE##.
  $date_formatted .= !$different_date ? t('On') . ' ' : '';
  // Display start date.
  $date_formatted .= (!empty($date_min_formatted) && $different_date) ? $date_min_formatted : '';
  // In case 2 different dates, display ##DATE## AND ##DATE##.
  $date_formatted .= ($between_date && $different_date) ? ' ' . t('and') . ' ' : '';
  // Display end date.
  $date_formatted .= !empty($date_max_formatted) ? $date_max_formatted : '';

  return $date_formatted;
}

/**
 * Simple call to the theme, easy to be used in a view header.
 */
function _dt_exposed_filter_data_get_exposed_filter_output() {
  return theme('exposed_filter_data');
}
