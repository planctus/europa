<?php

/**
 * @file
 * Provides simple way to print exposed filter data.
 */

/**
 * Implements hook_theme().
 */
function dt_exposed_filter_data_theme() {
  return array(
    'exposed_filter_data' => array(
      'template' => 'dt_exposed_filter_data',
      'variables' => array(
        'view' => NULL,
      ),
    ),
  );
}

/**
 * Implements hook_preprocess_hook().
 *
 * By default the function uses the views exposed filters to build the facets.
 * But we can add custom_filters to the views object which will then be added to
 * the facets array.
 */
function dt_exposed_filter_data_preprocess_exposed_filter_data(&$vars) {
  // In case no view - get the current view.
  if (!$view = $vars['view']) {
    $view = views_get_current_view();
  }

  // Get the All string as we dont want to use it.
  $all_string = t('All');

  // Search api current search.
  $exposed_filters = dt_exposed_filter_data_get_exposed_filters($view);
  // Get the active exposed data.
  $exposed_input = $view->get_exposed_input();
  // Initialize our exposed display.
  $displays = [];

  // Attempt to get the searcher (searchapi). If we have one, we parse the
  // values. We do this in 2 foreach loops to avoid to much load on the server.
  if ($active = facetapi_get_active_searchers()) {
    $adapter = facetapi_build_realm(reset($active), 'views');

    foreach ($exposed_filters as $id => $filter) {
      // Set the identifier to use.
      $identifier = $filter->options['expose']['identifier'];
      // If the facet is part of the adapter, we know it is active.
      if (isset($filter->options['facet'])) {
        // Set the current facet.
        $current_facet = $filter->options['facet']['facet'];
        // If the current facet is part of the adapter, we can continue as we
        // know it has data.
        if (isset($adapter[$current_facet])) {
          // We must be sure it has a value.
          $value = isset($exposed_input[$adapter[$current_facet]['#facet_identifier']]) ? $exposed_input[$adapter[$current_facet]['#facet_identifier']] : NULL;
          // If $value == on we should convert it to 1.
          $value = $adapter[$current_facet]['#facet_type'] == 'checkboxes' && $value == 'on' ? 1 : $value;
          // Check if data exists.
          $value_has_data = isset($adapter[$current_facet]['#facet_data']) && array_key_exists($value, $adapter[$current_facet]['#facet_data']);
          if ($value && $value_has_data) {
            // Special logic of the checkboxes.
            if ($adapter[$current_facet]['#facet_type'] == 'checkboxes') {
              $displays[$identifier]['label'] = $adapter[$current_facet]['#title'];
              $displays[$identifier]['value'] = t('Yes');
            }
            else {
              $displays[$identifier]['label'] = $filter->options['expose']['label'];
              $displays[$identifier]['value'] = $adapter[$current_facet]['#facet_data'][$value];
            }
          }
        }
        // Remove the filter from the list to not check it again.
        unset($exposed_filters[$id]);
      }
    }
  }

  // Go over the normal views values.
  foreach ($exposed_filters as $filter) {
    // Set the identifier to use.
    $identifier = $filter->options['expose']['identifier'];
    // If it is different from the default option, we can assume it has data.
    if (isset($exposed_input[$identifier]) && $exposed_input[$identifier] !== $all_string) {
      $displays[$identifier]['label'] = $filter->options['expose']['label'];
      // If we can get the value from the filter we use it.
      if (isset($filter->value_options) && is_array($filter->value_options) && isset($filter->value_options[$exposed_input[$identifier]])) {
        $displays[$identifier]['value'] = $filter->value_options[$exposed_input[$identifier]];
      }
      // Fallback to the original value.
      else {
        if (isset($filter->definition['vocabulary'])) {
          $displays[$identifier]['vocabulary'] = $filter->definition['vocabulary'];
        }
        // We can sometimes depending on the filter,have a nested array.
        if (isset($exposed_input[$identifier]['value']['date'])) {
          $exposed_input[$identifier] = $exposed_input[$identifier]['value'];
        }
        // Set the value to the array.
        $displays[$identifier]['value'] = $exposed_input[$identifier];
      }
    }
  }

  // Date_filter_min and date_filter_max is a special case as by using these
  // identifiers, we should display the between facet.
  if (array_key_exists('date_filter_min', $displays) || array_key_exists('date_filter_max', $displays)) {

    $start = isset($displays['date_filter_min']) ? $displays['date_filter_min']['value']['date'] : NULL;
    $end = isset($displays['date_filter_max']) ? $displays['date_filter_max']['value']['date'] : NULL;

    $displays['date_between'] = [
      'label' => '',
      'value' => _dt_exposed_filter_data_get_date_facet_tags($start, $end),
    ];
    // Unset these, so they dont get used any more.
    unset($displays['date_filter_min'], $displays['date_filter_max']);
  }

  // If we have data in our $display array, we add the facets.
  if (isset($displays)) {
    foreach ($displays as $data) {
      // When it are dates, it is an array.
      if (is_array($data['value']) && isset($data['value']['date']) && !empty($data['value']['date'])) {
        $data['value'] = $data['value']['date'];
      }
      if (!is_array($data['value']) && !empty($data['value'])) {
        // If the data has a vocabulary. We get the term. This is a fallback.
        if (isset($data['vocabulary']) && $term = i18n_taxonomy_localize_terms(taxonomy_term_load($data['value']))) {
          $data['value'] = $term->name;
        }
        $vars['exposed_filters'][$data['label']] = $data['value'];
      }
    }
  }
}

/**
 * Gets all the exposed filters of a view.
 *
 * @param object $view
 *   The views object.
 *
 * @return array
 *   List of exposed filters.
 */
function dt_exposed_filter_data_get_exposed_filters($view) {
  $exposed_filters = [];
  foreach ($view->filter as $filter) {
    if ($filter->is_exposed()) {
      $exposed_filters[] = $filter;
    }
  }
  return $exposed_filters;
}

/**
 * Helper to get the facet tags of a given date filter by value.
 *
 * @param string $date_min
 *   The start date.
 * @param string $date_max
 *   Then end date.
 *
 * @return array
 *   filter settings
 */
function _dt_exposed_filter_data_get_date_facet_tags($date_min = NULL, $date_max = NULL) {
  // Start date.
  if (!empty($date_min)) {
    // Convert date value to european format to be well formatted.
    $date_min_formatted = format_date(strtotime(str_replace('/', '-', $date_min)), 'ec_date_j_f_y');
  }
  // End date.
  if (!empty($date_max)) {
    // Convert date value to european format to be well formatted.
    $date_max_formatted = format_date(strtotime(str_replace('/', '-', $date_max)), 'ec_date_j_f_y');
  }

  // In case we have both dates.
  if (!empty($date_min_formatted) && !empty($date_max_formatted)) {
    return _dt_get_date_formatted($date_min_formatted, $date_max_formatted);
  }

  // In case of just having start date, display FROM ##DATE##.
  if (!empty($date_min_formatted)) {
    return t('From @date', ['@date' => $date_min_formatted]);
  }
  // In case of just having end date, display TO ##DATE##.
  elseif (!empty($date_max_formatted)) {
    return t('To @date', ['@date' => $date_max_formatted]);
  }
  return NULL;
}

/**
 * Helper to get the date formatted.
 *
 * @param string $date_min_formatted
 *   Minimum date formatted.
 * @param string $date_max_formatted
 *   Maximum date formatted.
 *
 * @return string
 *   date formatted
 */
function _dt_get_date_formatted($date_min_formatted, $date_max_formatted) {
  // Prepare our filters.
  $different_date = ($date_min_formatted <> $date_max_formatted);

  switch (TRUE) {
    case (!empty($date_min_formatted) && !empty($date_max_formatted)) && $different_date:
      return t('Between @start_date and @end_date', [
        '@start_date' => $date_min_formatted,
        '@end_date' => $date_max_formatted,
      ]);

    case !$different_date:
      return t('On @date', [
        '@date' => $date_max_formatted,
      ]);
  }
  return NULL;
}

/**
 * Simple call to the theme, easy to be used in a view header.
 */
function _dt_exposed_filter_data_get_exposed_filter_output() {
  return theme('exposed_filter_data');
}
