<?php

/**
 * @file
 * Nexteuropa Legacy link.
 */

module_load_include('inc', 'nexteuropa_legacy_link', 'nexteuropa_legacy_link.field');

/**
 * Implements hook_entity_load().
 */
function nexteuropa_legacy_link_entity_load($entities, $type) {
  _nexteuropa_legacylink_load_entities($entities, $type);
}

/**
 * Implements hook_entitycache_ENTITY_TYPE_load().
 */
function nexteuropa_legacy_link_entitycache_node_load($entities) {
  _nexteuropa_legacylink_load_entities($entities, 'node');
}

/**
 * Custom function to parse entities being loaded with legacy link information.
 */
function _nexteuropa_legacylink_load_entities($entities, $type) {
  // Check for the node type to save resources.
  if ($type == 'node') {
    foreach ($entities as $entity) {
      // Adding prevent link, which is TRUE when we don't want a link,
      // other case undefined.
      if (_nexteuropa_legacy_link_prevent_link($type, $entity)) {
        $entity->prevent_link = TRUE;
        continue;
      }
      // If Legacy link field is used add it to path array.
      if ($legacy_link = _nexteuropa_legacy_link_get($type, $entity)) {
        $entity->legacy = $legacy_link;
        continue;
      }

    }
  }
}

/**
 * Implements hook_node_view().
 *
 * This will make sure that we only deny access when the node is displayed in
 * full mode. We use this instead of hook_node_access as this is the only way we
 * can assure that we only deny access on full view mode.
 *
 * If a legacy link is present, we redirect the user to that url using a 302.
 */
function nexteuropa_legacy_link_node_view($node, $view_mode, $langcode) {
  if ($view_mode === 'full' && _nexteuropa_legacy_link_get('node', $node) && !user_access('access content overview')) {
    // Lets make it a temporary redirect to the actual legacy link.
    if (isset($node->legacy)) {
      drupal_goto($node->legacy, ['external' => TRUE], 302);
    }
    // If anything might go wrong in the goto, we can still show the access
    // denied page.
    drupal_access_denied();
    drupal_exit();
  }
}

/**
 * Implements hook_field_attach_view_alter().
 */
function nexteuropa_legacy_link_field_attach_view_alter(&$output, $context) {
  foreach (element_children($output) as $field_name) {
    $element = &$output[$field_name];
    // Fix linked entity references to link to Legacy link and not to entity.
    if ($element['#field_type'] == 'entityreference' || $element['#field_type'] == 'taxonomy_term_reference') {
      $field = field_info_field($field_name);
      $instance = field_info_instance($element['#entity_type'], $field_name, $element['#bundle']);
      $display = field_get_display($instance, $context['view_mode'], $element['#object']);

      if ($element['#field_type'] == 'entityreference') {
        // Skip entity reference fields not targeting nodes.
        $valid_targets = [
          'node',
          'taxonomy_term',
        ];

        $check_types = isset($field['settings']['target_type']) && in_array($field['settings']['target_type'], $valid_targets);
        $check_setting = !isset($display['settings']['link']) || !isset($field['settings']['target_type']);

        if ($check_setting && $check_types) {
          continue;
        }

        foreach ($element['#items'] as $delta => $item) {
          // Check if item has Legacy link.
          if (isset($item['entity']->legacy)) {
            $element[$delta] = ['#markup' => l($item['entity']->title, $item['entity']->legacy)];
          }
        }
      }
      // Taxonomy term reference.
      else {
        $fromatters = ['taxonomy_term_reference_link'];
        if (in_array($display['type'], $fromatters)) {
          foreach ($element['#items'] as $delta => $item) {
            $term = taxonomy_term_load($item['tid']);
            $link = isset($term->legacy) ? $term->legacy : url('taxonomy/term/' . $item['tid']);

            $element[$delta] = [
              '#type' => 'link',
              '#title' => $term->name,
              '#href' => $link,
            ];
          }
        }
      }
    }
  }
}

/**
 * Implements hook_token_info().
 */
function nexteuropa_legacy_link_token_info() {
  return [
    'tokens' => [
      'node' => [
        'legacy-link' => [
          'name' => t("Legacy link with fallback."),
          'description' => t('When the field_core_legacy_link exists and not empty, the token gives back the legacy link, else the node url.'),
        ],
      ],
    ],
  ];
}

/**
 * Implements hook_tokens().
 */
function nexteuropa_legacy_link_tokens($type, $tokens, $data = [], $options = []) {
  $replacements = [];
  if ($type == 'node' && !empty($data['node'])) {
    $url_options = ['absolute' => TRUE];
    $node = $data['node'];
    foreach ($tokens as $name => $original) {
      switch ($name) {
        // Simple key values on the node.
        case 'legacy-link':
          if ($legacy_link = _nexteuropa_legacy_link_get('node', $node, $node->language)) {
            $replacements[$original] = url($legacy_link);
          }
          else {
            $url_options['language'] = i18n_language_load($node->language);
            $url_options['absolute'] = FALSE;
            $replacements[$original] = url('node/' . $node->nid, $url_options);
          }

          break;
      }
    }
  }

  return $replacements;
}

/**
 * Helper function to check if legacy link exist.
 */
function _nexteuropa_legacy_link_get($entity_type, $entity, $langcode = NULL) {
  if (!isset($langcode)) {
    $langcode = $GLOBALS['language_content']->language;
  }

  $wrapper = entity_metadata_wrapper($entity_type, $entity);
  if ($wrapper->__isset('field_core_legacy_link')) {
    $legacy_link = $wrapper->language($langcode)->field_core_legacy_link->value();

    if ($wrapper->__isset('field_core_type_content')) {
      $content_type = $wrapper->field_core_type_content->value();
      if ($content_type == 'default') {
        return FALSE;
      }
    }

    // Get the actual target path.
    $legacy_link_url = (isset($legacy_link['url'])) ? $legacy_link['url'] : NULL;

    // Allow other modules to alter it.
    drupal_alter('nexteuropa_legacy_link', $legacy_link_url, $entity, $langcode);

    // Return the link.
    return $legacy_link_url;
  }

  return FALSE;
}

/**
 * Helper function to check the link if it is necessary.
 */
function _nexteuropa_legacy_link_prevent_link($entity_type, $entity) {
  $wrapper = entity_metadata_wrapper($entity_type, $entity);

  $type_content_conditions = isset($entity->field_core_type_content) && $wrapper->__isset('field_core_type_content') && $wrapper->field_core_type_content->value() == 'textblock';
  $listing_disable_conditions = isset($entity->field_core_listing_disable_link) && $wrapper->__isset('field_core_listing_disable_link') && $wrapper->field_core_listing_disable_link->value();

  // Checking of type of content (if it is exists).
  if ($type_content_conditions || $listing_disable_conditions) {
    return TRUE;
  }

  return FALSE;
}
