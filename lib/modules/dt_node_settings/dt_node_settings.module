<?php

/**
 * @file
 * Extended settings for node types.
 */

/**
 * Implements hook_permission().
 */
function dt_node_settings_permission() {
  return [
    'configure helper content types' => [
      'title' => t('Configure helper content types'),
      'description' => t('Allow configurations of helper content types'),
    ],
    'access helper content types' => [
      'title' => t('Access helper content types'),
      'description' => t('Allow access to full view of helper content types'),
    ],
  ];
}

/**
 * Implements hook_menu().
 */
function dt_node_settings_menu() {
  $items = [];
  $items['admin/config/content/helper_node_types/settings'] = [
    'title' => 'Helper content types settings',
    'description' => 'Indicate helper content types for the system.',
    'page callback' => 'drupal_get_form',
    'access arguments' => ['configure helper content types'],
    'page arguments' => ['dt_node_settings_helpers_overall'],
    'file' => 'dt_node_settings.admin.inc',
    'file path' => drupal_get_path('module', 'dt_node_settings'),
  ];
  return $items;
}

/**
 * Implements hook_form_alter().
 */
function dt_node_settings_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'node_type_form' && user_access('access helper content types')) {
    $form['dt_node_settings'] = [
      '#type' => 'fieldset',
      '#title' => t('DT specific node settings'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#group' => 'additional_settings',
    ];

    $form['dt_node_settings']['helper_content_type'] = [
      '#type' => 'checkbox',
      '#title' => t('Helper content type'),
      '#default_value' => variable_get('dt_node_settings_helper_node_type_' . $form['#node_type']->type, 0),
      '#options' => [
        0 => t('Disabled'),
        1 => t('Enabled'),
      ],
      '#description' => t('Require special permissions to access to full view of pages of this type.'),
    ];

    $form['#submit'][] = 'dt_node_settings_helpers_single_submit';
  }
}

/**
 * Helper saving 'helper' state per content type.
 */
function dt_node_settings_helpers_single_submit($form, &$form_state) {
  variable_set('dt_node_settings_helper_node_type_' . $form['#node_type']->type, $form_state['values']['helper_content_type']);
}

/**
 * Implements hook_menu_alter().
 */
function dt_node_settings_menu_alter(&$items) {
  // Disable the '/node' page.
  $items['node']['access callback'] = FALSE;

  // Use our own access callback for the 'node/%node' page.
  $items['node/%node']['access callback'] = 'dt_node_settings_node_access_callback';
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 *
 * Adds extra checkboxes to collect extra information on the revision.
 */
function dt_node_settings_form_node_form_alter(&$form, $form_state) {

  // Prepare our additional fields array.
  $additional_fields = [];

  // Invoke implementation and add them to the array.
  foreach (module_implements('dt_node_settings_config_fields') as $module) {
    $additional_fields += module_invoke($module, 'dt_node_settings_config_fields', $form);
  }

  // If we have implementations, we add a field group and populate the data.
  if (!empty($additional_fields)) {
    // Simple switch so we never display empty groups.
    $has_visible_fields = FALSE;
    // Field group defenition.
    $form['dt_node_settings'] = [
      '#type' => 'fieldset',
      '#title' => 'Additional information and settings',
      '#group' => 'additional_settings',
    ];
    // Check if there is data available.
    if (isset($form['#node']->dt_node_settings_data)) {
      $default = unserialize($form['#node']->dt_node_settings_data);
    }
    // Loop over the fields and add them to the form array.
    foreach ($additional_fields as $field_id => $field) {
      // We got to check if they are visible.
      if (!$has_visible_fields && (!isset($field['#access']) || (isset($field['#access']) && $field['#access'] == TRUE))) {
        $has_visible_fields = TRUE;
      }
      // Add the form field, and it's value.
      $form['dt_node_settings'][$field_id] = $field;
      if (isset($default[$field_id])) {
        $form['dt_node_settings'][$field_id]['#default_value'] = $default[$field_id];
      }
    }
    // If no visible fields, remove the group.
    if (!$has_visible_fields) {
      unset($form['dt_node_settings']);
    }
  }
}

/**
 * Implements hook_node_submit().
 */
function dt_node_settings_node_submit($node, $form, &$form_state) {
  // Make sure it's having options and is submitted.
  if (isset($form['dt_node_settings']) && $form_state['values']['op'] == $form_state['values']['submit']) {
    // Get the custom settings.
    $custom_settings = element_children($form['dt_node_settings']);

    // Init.
    $node->dt_node_settings_data_original = [];

    // Loop over our fields.
    foreach ($custom_settings as $setting) {
      $node->dt_node_settings_data_original[$setting] = $form_state['values'][$setting];
    }
  }
}

/**
 * Implements hook_entity_presave().
 *
 * This is a workaround for workbench, as workbench triggers node_save twice and
 * that would cause the array to be double serialized.
 */
function dt_node_settings_entity_presave($entity, $type) {
  if ($type == 'node') {
    if (!isset($entity->dt_node_settings_data_original) && (isset($entity->dt_node_settings_data) && is_array(unserialize($entity->dt_node_settings_data)))) {
      $entity->dt_node_settings_data = unserialize($entity->dt_node_settings_data);
    }
    elseif (isset($entity->dt_node_settings_data_original)) {
      $entity->dt_node_settings_data = $entity->dt_node_settings_data_original;
    }
  }
}

/**
 * Access callback for the node detail page.
 */
function dt_node_settings_node_access_callback($op, $node) {
  // Deny access to the full view mode on helper content type nodes.
  if ($op == 'view' && _content_type_is_helper($node->type) && !user_access('access helper content types')) {
    return FALSE;
  }

  // Default to the regular node access callback.
  return node_access($op, $node);
}

/**
 * Returns TRUE if $node_type is a helper.
 *
 * @param string $node_type
 *   Node type machine name.
 *
 * @return bool
 *   Helper or not.
 */
function _content_type_is_helper($node_type) {
  return (bool) variable_get('dt_node_settings_helper_node_type_' . $node_type, FALSE);
}
