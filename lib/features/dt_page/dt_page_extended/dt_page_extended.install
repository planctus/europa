<?php

/**
 * @file
 * DT Page Extended install file.
 */

/**
 * Implements hook_install().
 */
function dt_page_extended_install() {
  $t = get_t();
  drupal_set_message($t('NextEuropa Page Extended feature is installed on your site.'));
}

/**
 * Implements hook_uninstall().
 */
function dt_page_extended_uninstall() {
  drupal_set_message(t('NextEuropa Page Extended feature is uninstalled on your site.'));
}

/**
 * DTTSB-439: Copying value from parent to parents; remove field instance.
 */
function dt_page_extended_update_7101() {
  // Revert first to prepare the fields.
  features_revert_module('dt_priority');
  features_revert_module('dt_pri_policy_area');
  features_revert_module('dt_page_extended');
  // Copy field contents.
  _dt_shared_field_value_copy('node', 'basic_page', 'field_core_parent', 'field_core_parents');
  drupal_set_message(t("Copied content from 'field_core_parent' to 'field_core_parents' in the basic_page content type."));
  // Remove field instance.
  if ($instance = field_info_instance('node', 'field_core_parent', 'basic_page')) {
    field_delete_instance($instance);
  }
}

/**
 * DTTSB-1200: Move metatag keywords to field_core_keywords and clear it.
 */
function dt_page_extended_update_7104(&$sandbox) {
  if (!isset($sandbox['max'])) {
    // Revert module so new fields are instantiated.
    $features = [
      'dt_core',
      'dt_page_extended',
    ];

    // Reverting the features.
    foreach ($features as $feature) {
      features_revert_module($feature);
    }

    // Query all nid of page.
    $count_query = db_select('node', 'n')
      ->condition('type', 'basic_page');
    $count_query->addExpression('COUNT(n.nid)', 'count');
    $sandbox['max'] = $count_query->execute()->fetchField();
    $sandbox['progress'] = 0;
  }

  // Manage this number of items per pass.
  $limit = 50;

  // Find all the existing nodes of type basic_page.
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'basic_page')
    ->entityOrderBy('entity_id', 'DESC')
    ->range($sandbox['progress'], $limit);
  $results = $query->execute();

  if (isset($results['node'])) {
    $ids = array_keys($results['node']);
    $nodes = entity_load('node', $ids);

    foreach ($nodes as $node) {
      // If there's a value in metatag keywords,
      // copy it to field_core_keywords
      // and clear the metatag keywords so it fallbacks to default.
      _dt_page_extended_migrate_metatags($node);

      // Check revisions (nodes with drafts).
      if ($node_revs = node_revision_list($node)) {
        $node_rev_id = array_shift(array_keys($node_revs));
        if ($node_rev_id != $node->vid) {
          $node_last_rev = entity_revision_load('node', $node_rev_id);
          _dt_page_extended_migrate_metatags($node_last_rev);
        }
      }

    }
    // Clear memory.
    unset($ids);
    unset($nodes);
    unset($node);
  }
  // Clear memory.
  unset($results);
  $sandbox['progress'] += $limit;

  if ($sandbox['max'] > 0 && $sandbox['max'] > $sandbox['position']) {
    $sandbox['#finished'] = $sandbox['progress'] / $sandbox['max'];
  }
  else {
    $sandbox['#finished'] = 1;
  }
}

/**
 * Helper function to save metatags.
 *
 * @param object $node
 *   The node object to migrate.
 */
function _dt_page_extended_migrate_metatags($node) {
  if (isset($node->metatags) && is_array($node->metatags)) {
    foreach ($node->metatags as $language => $metatag) {
      if (isset($node->metatags[$language]['keywords']) && !empty($node->metatags[$language]['keywords']['value'])) {
        $value = $node->metatags[$language]['keywords']['value'];
        $value = drupal_substr(trim(str_replace("European Commission, European Union, EU", "", str_replace("European Commission, European Union, EU,", "", $value))), 0, 500);

        if (!empty($value)) {
          $node->field_core_keywords[$language][0]['value'] = $value;
        }
        unset($node->metatags[$language]['keywords']);
        node_save($node);
      }
    }
  }
}

/**
 * DTTSB-1200: Set default metatag settings to nodes.
 */
function dt_page_extended_update_7106(&$sandbox) {
  if (!isset($sandbox['max'])) {
    // Find all nodes with metatags.
    $metatag_default = 'a:1:{s:13:"revisit-after";a:2:{s:5:"value";s:2:"15";s:6:"period";s:3:"day";}}';

    $query = db_select('node', 'n')
      ->condition('n.status', 1)
      ->condition('n.type', 'basic_page')
      ->condition('m.entity_type', 'node')
      ->condition('m.data', $metatag_default, '<>');
    $query->join('metatag', 'm', 'm.entity_id = n.nid AND m.revision_id = n.vid');
    $query->fields('n', ['nid']);

    $result = $query->execute()->fetchAllKeyed(0, 0);

    $sandbox['max'] = count($result);
    $sandbox['nids'] = array_values($result);
    $sandbox['progress'] = 0;
  }

  // Manage this number of items per pass.
  $limit = 20;

  $nids = array_slice($sandbox['nids'], $sandbox['progress'], $limit);
  $nodes = entity_load('node', $nids);
  foreach ($nodes as $node) {
    foreach ($node->metatags as $language => $metatag) {
      $node->metatags[$language] = [
        'revisit-after' => [
          'value' => 15,
          'period' => 'day',
        ],
      ];
      node_save($node);
    }
  }

  // Clear memory.
  unset($nids);
  unset($nodes);

  // Update sandbox.
  $sandbox['progress'] += $limit;

  if ($sandbox['max'] > 0 && $sandbox['max'] > $sandbox['position']) {
    $sandbox['#finished'] = $sandbox['progress'] / $sandbox['max'];
  }
  else {
    $sandbox['#finished'] = 1;
  }
}
