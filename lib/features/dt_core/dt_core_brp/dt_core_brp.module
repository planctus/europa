<?php

/**
 * @file
 * Code for the Information Site brp feature.
 */

include_once 'dt_core_brp.features.inc';

/**
 * Implements hook_node_view_alter().
 *
 * When we are on the front page, and it is a basic page, then we add the view
 * to the body field.
 */
function dt_core_brp_node_view_alter(&$build) {
  if (
    drupal_is_front_page() &&
    $build['#bundle'] == 'basic_page' &&
    isset($build['body'])
  ) {
    $view = _dt_core_brp_get_short_initiatives_view()->preview();
    $build['body']['#suffix'] = isset($build['body']['#suffix']) ? $build['body']['#suffix'] . $view : $view;
  }
}

/**
 * Helper to get view.
 *
 * @return object
 *   Returns view object.
 */
function _dt_core_brp_get_short_initiatives_view() {
  // Load the view.
  $view = views_get_view('brp_initiatives_homepage');
  $view->set_display('block_latest_initiatives');

  // Set header.
  $header_options = [
    'content' => '<h2 id="latest-initiatives">' . $view->get_title() . '</h2>',
    'format' => 'full_html',
    'empty' => 0,
  ];
  $view->add_item('block_latest_initiatives', 'header', 'views', 'area', $header_options);

  // Set the style.
  $view->style_plugin->options['listing_wrapper_modifier'] = 'section__group';

  // Return a renderable array.
  return $view;
}

/**
 * Implements hook_nexteuropa_inpage_nav_add().
 *
 * This hook makes sure that the news block is added to the inpage nav.
 */
function dt_core_brp_nexteuropa_inpage_nav_add($element, $ds_field_settings) {
  if (isset($element['body']) && isset($element['body']['#suffix']) && strpos($element['body']['#suffix'], 'brp-initiatives-homepage') >= 1) {
    $label = t('Latest initiatives');
    return [
      'latestinitiatives' => [
        'weight' => $element['body']['#weight'],
        'heading' => [
          'id' => 'latest-initiatives',
          'label' => $label,
        ],
        'children' => '',
      ],
    ];
  }
  return [];
}

/**
 * Implements hook_theme().
 */
function dt_core_brp_theme($existing, $type, $theme, $path) {
  return [
    'site_user_menu' => [
      'file' => 'dt_core_brp.theme.inc',
      'variables' => [
        'modifier' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_block_info().
 */
function dt_core_brp_block_info() {
  // Block to display user name and the option to login/logout.
  $blocks['dt_brp_user_menu'] = array(
    'info' => t('BRP user menu'),
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function dt_core_brp_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'dt_brp_user_menu':
      if (user_is_logged_in()) {
        $block['content'] = _dt_core_brp_get_blocks_content($delta);
      }
      break;
  }

  return $block;
}

/**
 * A module-defined block content function.
 *
 * @param string $delta
 *   The delta.
 *
 * @return array
 *   Result to be rendered.
 */
function _dt_core_brp_get_blocks_content($delta) {
  $result = array();

  switch ($delta) {
    case 'dt_brp_user_menu':
      $result = array(
        '#markup' => theme('site_user_menu'),
      );
      break;
  }

  return $result;
}
