<?php

/**
 * @file
 * Code for the Core feature.
 */

// Our global views tag.
define("DT_CORE_VIEWS_TAG", "digital_transformation");

include_once 'dt_core.ds_fields.inc';
include_once 'dt_core.features.inc';
include_once 'dt_core.path.inc';

/**
 * No source field Exception.
 */
class DTCoreSourceFieldError extends Exception {
}

/**
 * No destination field Exception.
 */
class DTCoreDestinationFieldError extends Exception {
}

/**
 * Fields are of same tye Exception.
 */
class DTCoreFieldTypeAreNotSame extends Exception {
}

/**
 * Implements hook_theme().
 */
function dt_core_theme($existing, $type, $theme, $path) {
  return [
    'site_switcher_tabs' => [
      'file' => 'dt_core.theme.inc',
      'variables' => [
        'modifier' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_field_widget_form_alter().
 */
function dt_core_field_widget_form_alter(&$element, &$form_state, $context) {
  if ($context['field']['type'] == 'entityreference') {
    if ($context['field']['settings']['target_type'] == 'node' && !empty($context['field']['settings']['handler_settings']['target_bundles'])) {
      $types = array_intersect($context['field']['settings']['handler_settings']['target_bundles'], array_keys(node_type_get_types()));
      $types_count = count($types);
      $links = '';
      $i = 0;
      $separator = ',';
      foreach ($types as $machine_name) {
        $type = node_type_get_type($machine_name);
        $current_separator = $types_count > 1 && $i == $types_count - 2 ? ' ' . t('or') : $separator;
        $links .= l($type->name, 'node/add/' . str_replace('_', '-', $machine_name), ['attributes' => ['target' => '_blank']]) . $current_separator . ' ';
        $i++;
      }
      $links = rtrim($links, $separator . ' ');
      $description = '<p>' . t('In case the content you try to refer to does not exist yet you can create it by going to !links.', ['!links' => $links]) . '</p>';
      if (isset($element['target_id'])) {
        $element['target_id']['#description'] = $description . $element['target_id']['#description'];
      }
      else {
        $element['#description'] = $description . $element['#description'];
      }
    }
  }
}

/**
 * Implements hook_block_info().
 */
function dt_core_block_info() {
  $blocks['dt_header_site_tab_switcher'] = [
    'info' => t('Header site tab switcher'),
  ];

  $blocks['dt_footer_site_tab_switcher'] = [
    'info' => t('Footer site tab switcher'),
  ];

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function dt_core_block_view($delta = '') {
  $block = [];
  switch ($delta) {
    case 'dt_header_site_tab_switcher':
    case 'dt_footer_site_tab_switcher':
      $block['content'] = _dt_core_get_blocks_content($delta);
      break;
  }
  return $block;
}

/**
 * A module-defined block content function.
 *
 * @param string $delta
 *   The delta.
 *
 * @return array
 *   Result to be rendered.
 */
function _dt_core_get_blocks_content($delta) {
  $result = [];
  switch ($delta) {
    case 'dt_header_site_tab_switcher':
      $result = [
        '#markup' => theme('site_switcher_tabs', ['modifier' => 'site-switcher--header']),
      ];
      break;

    case 'dt_footer_site_tab_switcher':
      $result = [
        '#markup' => theme('site_switcher_tabs', ['modifier' => 'site-switcher--footer']),
      ];
      break;
  }
  return $result;
}

/**
 * Helper to add initial set of buttons on the default profile of the Full HTML.
 */
function _dt_apply_wysiwyg_buttons() {
  // Enable a set of CKEditor buttons for DT project on the "Full HTML" profile.
  $default = [
    'Anchor',
    'Bold',
    'Italic',
    'Underline',
    'Format',
    'JustifyBlock',
    'JustifyCenter',
    'JustifyLeft',
    'JustifyRight',
    'Indent',
    'Outdent',
    'Blockquote',
    'Font',
    'Table',
    'BulletedList',
    'NumberedList',
    'Link',
    'Unlink',
    'Source',
    'PasteFromWord',
    'Undo',
    'ShowBlocks',
  ];
  multisite_config_service('wysiwyg')->addButtonsToProfile('full_html', 'default', $default);

  $lite = [
    'lite_AcceptAll',
    'lite_RejectOne',
    'lite_RejectAll',
    'lite_ToggleShow',
    'lite_AcceptOne',
    'lite_ToggleTracking',
  ];
  multisite_config_service('wysiwyg')->addButtonsToProfile('full_html', 'lite', $lite);

  $abbr = [
    'Abbr',
  ];
  multisite_config_service('wysiwyg')->addButtonsToProfile('full_html', 'abbr', $abbr);
}

/**
 * Helper function for creating a taxonomy term in a vocabulary.
 *
 * @param string $vocabulary_machine_name
 *   Vocabulary machine name.
 * @param string $term_name
 *   Added term.
 *
 * @return bool
 *   Return TRUE if the taxonomy term was created.
 */
function _dt_core_create_taxonomy_term($vocabulary_machine_name, $term_name) {
  // Check the vocabulary if exist.
  if ($vocabulary = taxonomy_vocabulary_machine_name_load($vocabulary_machine_name)) {
    // Creating term.
    $term = [];
    $term['vocabulary_machine_name'] = $vocabulary_machine_name;
    $term['vid'] = $vocabulary->vid;
    $term['name'] = $term_name;
    // Save term as an entity.
    $entity = entity_create('taxonomy_term', $term);
    return entity_save('taxonomy_term', $entity);
  }
  return FALSE;
}

/**
 * Migrate existing field content from language "undefined" to entity language.
 *
 * @param string $field_name
 *   Field to enable entity translation on.
 */
function _dt_core_enable_entity_translation($field_name, &$sandbox) {
  $context = ['sandbox' => &$sandbox];
  module_load_include('inc', 'entity_translation', 'entity_translation.admin');
  entity_translation_translatable_switch(TRUE, $field_name);
  entity_translation_translatable_batch(TRUE, $field_name, TRUE, $context);
  $sandbox['#finished'] = $context['finished'];
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function dt_core_form_locale_languages_overview_form_alter(&$form, &$form_state) {
  // Increase the range of weights that can be assigned to languages in the
  // languages overview form. By default the languages can only be sorted using
  // the range -10 to +10 but since we have 24 languages this is not sufficient.
  foreach (element_children($form['weight']) as $key) {
    $form['weight'][$key]['#delta'] = 20;
  }
}

/**
 * Helper function to enable languages.
 *
 * @param array $languages
 *   Language codes of languages to be enabled.
 */
function _dt_core_enable_languages($languages = []) {
  module_load_include('inc', 'locale', 'locale.admin');
  $form_state = [];
  foreach ($languages as $key => $langcode) {
    // Enable language.
    multisite_config_service('locale')->addLanguage($langcode);
    // Set the appropriate weight for languages to follow the order defined in
    // the array.
    $form_state['values']['weight'][$langcode] = -20 + $key;

    // Portuguese exception:
    // In Drupal the "pt" prefix belongs to Portuguese / International but we
    // need Portuguese / Portugal to have this prefix (theme_image_style has
    // "pt-pt" as default prefix). We need to change this to "pt".
    if ($langcode == 'pt-pt') {
      db_update('languages')
        ->fields([
          'name' => 'Portuguese',
          'prefix' => 'pt',
        ])
        ->condition('language', $langcode)
        ->execute();
    }
    // English does not have a default prefix but we rely on it, so we add it.
    if ($langcode == 'en') {
      db_update('languages')
        ->fields([
          'prefix' => 'en',
        ])
        ->condition('language', $langcode)
        ->execute();
    }
  }
  // Save the order through the original form.
  drupal_form_submit('locale_languages_overview_form', $form_state);
  // Enable URL suffix based language negotiation.
  multisite_config_service('locale')->setLanguageNegotiation('nexteuropa_multilingual_url_suffix');
  // Fix lowercase languages.
  _dt_core_transform_language_to_lower_case(_dt_core_lower_case_languages());
}

/**
 * Implements hook_node_presave().
 *
 * If a whitespace has been entered after a title, we remove it.
 */
function dt_core_node_presave($node) {
  if (isset($node->title)) {
    $node->title = rtrim($node->title);
  }
}

/**
 * Implements hook_context_load_alter().
 */
function dt_core_context_load_alter(&$context) {
  if ($context->name == 'dt_core_non_homepage_pages') {
    if ($node = menu_get_object('node')) {
      global $language;
      $interface_language = $language->language;
      $content_languages = $node->translations->data;

      if (array_key_exists($interface_language, $content_languages)) {
        unset($context->reactions['block']['blocks']['language_selector_page-language_selector_page']);
      }
    }
  }
}

/**
 * Removes maxlength configuration from field.
 */
function _dt_core_disable_maxlength($element) {
  // Check if we are translating and maxlength for field is enabled.
  if (isset($element['#field_name']) && isset($element['#maxlength']) && isset($element['#language']) && isset($element['#entity']) && isset($element['#entity']->language) && $element['#language'] !== $element['#entity']->language) {
    // Remove maxlength.
    unset($element['#maxlength']);
  }

  return $element;
}

/**
 * Implements hook_element_info_alter().
 */
function dt_core_element_info_alter(&$cache) {
  $cache['textarea']['#process'][] = '_dt_core_disable_maxlength';
  $cache['textfield']['#process'][] = '_dt_core_disable_maxlength';
}

/**
 * Helper function to return a list of languages that should be enabled.
 *
 * Languages that will be enabled. The order they need to appear when listed is
 * defined here:
 * @link http://publications.europa.eu/code/en/en-370200.htm.
 *
 * @return array
 *   List of languages.
 */
function _dt_core_ec_official_languages() {
  return [
    'bg',
    'cs',
    'da',
    'de',
    'et',
    'el',
    'en',
    'es',
    'fr',
    'ga',
    'hr',
    'it',
    'lv',
    'lt',
    'hu',
    'mt',
    'nl',
    'pl',
    'pt-pt',
    'ro',
    'sk',
    'sl',
    'fi',
    'sv',
  ];
}

/**
 * Helper function to return a list of languages that need to be lower case.
 *
 * @return array
 *   List of languages that need to be lower case.
 */
function _dt_core_lower_case_languages() {
  return [
    'bg',
    'cs',
    'da',
    'et',
    'el',
    'es',
    'fr',
    'hr',
    'it',
    'lv',
    'lt',
    'hu',
    'pl',
    'pt-pt',
    'ro',
    'sk',
    'sl',
    'fi',
    'sv',
  ];
}

/**
 * Helper function to transform language names to lower case.
 *
 * @param array $language_codes
 *   List of language codes.
 *
 * @return bool
 *   TRUE/FALSE.
 */
function _dt_core_transform_language_to_lower_case(array $language_codes) {
  // Ininitialize our return value.
  $return = TRUE;

  // Loop the results and update the langcode.
  foreach ($language_codes as $langcode) {
    // Our update query, this either returns TRUE or FALSE.
    $query = db_update('languages')
      ->expression('native', 'LCASE(native)')
      ->condition('language', $langcode)
      ->execute();

    // If there were no issues, we show a message that everything went well. In
    // other cases notifiy about the error, and make the function return FALSE.
    if ($query) {
      // Create our log message.
      $watchdog_content = [
        'message' => 'Language %langcode updated to lower case.',
        'type' => WATCHDOG_INFO,
        'replacement' => ['%langcode' => $langcode],
      ];
    }
    else {
      // Create our log message.
      $watchdog_content = [
        'message' => 'Could not update language %langcode to lower case. This might come due to the fact the language is not yet available or it already is updated.',
        'type' => WATCHDOG_WARNING,
        'replacement' => ['%langcode' => $langcode],
      ];
      // We had one error, but we can finish other querys. Set our return
      // parameter to false, so that we can continue the query and return false
      // afterwards.
      $return = FALSE;
    }

    // Watchdog our log message.
    watchdog('dt_core', $watchdog_content['message'], $watchdog_content['replacement'], $watchdog_content['type']);
  }

  // Retrun our outcome.
  return $return;
}

/**
 * Implements hook_views_query_alter().
 *
 * To avoid reconfiguring our views we simply remove our sort field from the
 * query. This query alteration, takes in consideration that we have a maximum
 * of 3 possible languages. It joins the translated data.
 */
function dt_core_views_query_alter(&$view, &$query) {
  // If it is one of our listings.
  if (isset($view->sort['title_field_value'])) {
    // Get our languages.
    $fallback_languages = _dt_shared_functions_content_language_order();

    // Language subquerys.
    $or = db_or();

    // Also we can add our sorting function here. So lets start with the
    // ininitialization of that variable.
    $order_by_case = 'CASE ';
    // Add these languages to the query.
    foreach ($fallback_languages as $key => $fallback_language) {
      $or->condition('title_field.language', $fallback_language);
      $order_by_case .= 'WHEN title_field.language = \'' . $fallback_language . '\' THEN ' . $key . ' ';
    }
    $order_by_case .= 'END';

    // Build our sub query.
    $sub_query = db_select('field_data_title_field', 'title_field');
    $sub_query->addField('title_field', 'title_field_value', 'translated_title');
    $sub_query->addField('title_field', 'entity_id', 'translated_id');
    $sub_query->addField('title_field', 'language');
    $sub_query->addExpression($order_by_case);
    $sub_query->condition($or);

    // Create new join object.
    $join = new views_join();
    $join->definition = [
      'table formula' => $sub_query,
      'left_field' => 'nid',
      'field' => 'translated_id',
      'left_table' => 'node',
    ];
    $join->left_table = 'node';
    $join->field = 'translated_id';
    $join->left_field = 'nid';
    $join->type = 'LEFT';
    // This will make sure that we only use the first and best translation
    // match. Because the order by case is the same, a simple string replace is
    // enough to make it work.
    $join->extra = 'title_field.expression = (SELECT Min(' . str_replace('title_field.language', 'language', $order_by_case) . ') FROM field_data_title_field WHERE entity_id = title_field.translated_id)';

    // Do the actual join.
    $query->table_queue['title_field'] = [
      'alias' => 'title_field',
      'table' => $sub_query,
      'relationship' => 'node',
      'join' => $join,
    ];

    // Replace the title sort fields with our custom.
    foreach ($query->orderby as $key => &$value) {
      if ($value['field'] == 'field_data_title_field_title_field_value') {
        $value['field'] = 'title_field.translated_title';
        break;
      }
    }

    // Change our where condition using the title field to use the translated
    // title field. So, when the condition is using the title field, we replace
    // it to use the translated title value instead.
    foreach ($query->where as &$where) {
      foreach ($where['conditions'] as &$condition) {
        $condition['field'] = str_replace('field_data_title_field.title_field_value', 'translated_title', $condition['field']);
      }
    }

    // This is originally coming from our sort, we could even delete this part
    // once we move to a better solution. As we replace the sorting logic, we
    // have to unset these, as they are causing the duplicate results.
    if (isset($query->table_queue['field_data_title_field'])) {
      unset($query->table_queue['field_data_title_field']);
    }
    // Remove the field.
    if (isset($query->fields['field_data_title_field_title_field_value'])) {
      unset($query->fields['field_data_title_field_title_field_value']);
    }
  }
}

/**
 * Helper function to get plurial names.
 *
 * This should move to the dt_node_settings module.
 *
 * @param string $bundle
 *   The name of the bundle to get the plurial name.
 */
function _dt_core_get_plurial_content_types($bundle) {
  // Forming plurals for existing content types.
  $plurals = [
    'announcement' => t("announcements"),
    'page' => t("pages"),
    'contact' => t("contacts"),
    'department' => t("departments"),
    'editorial_team' => t("editorial teams"),
    'file' => t("files"),
    'basic_page' => t("pages"),
    'person' => t("people"),
    'policy' => t("policies"),
    'policy_area' => t("policy areas"),
    'policy_implementation' => t("policy implementations"),
    'policy_input' => t("policy inputs"),
    'policy_keyfile' => t("policy key files"),
    'priority' => t("priorities"),
    'publication' => t("publications"),
    'class' => t("classes"),
    'topic' => t("topics"),
    'toplink' => t("top links"),
  ];

  $singular = node_type_get_name($bundle);
  // If user preference for plural form - use it, otherwise use the label.
  if (isset($plurals[$bundle])) {
    $plural = $plurals[$bundle];
  }
  else {
    $plural = drupal_strtolower(t("@bundles", ['@bundle' => $singular]));
  }

  $forms = [
    'singular' => drupal_strtolower($singular),
    'plural' => $plural,
  ];

  return $forms;
}

/**
 * Implements hook_preprocess_views_view().
 *
 * This was in the informational template before. But moved it here because we
 * need it on multiple templates that use dt_core.
 */
function dt_core_preprocess_views_view(&$variables) {
  $view = $variables['view'];
  if (isset($view->filter['type'])) {
    $content_type_filters = $view->filter['type']->value;
    if (is_array($content_type_filters)) {
      // The first element of the array is the right type of filter.
      $content_type = reset($content_type_filters);
    }
    else {
      // Case for Search API filters.
      $content_type = (string) $content_type_filters;
    }

    $variables['title'] = '';

    if ((in_array('listing', $variables['classes_array'])) || $view->style_plugin->plugin_name == 'nexteuropa_bem_listing' && isset($view->exposed_data)) {
      // Calculate the number of items displayed in a view listing.
      $total_rows = !$view->total_rows ? count($view->result) : $view->total_rows;

      if (isset($view->display[$view->current_display]->display_options['dt_shared_functions_views_config_title'])) {
        $title = $view->display[$view->current_display]->display_options['dt_shared_functions_views_config_title'];
        // @codingStandardsIgnoreStart
        $display_title = t($title);
        // @codingStandardsIgnoreEnd
      }
      else {
        // Make sure we have a fallback.
        $content_type_forms = _dt_core_get_plurial_content_types($content_type);
        // Set the display title and uppercase it.
        $display_title = ucfirst(format_plural($total_rows, $content_type_forms['singular'], $content_type_forms['plural']));
      }

      $title_markup = [
        '#markup' => $display_title . ' (' . $total_rows . ')',
        '#prefix' => '<div class="filters__result-count"><span class="filters__items-number">',
        '#suffix' => '</span></div>',
      ];

      // Set the title to what we just configured.
      $variables['title'] = drupal_render($title_markup);
    }
  }
}

/**
 * Implements hook_metatag_info().
 */
function dt_core_metatag_info() {
  $info['tags']['last-modified'] = [
    'label' => t('Last modified'),
    'class' => 'DrupalTextMetaTag',
    'name' => 'last-modified',
    'description' => '',
  ];

  return $info;
}

/**
 * Implements hook_metatag_metatags_view_alter().
 *
 * Because of SEO recommendations, description meta tag
 * should't be more than 155 characters.
 * + og:description meta tag should have the same text as
 * description meta tag.
 * If description metatag does not exist then it will fall back
 * to og:description with character's count already limited.
 */
function dt_core_metatag_metatags_view_alter(&$output, $instance, $options) {
  // Metatag: description.
  if (isset($output['description']['#attached']['drupal_add_html_head'][0][0]['#value'])) {
    $output['description']['#attached']['drupal_add_html_head'][0][0]['#value']
      = truncate_utf8($output['description']['#attached']['drupal_add_html_head'][0][0]['#value'], 152, TRUE, TRUE);
  }
  // Metatag: og:description.
  if (isset($output['og:description']['#attached']['drupal_add_html_head'][0][0]['#value'])) {
    $output['og:description']['#attached']['drupal_add_html_head'][0][0]['#value']
      = (isset($output['description']['#attached']['drupal_add_html_head'][0][0]['#value'])) ?
      $output['description']['#attached']['drupal_add_html_head'][0][0]['#value'] :
      truncate_utf8($output['og:description']['#attached']['drupal_add_html_head'][0][0]['#value'], 152, TRUE, TRUE);
  }
  // We use an alter hook instead of the features configuration to avoid
  // overrides in the features.
  if (isset($output['date']['#attached']['drupal_add_html_head'][0][0]['#value'])) {
    if (isset($options['entity_type']) && $options['entity_type'] == 'node') {
      // Our token.
      $token = '[dt_tokens:dt_publish_date]';
      // Replaced.
      $token_replaced = token_replace($token, ['node' => $options['entity']]);
      // Make sure that it has been replaced.
      $replaced = !strpos($token_replaced, $token);
      // Only when we have successfully replaced te token, we add it to our meta
      // tag. In other cases we dont do anything with it.
      if ($replaced) {
        $output['date']['#attached']['drupal_add_html_head'][0][0]['#value'] = $token_replaced;
      }
    }
  }

  if (isset($options['entity_type']) && $options['entity_type'] == "node") {
    // Only non-helper content type nodes should have last-modified meta.
    if (variable_get('dt_node_settings_helper_node_type_' . $options['entity']->type, 0) === 1) {
      unset($output['last-modified']);
    }
    else {
      // Get the node object.
      $node_object = entity_metadata_wrapper('node', $options['entity']);

      // If field_core_date_updated exists update metatag,
      // else leave the default value.
      if ($node_object->__isset('field_core_date_updated')) {
        $date_updated = $node_object->field_core_date_updated->value();
        $output['last-modified']['#attached']['drupal_add_html_head'][0][0]['#value'] = format_date($date_updated, 'custom', 'd/m/Y');
      }
    }
  }
}

/**
 * Helper function to get the system path of aliased links.
 *
 * @param string $link
 *   The link to be handled.
 *
 * @return string
 *   The link, revisited.
 */
function _dt_core_menu_link($link, $lang = FALSE) {
  $lang = $lang ? $lang : LANGUAGE_NONE;
  if ($link != '<front>' && $link != '<nolink>') {
    $source = drupal_lookup_path('source', $link, $lang);
    if (!$source) {
      $view = drupal_valid_path($link);
      if ($view) {
        return $link;
      }
      else {
        $link = url($link, ['absolute' => TRUE]);
      }
    }
    else {
      $link = $source;
    }
  }

  return $link;
}

/**
 * Create menu links.
 *
 * @param string $menu
 *   Menu name.
 * @param string $link
 *   The raw link.
 * @param string $plid
 *   The parent item mlid.
 * @param string $title
 *   The link title.
 * @param string $weight
 *   Weight of the menu item.
 * @param string $lang
 *   Lang code sanitized.
 * @param string $tsid
 *   Translations set id.
 * @param string $nolink
 *   Items without links.
 * @param string $logs
 *   The logs directory path.
 *
 * @return int
 *   The mlid of the created menu item.
 */
function _dt_core_menu_item($menu, $link, $plid, $title, $weight, $lang = 'en', $tsid = NULL, $nolink = FALSE, $logs = FALSE) {
  $link = _dt_core_menu_link($link, $lang);
  $plid = ($plid > 0) ? $plid : 0;

  $item = [
    'menu_name' => $menu,
    'module' => 'menu',
    'customized' => 1,
    'language' => $lang,
    'plid' => $plid,
    'enabled' => 1,
    'expanded' => 1,
    'link_path' => $link,
    'locked' => FALSE,
    'link_title' => $title,
    'hidden' => 0,
    'weight' => $weight,
    'i18n_menu' => 1,
    'options' => ['title' => $link],
  ];

  menu_link_save($item);

  return $item['mlid'];

}

/**
 * Helper function to get the mlid basing on the link name.
 *
 * @param string $name
 *   Name of the menu item.
 * @param string $menu
 *   Name of the menu.
 *
 * @return bool/int
 *   False or menu id.
 */
function _dt_core_menu_item_name_get($name, $menu) {
  $mlid = db_select('menu_links', 'ml')
    ->fields('ml', ['mlid'])
    ->condition('link_title', $name)
    ->condition('menu_name', $menu)
    ->execute()
    ->fetchField();

  if (is_numeric($mlid)) {
    return $mlid;
  }
  else {
    return FALSE;
  }
}

/**
 * Implements hook_node_view_alter().
 */
function dt_core_node_view_alter(&$build) {
  if (isset($build['#bundle']) && $build['#bundle'] == 'basic_page' && isset($build['body'])) {
    $build['#pre_render'][] = '_dt_core_replace_headings';
  }
}

/**
 * Pre render to replace the heading with ids.
 *
 * @param array $element
 *   The element we are handeling.
 *
 * @return array
 *   The updated element.
 */
function _dt_core_replace_headings($element) {
  foreach (element_children($element['body']) as $key) {
    if (isset($element['body'][$key]['#markup'])) {
      // Replace the #markup.
      $element['body'][$key]['#markup'] = preg_replace_callback('/<h2>(.*)<\/h2>/', '_dt_core_replace_h2', $element['body'][$key]['#markup']);
    }
  }
  return $element;
}

/**
 * Helper function to add missing header ids.
 *
 * @param string $matches
 *   The matches.
 *
 * @return string
 *   The fixed title.
 */
function _dt_core_replace_h2($matches) {
  return '<h2 id="' . drupal_html_id($matches[1]) . '">' . $matches[1] . '</h2>';
}

/**
 * Adds a role to a given user.
 *
 * @param object $account
 *   Drupal user object.
 * @param string $role_apply
 *   Role name to add to the user roles.
 */
function _dt_core_add_user_role($account, $role_apply) {
  if (isset($account) && isset($role_apply)) {
    if (!array_search($role_apply, $account->roles)) {
      if ($role = user_role_load_by_name($role_apply)) {
        user_multiple_role_edit([$account->uid], 'add_role', $role->rid);
      }
    }
  }
}

/**
 * Checks whether a given user account is part of a given organization.
 *
 * @param object $account
 *   The user object.
 * @param string $org
 *   The organization to match against.
 *
 * @return bool
 *   Whether $account is a member of $org.
 */
function _dt_core_check_user_organization($account, $org = 'COMM.A.5') {
  if (isset($account)) {
    $user_emw = entity_metadata_wrapper('user', $account->uid);
    if ($user_emw->__isset('field_creator')) {
      // If the user has ECAS data about their working place/organization.
      if ($creator = $user_emw->field_creator->value()) {
        if (strstr($creator, $org)) {
          return TRUE;
        }
      }
    }
  }
  return FALSE;
}

/**
 * Implements hook_user_login().
 */
function dt_core_user_login(&$edit, $account) {
  if (_dt_core_check_user_organization($account)) {
    _dt_core_add_user_role($account, 'draft viewer');
  }
}
