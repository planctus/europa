<?php

/**
 * @file
 * Digital Transformation Core install file.
 */

/**
 * Implements hook_enable().
 */
function dt_core_enable() {
  $t = get_t();
  drupal_set_message($t('Digital transformation core is now active on your site.'));
}

/**
 * Implements hook_disable().
 */
function dt_core_disable() {
  $t = get_t();
  drupal_set_message($t('Digital transformation core is now disabled on your site.'));
}

/**
 * Implements hook_install().
 */
function dt_core_install() {
  // Disable some contexts coming from the platform.
  multisite_drupal_toolbox_remove_context('site_wide');
  multisite_drupal_toolbox_remove_context('homepage');

  // Enabling admin theme for node pages.
  variable_set('node_admin_theme', 1);

  // Removing admin pages to use default theme(WATCH OUT FOR THAT!!!!!!).
  variable_set('cce_basic_config_admin_pages', []);

  // Applying a default set of buttons to the Full HTML profile.
  _dt_apply_wysiwyg_buttons();

  // Switch on entity translation for the body field.
  $sandbox = NULL;
  _dt_core_enable_entity_translation('body', $sandbox);

  // Remove the platform Breadcrumb menu.
  _dt_shared_functions_delete('menu-breadcrumb-menu', 'menu', 'menu');

  // Set our default social network url.
  variable_set('dt_core_other_social_networks_link', 'http://europa.eu/contact/social-networks/');

  // Remove when https://www.drupal.org/node/2534724 is fixed.
  variable_set('jquery_update_jquery_admin_version', '1.8');

  // Enable l10n_update.
  module_enable(['l10n_update']);
  variable_set('l10n_update_import_enabled', FALSE);
}

/**
 * Implements hook_requirements().
 */
function dt_core_requirements($phase) {
  $requirements = [];
  $t = get_t();

  switch ($phase) {
    case 'runtime':
      $hitme = libraries_load('hitme');
      if (!$hitme['installed']) {
        $requirements['hitme_js'] = [
          'title' => $t('HitMe JavaScript file'),
          'severity' => REQUIREMENT_ERROR,
          'description' => $t('You need to download the !hitme and extract the entire contents of the archive into the %path directory on your server.', [
            '!hitme' => l($t('HitMe JavaScript file'), 'https://github.com/roelvangils/jquery-hitMe/'),
            '%path' => 'sites/all/libraries',
          ]),
          'value' => $t('Not Installed'),
        ];
      }
      else {
        $requirements['hitme_js'] = [
          'title' => $t('HitMe JavaScript file'),
          'severity' => REQUIREMENT_OK,
          'value' => $t('Installed'),
        ];
      }
      break;
  }

  return $requirements;
}

/**
 * Implements hook_uninstall().
 */
function dt_core_uninstall() {
  $contexts = variable_get('context_status', []);
  unset($contexts['site_wide'], $contexts['homepage']);
  variable_set('context_status', $contexts);
}

/**
 * Enabling About the EC and Strategy classes and also Homepage Core feature.
 */
function dt_core_update_7101() {
  $slices = [
    'dt_aboutec_core',
  ];
  module_enable($slices);
}

/**
 * Enabling Announcements feature.
 */
function dt_core_update_7102() {
  module_enable(['dt_announcement']);
}

/**
 * Enable Europa theme.
 */
function dt_core_update_7103() {
  theme_enable(['europa']);
  variable_set('theme_default', 'europa');
}

/**
 * Removing admin pages to use default theme(WATCH OUT FOR THAT IN THE FUTURE).
 */
function dt_core_update_7104() {
  variable_set('cce_basic_config_admin_pages', []);
}

/**
 * Enabling adressfield and inline_entity_form.
 */
function dt_core_update_7105() {
  module_enable(['addressfield', 'inline_entity_form']);
}

/**
 * Enabling DT contact feature containing contact content type.
 */
function dt_core_update_7106() {
  module_enable(['dt_contact']);
}

/**
 * Enabling Nexteuropa feedback form.
 */
function dt_core_update_7107() {
  module_enable(['nexteuropa_feedback']);
}

/**
 * Enabling admin theme for node pages.
 */
function dt_core_update_7108() {
  variable_set('node_admin_theme', 1);
}

/**
 * Enabling Announcements feature.
 */
function dt_core_update_7109() {
  module_enable(['nexteuropa_page']);
}

/**
 * Delete subjects vocabulary.
 */
function dt_core_update_7110() {
  if ($voc = taxonomy_vocabulary_machine_name_load('subjects')) {
    taxonomy_vocabulary_delete($voc->vid);
  }
}

/**
 * Disable and uninstall the dashboard module.
 */
function dt_core_update_7111() {
  if (module_exists('dashboard')) {
    module_disable(['dashboard']);
    drupal_uninstall_modules(['dashboard']);
  }
}

/**
 * Enabling Metatag modules.
 */
function dt_core_update_7112() {
  $meta_modules = [
    'metatag',
    'metatag_views',
    'metatag_opengraph',
  ];
  module_enable($meta_modules);
}

/**
 * Enabling DT date formats module.
 */
function dt_core_update_7113() {
  $modules = [
    'dt_date_format',
  ];
  module_enable($modules);
}

/**
 * Enabling 'topic' and 'toplink' content types.
 */
function dt_core_update_7114() {
  // The features to enable.
  $features = [
    'dt_topic',
    'dt_toplink',
  ];
  module_enable($features);

  // Reverting the features.
  foreach ($features as $feature) {
    features_revert_module($feature);
  }
}

/**
 * Revering menu_links, menu_custom and context in dt_core.
 */
function dt_core_update_7115() {
  features_revert([
    'dt_core' => ['menu_links', 'menu_custom', 'context'],
  ]);
}

/**
 * Enabling Legacy link module.
 */
function dt_core_update_7116() {
  $modules = [
    'nexteuropa_legacy_link',
  ];
  module_enable($modules);

  // The features to enable.
  $features = [
    'dt_department',
    'dt_person',
    'dt_priority',
  ];
  module_enable($features);

  // Reverting the features.
  foreach ($features as $feature) {
    features_revert_module($feature);
  }
}

/**
 * Enabling multisite_maxlength module.
 */
function dt_core_update_7117() {
  $modules = [
    'multisite_maxlength',
  ];
  module_enable($modules);
  features_revert_module('nexteuropa_page');
}

/**
 * DT Editor configurations.
 */
function dt_core_update_7118() {
  features_revert_module('dt_core');
}

/**
 * Enabling dt_exposed_filter_data.
 */
function dt_core_update_7119() {
  $modules = [
    'dt_exposed_filter_data',
  ];
  module_enable($modules);

  // The features to revert.
  $features = [
    'dt_announcement',
    'dt_department',
  ];

  // Reverting the features.
  foreach ($features as $feature) {
    features_revert_module($feature);
  }
}

/**
 * Reverts dt_announcement, dt_contact and dt_person.
 */
function dt_core_update_7120() {
  // The features to revert.
  $features = [
    'dt_announcement',
    'dt_contact',
    'dt_person',
  ];

  // Reverting the features.
  foreach ($features as $feature) {
    features_revert_module($feature);
  }
}

/**
 * Revert updated feautres.
 */
function dt_core_update_7121() {
  // The features to enable.
  $features = [
    'dt_department',
    'dt_person',
    'dt_priority',
  ];
  module_enable($features);

  // Reverting the features.
  foreach ($features as $feature) {
    features_revert_module($feature);
  }
}

/**
 * Addinb buttons to Full HTML. Removing dt_editor format and profile.
 */
function dt_core_update_7122() {
  $profile = 'dt_editor';
  // Applying a default set of buttons to the Full HTML profile.
  _dt_apply_wysiwyg_buttons();

  // Remove dt_editor from the wysiwyg profile.
  if (wysiwyg_profile_load($profile)) {
    wysiwyg_profile_delete($profile);
  }

  // Disable the filter format as well.
  db_update('filter_format')
    ->fields(['status' => 0])
    ->condition('format', $profile)
    ->execute();

  // Revert dt_core.
  features_revert_module('dt_core');
}

/**
 * Enabling dt_social_network_links.
 */
function dt_core_update_7123() {
  $modules = [
    'dt_social_network_links',
  ];
  module_enable($modules);

  // The features to revert.
  $features = [
    'dt_social_network_links',
    'dt_department',
  ];

  // Reverting the features.
  foreach ($features as $feature) {
    features_revert_module($feature);
  }
}

/**
 * Enable dt_roles_permissions module.
 */
function dt_core_update_7124() {
  module_enable(['dt_roles_permissions']);
}

/**
 * Copying field_core_link to field_core_links.
 */
function dt_core_update_7125() {
  // The features to revert.
  $features = [
    'dt_department' => 'department',
    'dt_announcement' => 'announcement',
    'nexteuropa_page' => 'page',
  ];

  // Reverting the features.
  features_revert_module('dt_core');
  foreach ($features as $feature => $content_type) {
    features_revert_module($feature);
    drupal_set_message(t('Reverted %feature.', ['%feature' => $feature]));
    // Copy the field content.
    _dt_shared_field_value_copy('node', $content_type, 'field_core_link', 'field_core_links');
    drupal_set_message(t('Copied %content_type.', ['%content_type' => $content_type]));

    // Remove field instance.
    if ($instance = field_info_instance('node', 'field_core_link', $content_type)) {
      field_delete_instance($instance);
    }
  }
}

/**
 * Enable dt_page module.
 */
function dt_core_update_7126() {
  module_enable(['dt_page']);
}

/**
 * Prompt to update aliases.
 */
function dt_core_update_7127() {
  $delete = url('admin/config/search/path/delete_bulk');
  $update = url('admin/config/search/path/update_bulk');
  drupal_set_message(t('Please <a href="!delete">bulk delete</a> and <a href="!update">update all aliases</a>!', [
    '!delete' => $delete,
    '!update' => $update,
  ]));
}

/**
 * Adding reset button filters on departments and topics views lists.
 */
function dt_core_update_7128() {
  // The features to revert.
  $features = [
    'dt_department',
    'dt_topic',
  ];

  // Reverting the features.
  foreach ($features as $feature) {
    features_revert_module($feature);
    drupal_set_message(t('Reverted %feature.', ['%feature' => $feature]));
  }
}

/**
 * Enabling ckeditor_link on full_html.
 */
function dt_core_update_7129() {
  // Insert or update the text format settings for full_html text format.
  $existing = db_select('filter', 'status')
    ->fields('status')
    ->condition('format', 'full_html', '=')
    ->condition('module', 'ckeditor_link', '=')
    ->condition('name', 'ckeditor_link_filter', '=')
    ->execute()
    ->fetchAssoc();
  if (
    $existing['status'] != 1 &&
    filter_format_exists('full_html') &&
    module_exists('ckeditor_link')
  ) {
    // Set status to 1.
    $updated = db_update('filter')
      ->fields([
        'status' => 1,
      ])
      ->condition('format', 'full_html', '=')
      ->condition('module', 'ckeditor_link', '=')
      ->condition('name', 'ckeditor_link_filter', '=')
      ->execute();
    if ($updated) {
      drupal_set_message(t("Plugin ckeditor_link was successfully enabled for full_html."));
    }
    else {
      drupal_set_message(t("Error occurred while trying to enable ckeditor_link plugin for full_html.", "error"));
    }
  }
}

/**
 * Enable dt_site_menu module.
 */
function dt_core_update_7130() {
  module_enable(['dt_site_menu']);
}

/**
 * Adding site switcher tab components in header and footer.
 */
function dt_core_update_7131() {
  features_revert_module('dt_core');
}

/**
 * Due to a mistake schema is ahead by one, this is a placeholder only.
 */
function dt_core_update_7132() {

}

/**
 * Enabling dt_information_core.
 */
function dt_core_update_7133() {
  // Enabling dt_information_core only on information site.
  // Because the hook_updates will not running on a new install.
  module_enable(['dt_information_core']);
  $features = [
    'dt_core',
    'dt_information_core',
  ];
  // Reverting the features.
  foreach ($features as $feature) {
    features_revert_module($feature);
  }
}

/**
 * Enable nexteuropa_formatters module.
 */
function dt_core_update_7134() {
  module_enable(['nexteuropa_formatters']);
}

/**
 * Enabling nexteuropa_views module.
 */
function dt_core_update_7135() {
  module_enable(['nexteuropa_views']);
}

/**
 * Enabling dt_core_info, dt_core_pol, disabling legacy info and pol features.
 */
function dt_core_update_7136() {
  // Checking dt_information_core, if it is enabled on the site.
  if (module_exists('dt_information_core')) {
    module_disable(['dt_information_core']);
    module_enable(['dt_core_info']);
  }

  // Checking dt_political_core, if it is enabled on the site.
  if (module_exists('dt_political_core')) {
    module_disable(['dt_political_core']);
    module_enable(['dt_core_pol']);
  }
}

/**
 * Switch on entity translation for the body field.
 */
function dt_core_update_7137($sandbox) {
  _dt_core_enable_entity_translation('body', $sandbox);
}

/**
 * Enabling dt_language_selector_site_popup.
 */
function dt_core_update_7138() {
  module_enable(['dt_language_selector_site_popup']);
}

/**
 * Check all node titles and trim the whitespace.
 */
function dt_core_update_7139() {
  $query = db_update('node')->expression('title', 'RTRIM(title)')->execute();
  drupal_set_message(t("<strong>%query</strong> node title(s) have been fixed.", ['%query' => $query]));

  $query = db_update('$field_data_title_field')
    ->expression('title_field_value', 'RTRIM(title_field_value)')
    ->execute();
  drupal_set_message(t("<strong>%query</strong> title_field\'s title(s) have been fixed.", ['%query' => $query]));

  $query = db_update('$field_revision_title_field')
    ->expression('title_field_value', 'RTRIM(title_field_value)')
    ->execute();
  drupal_set_message(t("<strong>%query</strong> revision_title_field title(s) have been fixed.", ['%query' => $query]));
}

/**
 * Reset weight_frontpage.
 */
function dt_core_update_7140() {
  variable_set('weight_frontpage', 0);
}

/**
 * Update the default social media link url (other social networks).
 */
function dt_core_update_7141() {
  variable_set('dt_core_other_social_networks_link', 'http://europa.eu/contact/social-networks/');
}

/**
 * Resetting Views settings related to Nexteuropa BEM listing.
 */
function dt_core_update_7142() {
  $features = [
    'dt_announcement',
    'dt_department',
    'dt_policy',
    'dt_policy_area',
    'dt_topic',
  ];
  // Reverting the features.
  foreach ($features as $feature) {
    // If module enabled, that revert.
    if (module_exists($feature)) {
      features_revert_module($feature);
    }
  }
}

/**
 * Update specific languages to be lower case.
 */
function dt_core_update_7143() {
  // Call our helper function to update the list.
  if (_dt_core_transform_language_to_lower_case(_dt_core_lower_case_languages())) {
    // Set our message.
    $message = 'Language labels have been updated into lower case without errors.';
  }
  else {
    // Set our message.
    $message = 'There were some errors updating the languages, please check the logs for detailed information';
  }

  // Display the final message.
  drupal_set_message($message);
}

/**
 * NEXTEUROPA-4747: Enabling dt_node_settings to introduce helper content types.
 */
function dt_core_update_7144() {
  module_enable(['dt_node_settings']);

  $helper_types = [
    'article',
    'banner_quote',
    'banner_video',
    'class_link_group',
    'contact',
    'featured_item',
    'page',
    'person',
    'policy_implementation',
    'policy_input',
    'policy_keyfile',
    'toplink',
    'editorial_team',
    'file',
  ];

  foreach ($helper_types as $type) {
    variable_set('dt_node_settings_helper_node_type_' . $type, 1);
  }

  features_revert_module('dt_roles_permissions');
}

/**
 * Set body field content to english.
 */
function dt_core_update_7145() {
  // Removed this as it is no longer required due to the changes in update 7146.
}

/**
 * Set body field content to english.
 */
function dt_core_update_7146() {
  // Obsolete.
}

/**
 * Enabling dt_shared_functions module.
 */
function dt_core_update_7147() {
  module_enable(['dt_shared_functions']);
}

/**
 * NEXTEUROPA-4834: Update features for the modified timeline.
 */
function dt_core_update_7148() {
  $features = [
    'dt_page',
    'dt_policy',
    'dt_pri_policy_area_default',
    'dt_priority_default',
  ];
  // Reverting the features.
  foreach ($features as $feature) {
    // If module enabled, that revert.
    if (module_exists($feature)) {
      features_revert_module($feature);
    }
  }
}

/**
 * NEXTEUROPA-6905: Facebook is not showing up as Social Network in non-English.
 */
function dt_core_update_7149() {
  // Obsolete.
}

/**
 * NEXTEUROPA-7131: Enabling dt_help_text module.
 */
function dt_core_update_7150() {
  module_enable(['dt_help_text']);
}

/**
 * NEXTEUROPA-6315: Make fields translatable.
 */
function dt_core_update_7151() {
  // DT features.
  $features = [
    'dt_class',
    'dt_banner',
    'dt_contact',
    'dt_core',
    'dt_person',
    'dt_policy',
    'dt_publication',
    'dt_social_network_links',
    'nexteuropa_file',
  ];

  // Reverting the features.
  foreach ($features as $feature) {
    // If module enabled, that revert.
    if (module_exists($feature)) {
      features_revert_module($feature);
    }
  }

  // Global fields.
  $fields = field_info_fields();
  foreach ($fields as $field) {
    switch ($field['field_name']) {
      case 'field_file_image_alt_text':
      case 'field_file_image_title_text':
      case 'field_caption':
      case 'field_video_description':
        $field['translatable'] = 1;
        field_update_field($field);
        break;
    }
  }

  // DT project-specific fields.
  $dt_fields = [
    'field_banner_caption',
    'field_banner_video_file',
    'field_class_related_links',
    'field_contact_phone_number',
    'field_core_top_task_link',
    'field_person_first_name',
    'field_person_last_name',
    'field_person_tagline',
    'field_policy_caption',
    'field_policy_featured_file',
  ];
  $available_fields = array_keys($fields);
  foreach ($dt_fields as $field_name) {
    // Check if the field exist in the current instance.
    if (!in_array($field_name, $available_fields)) {
      continue;
    }
  }

  // The following is somehow not done by dt_featured_item_update_7101().
  // List of fields to delete.
  $fields_to_delete = [
    'field_feat_item_ref_or_url',
  ];

  // Handle the fields to delete.
  foreach ($fields_to_delete as $field_name) {
    // Delete the field instance.
    if ($field_instance = field_info_instance('node', $field_name, 'featured_item')) {
      field_delete_instance($field_instance);
    }
    // Then the field base.
    if ($field_base = field_info_field($field_name)) {
      field_delete_field($field_base);
    }
  }
}

/**
 * Disable default contexts.
 */
function dt_core_update_7152() {
  multisite_drupal_toolbox_remove_context('site_wide');
  multisite_drupal_toolbox_remove_context('homepage');
}

/**
 * NEXTEUROPA-7346: reverting dt core to get the language token..
 */
function dt_core_update_7153() {
  features_revert_module('dt_core');
}

/**
 * NEXTEUROPA-6007: Create a block for social sharing.
 */
function dt_core_update_7154() {
  module_enable(['dt_social_media_sharing']);
}

/**
 * NEXTEUROPA-7531: Revoke some permissions for editor.
 */
function dt_core_update_7155() {
  if (_dt_roles_permissions_import_import('editor', TRUE)) {
    drupal_set_message(t('Roles have been updated.'));
  }
}

/**
 * NEXTEUROPA-4905: Enabling conditional_fields.
 */
function dt_core_update_7156() {
  module_enable(['conditional_fields']);
}

/**
 * NEXTEUROPA-7486: Grant 'configure priorities listing page' for site_manager.
 */
function dt_core_update_7157() {
  _dt_roles_permissions_import_import('all');
}

/**
 * NEXTEUROPA-7529: Enabling Corresponding Entity References.
 */
function dt_core_update_7158() {
  $modules = [
    'table_element',
    'field_object',
    'cer',
  ];
  module_enable($modules);
}

/**
 * NEXTEUROPA-7659 - Default image for the header background.
 */
function dt_core_update_7159() {
  // Enable the dt header background custom module.
  module_enable(['dt_header_background']);
}

/**
 * Update the default social media link url (other social networks).
 */
function dt_core_update_7160() {
  variable_set('dt_core_other_social_networks_link', 'http://europa.eu/contact/social-networks/');
}

/**
 * Enabling ec_embedded_video to enable the cookie overlay.
 */
function dt_core_update_7161() {
  module_enable(['ec_embedded_video']);
}

/**
 * NEXTEUROPA-8254 - Remove the platform breadcrumb menu.
 */
function dt_core_update_7162() {
  _dt_shared_functions_delete('menu-breadcrumb-menu', 'menu', 'menu');
}

/**
 * NEXTEUROPA-7770 - Enabling DT wysiwyg update ckeditor settings.
 */
function dt_core_update_7163() {
  module_enable(['dt_wysiwyg']);
}

/**
 * Enabling nexteuropa_metatags.
 */
function dt_core_update_7164() {
  module_enable(['nexteuropa_metatags']);
  // Somehow it needs to be reverted.
  features_revert_module('nexteuropa_metatags');
}

/**
 * NEXTEUROPA-9319 - The featured image is not appearing correctly.
 */
function dt_core_update_7165() {
  features_revert_module('dt_core');
  $image_styles = [
    'header_image_breakpoints_theme_europa_medium_2x',
    'header_image_breakpoints_theme_europa_mobile_2x',
    'header_image_breakpoints_theme_europa_narrow_2x',
    'header_image_breakpoints_theme_europa_normal_2x',
    'header_image_breakpoints_theme_europa_wide_2x',
    'highlight_image_breakpoints_theme_europa_medium_2x',
    'highlight_image_breakpoints_theme_europa_mobile_2x',
    'highlight_image_breakpoints_theme_europa_narrow_2x',
    'highlight_image_breakpoints_theme_europa_normal_2x',
    'highlight_image_breakpoints_theme_europa_wide_2x',
    'teaser_image_breakpoints_theme_europa_medium_2x',
    'teaser_image_breakpoints_theme_europa_mobile_2x',
    'teaser_image_breakpoints_theme_europa_narrow_2x',
    'teaser_image_breakpoints_theme_europa_normal_2x',
    'teaser_image_breakpoints_theme_europa_wide_2x',
  ];
  foreach ($image_styles as $item) {
    image_style_flush(['name' => $item]);
  }
}

/**
 * DTTSB-457: Disable commissioner_date and enable dt_date_format.
 */
function dt_core_update_7166() {
  module_enable(['dt_date_format']);
  module_disable(['commissioner_date']);
}

/**
 * DTTSB-643: Enable views_ajax_history, italian to be lower case.
 */
function dt_core_update_7167() {
  module_enable(['views_ajax_history']);
  // Call our helper function to update the list.
  _dt_core_transform_language_to_lower_case(_dt_core_lower_case_languages());
}

/**
 * Enabling og_role_override for editorial workflow (7168)
 *
 * Convert datetime to timestamp fields (7169)
 * Revoke some permissions from editorial team member (7170)
 * Generate the required vocabulary there is no upgrade (7171)
 * Remove main taxonomy from the database.
 */
function dt_core_update_7172() {
  // Enabling og_role_override for editorial workflow.
  module_enable(['og_role_override']);
  // Convert datetime to timestamp fields.
  $fields = [
    'field_core_date_published',
    'field_core_date_updated',
  ];

  foreach ($fields as $field) {
    $tables = ['field_data_' . $field, 'field_revision_' . $field];
    $column_name = $field . '_value';

    // Temporary data.
    $param = [
      'type' => 'int',
      'not null' => TRUE,
      'default' => 0,
    ];

    // Update base and revision.
    foreach ($tables as $table) {
      // Add the field.
      db_add_field($table, $column_name . '_temp', $param);
      // Convert the data.
      db_update($table)
        ->expression($column_name . '_temp', "UNIX_TIMESTAMP($column_name)")
        ->execute();
      // Drop the table.
      db_drop_field($table, $column_name);
      // Rename the updated column.
      db_change_field($table, $column_name . '_temp', $column_name, ['type' => 'int']);
    }

    // Change info in the database.
    db_update('field_config')
      ->fields(['type' => 'datestamp'])
      ->condition('field_name', $field)
      ->execute();
  }
  field_cache_clear();
  // Revert the feature.
  features_revert_module('dt_core');

  // Revoke some permissions from editorial team member.
  if (_dt_roles_permissions_import_import('editorial team member', TRUE)) {
    drupal_set_message(t('Role "editorial team member" updated.'));
  }

  $vocabulary = taxonomy_vocabulary_machine_name_load('main_taxonomy');
  taxonomy_vocabulary_delete($vocabulary->vid);
}

/**
 * Enabling wysiwyg_abbr for Abbr button.
 */
function dt_core_update_7173() {
  module_enable(['wysiwyg_abbr']);

  // Applying a default set of buttons to the Full HTML profile.
  _dt_apply_wysiwyg_buttons();
}

/**
 * DTTSB-1078: Enabling redirect module and update perm.
 *
 * DTTSB-1039: Update translation of field_core_quick_nav_links. (7174)
 */
function dt_core_update_7175(&$sandbox) {
  module_enable(['redirect']);
  // Update permissions so that site managers and editors
  // can access redirect settings for each node.
  features_revert_module('dt_roles_permissions');
  // Reverting core.
  features_revert_module('dt_core');
  // Update field.
  _dt_core_enable_entity_translation('field_core_quick_nav_links', $sandbox);
}

/**
 * DTTSB-1235: Enabling Localization update module.
 *
 * NEPT-85: Tracked changes icons should always be active when tracked changes
 * exist.
 */
function dt_core_update_7176() {
  module_enable(['l10n_update']);
  // Track changes settings follow up. NEPT-85.
  $settings = variable_get('multisite_wysiwyg', []);
  $settings['dis_change_track_on_create'] = 1;
  $settings['en_change_track_on_edit'] = 1;
  variable_set('multisite_wysiwyg', $settings);
}

/**
 * DTTSB-1337: Enable Media Browser Plus module.
 */
function dt_core_update_7177() {
  module_enable(['media_browser_plus']);
}

/**
 * DTTSB-1337: Enable multiform.
 *
 * This is only for AC enabling since the module was not added to .make.
 * When merging for the release this can be ignored since 7177 will enable the
 * module in any case.
 */
function dt_core_update_7178() {
  module_enable(['multiform']);
}
