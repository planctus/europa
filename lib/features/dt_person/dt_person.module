<?php

/**
 * @file
 * Code for the Person feature.
 */

include_once 'dt_person.features.inc';

/**
 * Implements hook_migrate_api().
 */
function dt_person_migrate_api() {
  return [
    'api' => 2,
    'groups' => [
      'NextEuropa Digital Transformation' => [
        'title' => t('Including taxonomy terms in the Person roles vocabulary.'),
      ],
    ],
    'migrations' => [
      'DTPersonRolesMigrator' => [
        'class_name' => 'DTPersonRolesMigration',
        'group_name' => 'NextEuropa Digital Transformation',
      ],
    ],
  ];
}

/**
 * Implements hook_ds_layout_info().
 */
function dt_person_ds_layout_info() {
  $path = drupal_get_path('module', 'dt_person');

  $layouts = [
    'person' => [
      'label' => t('Content type layout: Person'),
      'path' => $path . '/layouts',
      'regions' => [
        'left_header' => t('Left Header'),
        'biography_image' => t('Biography image'),
        'biography_column' => t('Biography column'),
        'top' => t('Top'),
        'left' => t('Left'),
        'central' => t('Middle'),
      ],
      'is_nexteuropa' => TRUE,
    ],
  ];

  return $layouts;
}

/**
 * Implements hook_field_attach_view_alter().
 *
 * This will alter the output of the context nav when its a person.
 */
function dt_person_field_attach_view_alter(&$output, $context) {
  // Append RDF term mappings on displayed taxonomy links.
  foreach (element_children($output) as $field_name) {
    $element = &$output[$field_name];
    if ($element['#field_type'] == 'entityreference' && $element['#field_name'] == 'field_core_persons' && $element['#formatter'] == 'context_nav_item') {

      // Set our default wrapper label.
      $wrapper_label = t('Commissioner');

      // Get the taxonomy term id for commissioner.
      $commissioner_taxonomy_id = key(taxonomy_get_term_by_name('commissioner', 'person_roles'));

      // Rebuild our commissioner list.
      $commissioner_list = [];

      // Set our check default to true.
      $same_title = TRUE;
      $last_title_tid = NULL;

      // Check if titles are different.
      foreach ($element['#items'] as $key => $item) {
        // Load entity_metadata_wrapper.
        $check_entity = entity_metadata_wrapper('node', $item['entity']);

        // Store the data in our custom array so we dont have to get it again.
        $commissioner_list[$key] = [
          'emw' => $check_entity,
          'obj' => $item,
        ];

        // Check if the tid is the same. If not set our variable to false.
        if (!empty($last_title_tid) && $last_title_tid !== $check_entity->field_person_role->value()->tid) {
          $same_title = FALSE;
        }

        // Save the last id we checked.
        $last_title_tid = $check_entity->field_person_role->value()->tid;
      }

      // If all the persons have the same title, we update our label.
      if ($same_title && isset($check_entity->field_person_role)) {
        if (module_exists('i18n')) {
          $term = i18n_taxonomy_localize_terms(taxonomy_term_load($check_entity->field_person_role->value()->tid));
          $wrapper_label = $term->name;
        }
        else {
          $wrapper_label = $check_entity->field_person_role->value()->name;
        }
      }

      // We process the data again, with the new information we have.
      foreach ($commissioner_list as $key => $commissioner) {
        $is_commissioner = (!$same_title && $commissioner['emw']->field_person_role->value()->tid == $commissioner_taxonomy_id);
        // If it is the same title. We can just render the "name" mode.
        if (($same_title || $is_commissioner) && $person_render = entity_view('node', [$commissioner['obj']['entity']], 'name')) {
          // Update our element.
          $element[$key]['#markup'] = render($person_render);
        }
      }

      // Get our display settings.
      $display_settings = field_info_instance('node', 'field_core_persons', $context['entity']->type);

      // Check our settings.
      $has_expander = isset($display_settings['display'][$context['view_mode']]['settings']['expander_has_expander']) ? $display_settings['display'][$context['view_mode']]['settings']['expander_has_expander'] : FALSE;
      $trim_at = isset($display_settings['display'][$context['view_mode']]['settings']['expander_trim_at']) ? $display_settings['display'][$context['view_mode']]['settings']['expander_trim_at'] : FALSE;
      $trim_to = isset($display_settings['display'][$context['view_mode']]['settings']['expander_trim_to']) ? $display_settings['display'][$context['view_mode']]['settings']['expander_trim_to'] : FALSE;

      // Update the label.
      $element = array_merge(
        $element,
        _nexteuropa_formatters_get_context_nav_wrapper(
          $wrapper_label,
          $has_expander,
          $trim_at,
          $trim_to
        )
      );
    }
  }
}

/**
 * Implements hook_menu().
 *
 * Will add an extra tab in user account page.
 */
function dt_person_menu() {
  if (module_exists('masquerade')) {
    $items = [];
    $items['user/%user/masquerade'] = [
      'title' => 'Masquerade',
      'page callback' => 'drupal_get_form',
      'page arguments' => ['masquerade_block_1', 1],
      'type' => MENU_LOCAL_TASK,
      'access callback' => '_masquerade_tab_access',
      'access arguments' => [1],
      'weight' => 3,
    ];
    return $items;
  }
  return NULL;
}

/**
 * Menu access callback for users masquerade form.
 *
 * @param object $account
 *   The user object of the current account.
 *
 * @return bool
 *   True/false.
 */
function _masquerade_tab_access($account) {
  // User administrators should always have access to personal contact forms.
  if (isset($_SESSION['masquerading']) || user_access('masquerade as user') || user_access('masquerade as admin')) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Alter the form to display a fast link switch.
 */
function dt_person_form_masquerade_block_1_alter(&$form, &$form_state, $form_id) {
  global $user;
  $get_uid = menu_get_object('user');
  if ($get_uid->uid && ($user->uid != $get_uid->uid)) {
    $switch_link = 'masquerade/switch/' . $get_uid->uid;
    $quick_switch_links = l($get_uid->name, $switch_link, ['query' => ['token' => drupal_get_token($switch_link)]]);
    $form['masquerade_desc']['#markup'] = t('Switch as :') . $quick_switch_links . t(', or enter enter a username to masquerade above.');
  }
}

/**
 * Implements hook_ds_fields_info().
 */
function dt_person_ds_fields_info() {
  $fields = [];

  $fields['full_name'] = [
    'title' => t('Person full name'),
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'function' => '_dt_person_token_replace_fullname',
    'properties' => [
      'class' => 'full-name',
      'first_name' => '[node:field_person_first_name]',
      'last_name' => '[node:field_person_last_name]',
      'link' => '[node:legacy-link]',
    ],
  ];

  $fields['full_name_nolink'] = [
    'title' => t('Person full name - nolink'),
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'function' => '_dt_person_token_replace',
    'properties' => [
      'value' => '[node:field_person_first_name] [node:field_person_last_name]',
    ],
  ];

  $fields['job_role'] = [
    'title' => t('Job role'),
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'function' => '_dt_person_job_role',
  ];

  return ['node' => $fields];
}

/**
 * Custom function to return the name link.
 *
 * @param array $field
 *   Array containing the context.
 *
 * @return string
 *   The string with replaced tokens.
 */
function _dt_person_token_replace_fullname($field) {
  if (isset($field['properties']['class'])) {
    $options = [
      'attributes' => [
        'class' => [
          $field['properties']['class'],
        ],
      ],
    ];
    // Remove it from the array.
    unset($field['properties']['class']);

    // Replace all other values using token replace.
    foreach ($field['properties'] as &$property) {
      $property = token_replace($property, [$field['entity_type'] => $field['entity']], ['clear' => TRUE]);
    }
    return l($field['properties']['first_name'] . ' ' . $field['properties']['last_name'], $field['properties']['link'], $options);
  }
  return NULL;
}

/**
 * Custom function for single token replacement in a field.
 *
 * @param array $field
 *   Array containing the context.
 *
 * @return string
 *   The string with replaced tokens.
 */
function _dt_person_token_replace($field) {
  if (isset($field['properties']['value'])) {
    $value = $field['properties']['value'];
    $value = token_replace($value, [$field['entity_type'] => $field['entity']], ['clear' => TRUE]);
    return $value;
  }
  return NULL;
}

/**
 * Helper to build the role field.
 *
 * @param array $field
 *   Array of properties required to render the field.
 *
 * @return string|bool
 *    Rendered content or false if no data.
 */
function _dt_person_job_role($field) {
  if (!isset($field['entity']) || $field['entity']->type !== 'person') {
    return FALSE;
  }

  // Start our render config.
  $output = "";

  // Get the role.
  $nwo = entity_metadata_wrapper('node', $field['entity']);
  if ($nwo->__isset('field_core_jobs')) {
    // Set the values.
    $jobs = $nwo->field_core_jobs->value();
    foreach ($jobs as $job) {
      $nwo = entity_metadata_wrapper('node', $job);
      if ($nwo->__isset('field_job_role')) {
        $job_role = $nwo->field_job_role->value();
        $tmw = entity_metadata_wrapper('taxonomy_term', $job_role);
        $render_config = [
          '#theme' => 'dt_person_job_role',
          '#role_class' => 'meta__item',
          '#role_text' => $tmw->name->value(),
        ];
        $output .= drupal_render($render_config);
      }
    }
    return $output;
  }

  return FALSE;
}

/**
 * Implements hook_node_view_alter().
 */
function dt_person_node_view_alter(&$build) {
  if ($build['#bundle'] == 'person' && $build['#view_mode'] == 'full') {
    drupal_add_js(drupal_get_path('module', 'dt_person') . '/assets/js/person-collapse.js');
  }
  if ($build['#bundle'] == 'person' && $build['#view_mode'] == 'event_speaker') {
    if (isset($build['#node']->entity_reference_has_override) && isset($build['field_person_role_title'][0]['#markup'])) {
      $build['field_person_role']['#access'] = FALSE;
      $build['field_person_role_title']['#access'] = TRUE;
    }
  }
  if ($build['#bundle'] == 'person' && isset($build['field_person_photo'])) {
    // Default person photo male/female.
    if (isset($build['field_person_photo'][0]['#item']['is_default']) && $build['field_person_photo'][0]['#item']['is_default']) {
      if ($file = _dt_person_get_default_photo_file($build['field_person_photo']['#object'])) {
        $build['field_person_photo'][0]['#item']['uri'] = $file->uri;
      }
    }
  }
}

/**
 * Implements hook_post_features_revert().
 */
function dt_person_post_features_revert($component) {
  if ($component == 'field_instance') {
    $field_instance = field_info_instance('node', 'field_person_photo', 'person');

    if (!$fid = variable_get('dt_person_photo_default_female', FALSE)) {
      _dt_person_add_default_images();
      $fid = variable_get('dt_person_photo_default_female');
    }
    $field_instance['settings']['default_image'] = $fid;
    field_update_instance($field_instance);
  }
}

/**
 * Returns default photo file object.
 *
 * @param object $node
 *   The node object to work with.
 *
 * @return object
 *   The file as an object.
 */
function _dt_person_get_default_photo_file($node) {
  $emw = entity_metadata_wrapper('node', $node);
  if ($fid = variable_get('dt_person_photo_default_' . drupal_strtolower($emw->field_person_gender->value()), FALSE)) {
    return file_load($fid);
  }
  return FALSE;
}

/**
 * Adds default images to the system.
 */
function _dt_person_add_default_images() {
  // Set the "default" image for the header background.
  $filepaths = [
    'male' => drupal_realpath(drupal_get_path('module', 'dt_person') . '/images/person_photo_male.png'),
    'female' => drupal_realpath(drupal_get_path('module', 'dt_person') . '/images/person_photo_female.png'),
  ];

  $i = 1;
  foreach ($filepaths as $gender => $filepath) {
    if (file_exists($filepath)) {
      $file = (object) [
        'uid' => 1,
        'uri' => $filepath,
        'filemime' => file_get_mimetype($filepath),
        'status' => FILE_STATUS_PERMANENT,
      ];

      // Copy the default image in the public folder.
      if ($file = file_copy($file, 'public://')) {
        file_usage_add($file, 'dt_person', 'default', $i++);

        variable_set('dt_person_photo_default_' . $gender, $file->fid);
      }
    }
  }
}

/**
 * Implements hook_theme().
 */
function dt_person_theme() {
  return [
    'dt_person_job_role' => [
      'template' => 'dt_person_job_role',
      'path' => drupal_get_path('module', 'dt_person') . '/templates',
      'variables' => [
        'role_class' => '',
        'role_text' => '',
      ],
    ],
  ];
}
