<?php
/**
 * @file
 * Code for the Person feature.
 */

include_once 'dt_person.features.inc';

/**
 * Implements hook_migrate_api().
 */
function dt_person_migrate_api() {
  return array(
    'api' => 2,
    'groups' => array(
      'NextEuropa' => array(
        'title' => t('Including taxonomy terms in the Person roles vocabulary.'),
      ),
    ),
    'migrations' => array(
      'DTPersonRolesMigrator' => array(
        'class_name' => 'DTPersonRolesMigration',
        'group_name' => 'NextEuropa Digital Transformation',
      ),
    ),
  );
}

/**
 * Implements hook_field_attach_view_alter().
 *
 * This will alter the output of the context nav when its a person.
 */
function dt_person_field_attach_view_alter(&$output, $context) {
  // Append RDF term mappings on displayed taxonomy links.
  foreach (element_children($output) as $field_name) {
    $element = &$output[$field_name];
    if ($element['#field_type'] == 'entityreference' && $element['#field_name'] == 'field_core_persons' && $element['#formatter'] == 'context_nav_item') {

      // Set our default wrapper label.
      $wrapper_label = t('Commissioner');

      // Get the taxonomy term id for commissioner.
      $commissioner_taxonomy_id = key(taxonomy_get_term_by_name('commissioner', 'person_roles'));

      // Rebuild our commissioner list.
      $commissioner_list = array();

      // Set our check default to true.
      $same_title = TRUE;

      // Check if titles are different.
      foreach ($element['#items'] as $key => $item) {
        // Load entity_metadata_wrapper.
        $check_entity = entity_metadata_wrapper('node', $item['entity']);

        // Store the data in our custom array so we dont have to get it again.
        $commissioner_list[$key] = array(
          'emw' => $check_entity,
          'obj' => $item,
        );

        // Save the last id we checked.
        $last_title_tid = $check_entity->field_person_role->value()->tid;

        // Check if the tid is the same. If not set our variable to false.
        if (isset($last_title_tid) && $last_title_tid !== $check_entity->field_person_role->value()->tid) {
          $same_title = FALSE;
        }
      }

      // If all the persons have the same title, we update our label.
      if ($same_title && isset($check_entity->field_person_role)) {
        $wrapper_label = $check_entity->field_person_role->value()->name;
      }

      // We process the data again, with the new information we have.
      foreach ($commissioner_list as $key => $commissioner) {
        $is_commissioner = (!$same_title && $commissioner['emw']->field_person_role->value()->tid == $commissioner_taxonomy_id);
        // If it is the same title. We can just render the "name" mode.
        if (($same_title || $is_commissioner) && $person_render = entity_view('node', array($commissioner['obj']['entity']), 'name')) {
          // Update our element.
          $element[$key]['#markup'] = render($person_render);
        }
      }

      // Get our display settings.
      $display_settings = field_info_instance('node', 'field_core_persons', $context['entity']->type);

      // Check our settings.
      $has_expander = isset($display_settings['display'][$context['view_mode']]['settings']['expander_has_expander']) ? $display_settings['display'][$context['view_mode']]['settings']['expander_has_expander'] : FALSE;
      $trim_at = isset($display_settings['display'][$context['view_mode']]['settings']['expander_trim_at']) ? $display_settings['display'][$context['view_mode']]['settings']['expander_trim_at'] : FALSE;
      $trim_to = isset($display_settings['display'][$context['view_mode']]['settings']['expander_trim_to']) ? $display_settings['display'][$context['view_mode']]['settings']['expander_trim_to'] : FALSE;

      // Update the label.
      $element = array_merge(
        $element,
        _nexteuropa_formatters_get_context_nav_wrapper(
          $wrapper_label,
          $has_expander,
          $trim_at,
          $trim_to
        )
      );
    }
  }
}

/**
 * Implements hook_menu().
 *
 * Will add an extra tab in user account page.
 */
function dt_person_menu() {
  if (module_exists('masquerade')) {
    $items = array();
    $items['user/%user/masquerade'] = array(
      'title' => 'Masquerade',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('masquerade_block_1', 1),
      'type' => MENU_LOCAL_TASK,
      'access callback' => '_masquerade_tab_access',
      'access arguments' => array(1),
      'weight' => 3,
    );
    return $items;
  }
  return NULL;
}

/**
 * Menu access callback for users masquerade form.
 *
 * @param object $account
 *   The user object of the current account.
 *
 * @return bool
 *   True/false.
 */
function _masquerade_tab_access($account) {
  // User administrators should always have access to personal contact forms.
  if (isset($_SESSION['masquerading']) || user_access('masquerade as user') || user_access('masquerade as admin')) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Alter the form to display a fast link switch.
 */
function dt_person_form_masquerade_block_1_alter(&$form, &$form_state, $form_id) {
  global $user;
  $get_uid = menu_get_object('user');
  if ($get_uid->uid && ($user->uid != $get_uid->uid)) {
    $switch_link = 'masquerade/switch/' . $get_uid->uid;
    $quick_switch_links = l($get_uid->name, $switch_link, array('query' => array('token' => drupal_get_token($switch_link))));
    $form['masquerade_desc']['#markup'] = t('Switch as :') . $quick_switch_links . t(', or enter enter a username to masquerade above.');
  }
}

/**
 * Implements hook_ds_fields_info().
 */
function dt_person_ds_fields_info() {
  $fields = array();

  $fields['full_name'] = array(
    'title' => t('Person full name'),
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'function' => '_dt_person_token_replace_fullname',
    'properties' => array(
      'class' => 'full-name',
      'first_name' => '[node:field_person_last_name]',
      'last_name' => '[node:field_person_first_name]',
      'link' => '[node:legacy-link]',
    ),
  );

  $fields['full_name_nolink'] = array(
    'title' => t('Person full name - nolink'),
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'function' => '_dt_person_token_replace',
    'properties' => array(
      'value' => '[node:field_person_first_name] [node:field_person_last_name]',
    ),
  );

  return array('node' => $fields);
}

/**
 * Custom function to return the name link.
 *
 * @param array $field
 *   Array containing the context.
 *
 * @return string
 *   The string with replaced tokens.
 */
function _dt_person_token_replace_fullname($field) {
  if (isset($field['properties']['class'])) {
    $options = [
      'attributes' => [
        'class' => [
          $field['properties']['class'],
        ],
      ],
    ];
    // Remove it from the array.
    unset($field['properties']['class']);

    // Replace all other values using token replace.
    foreach ($field['properties'] as &$property) {
      $property = token_replace($property, array($field['entity_type'] => $field['entity']), array('clear' => TRUE));
    }
    return l($field['properties']['first_name'] . ' ' . $field['properties']['last_name'], $field['properties']['link'], $options);
  }
  return NULL;
}

/**
 * Custom function for single token replacement in a field.
 *
 * @param array $field
 *   Array containing the context.
 *
 * @return string
 *   The string with replaced tokens.
 */
function _dt_person_token_replace($field) {
  if (isset($field['properties']['value'])) {
    $value = $field['properties']['value'];
    $value = token_replace($value, array($field['entity_type'] => $field['entity']), array('clear' => TRUE));
    return $value;
  }
  return NULL;
}
