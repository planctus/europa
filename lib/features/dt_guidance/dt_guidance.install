<?php
/**
 * @file
 * Install file.
 */

/**
 * Implements hook_install().
 */
function dt_guidance_install() {
  // Apply default dt configuration to "Policy input" content type.
  multisite_config_service('nexteuropa_core')->applyDefaultConfigurationToContentType('guidance');
}

/**
 * Implements hook_uninstall().
 */
function dt_guidance_uninstall() {
  $path = drupal_get_path('module', 'dt_guidance') . '/dt_guidance.info';
  $info = drupal_parse_info_file($path);
  drupal_set_message(t('NextEuropa guidance %v feature is uninstalled on your site.', array('%v' => $info['version'])));
}

/**
 * NEXTEUROPA-7202: Converting policy_implementation into guidance.
 */
function dt_guidance_update_7101($sandbox) {
  $features = array('dt_policy_implementation', 'dt_policy', 'dt_guidance');
  foreach ($features as $feature) {
    features_revert_module($feature);
  }

  // Enable Node Convert module.
  if (!module_exists('node_convert')) {
    module_enable(array('node_convert'));
  }

  // Set up source.
  $source_bundle = 'policy_implementation';
  // Automatically converted source fields.
  $source_fields = array(
    'field_policy_imp_introduction',
  );
  // Set up destination.
  $destination_bundle = 'guidance';
  // Automatically converted destination fields.
  $destination_fields = array(
    'field_core_description',
  );
  // Set up query.
  $query = new EntityFieldQuery();
  // Mount query.
  $query->entityCondition('entity_type', 'node')
        ->entityCondition('bundle', $source_bundle)
        ->fieldCondition('field_policy_imp_type', 'value', 'guidance', '=');
  // Setup the amount of steps.
  $limit = 100;

  // Initialization.
  if (!isset($sandbox['max'])) {
    // Get the amount of processed nodes.
    $count = $query->count()->execute();
    $query->count = FALSE;
    $sandbox['max'] = $count;
    $sandbox['progress'] = 0;
    $sandbox['position'] = 0;
  }

  $result = $query->range($sandbox['position'], $limit)->execute();

  if (isset($result['node']) && !empty($result['node'])) {
    $nids = array_keys($result['node']);
    $nodes = node_load_multiple($nids);
    foreach ($nodes as $nid => $source_node) {
      // Automatic convert by node_convert module.
      if (node_convert_node_convert($nid, $destination_bundle, $source_fields, $destination_fields, FALSE)) {
        $destination_node = node_load($nid);
        $source_wrapper = entity_metadata_wrapper('node', $source_node);
        $destination_wrapper = entity_metadata_wrapper('node', $destination_node);

        // Convert unsupported fields.
        _dt_guidance_node_convert($source_node, $source_wrapper, $destination_wrapper);

        // Storing new values.
        $destination_wrapper->save();
      }
    }
  }

  // Nids needs to be empty for the next round.
  unset($nids);
  // Update the position.
  $sandbox['position'] += $limit;

  // Checking the finishing of the processing.
  if ($sandbox['max'] > 0 && $sandbox['max'] > $sandbox['position']) {
    $sandbox['#finished'] = $sandbox['position'] / $sandbox['max'];
  }
  else {
    $sandbox['#finished'] = 1;
  }
}

/**
 * Helper function for migration on guidance.
 *
 * @param object $source_node
 *                Source node.
 * @param object $source_wrapper
 *                Source wrapper.
 * @param object $destination_wrapper
 *                Destination wrapper.
 */
function _dt_guidance_node_convert($source_node, $source_wrapper, &$destination_wrapper) {
  // Description converter.
  if (isset($source_node->field_policy_imp_introduction)) {
    foreach ($source_node->field_policy_imp_introduction as $lang => $item) {
      $destination_wrapper->language($lang)->field_core_description->set(strip_tags($item[0]['value']));
    }
  }
}
