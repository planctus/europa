<?php

/**
 * @file
 * Dt Publication install file.
 */

/**
 * Helper function for importing taxonomy terms.
 */
function _dt_publication_import_taxonomy_terms() {
  $terms = [
    'No Source',
    'EUR-lex',
    'EC Annual reports',
    'Open data portal',
    'Eurofound',
    'EU Bookshop',
    'EU Publications Office',
  ];
  foreach ($terms as $term) {
    _dt_core_create_taxonomy_term('publication_origin', $term);
  }
}

/**
 * Implements hook_install().
 */
function dt_publication_install() {
  // Apply default dt configuration to "Publication" content type.
  multisite_config_service('nexteuropa_core')->applyDefaultConfigurationToContentType('publication');
  _dt_publication_import_taxonomy_terms();

  // Import "Publication Types" terms.
  // Force registration of migration classes.
  migrate_static_registration();
  // Make sure that destination vocabularies exists.
  features_revert(['dt_publication' => ['taxonomy']]);
  // Import publication_types vocabulary's terms.
  Migration::getInstance('DTPublicationPublicationTypes')->processImport();
}

/**
 * Implements hook_uninstall().
 */
function dt_publication_uninstall() {
  drupal_set_message(t('DT Publication feature is uninstalled on your site.'));
}

/**
 * Removing group_publication_metadata and group_scheduler field groups.
 */
function dt_publication_update_7101() {
  $metadata_group = field_group_load_field_group('group_publication_metadata', 'node', 'publication', 'form');
  $scheduler_group = field_group_load_field_group('group_scheduler', 'node', 'publication', 'form');
  field_group_group_export_delete($metadata_group, FALSE);
  field_group_group_export_delete($scheduler_group, FALSE);
}

/**
 * Removing the field_core_file field which is simple file field.
 */
function dt_publication_update_7102() {
  if ($instance = field_info_instance('node', 'field_core_file', 'publication')) {
    field_delete_instance($instance);
  }
}

/**
 * Reverting the feature after changes.
 */
function dt_publication_update_7103() {
  features_revert_module('dt_publication');
  // The fields need component-based way.
  features_revert([
    'dt_class' => ['field_instance', 'field_base', 'variable'],
  ]);
}

/**
 * Removing group_publication_common and group_publication_files field groups.
 */
function dt_publication_update_7104() {
  $group_publication_common = field_group_load_field_group('group_publication_common', 'node', 'publication', 'form');
  $group_publication_files = field_group_load_field_group('group_publication_files', 'node', 'publication', 'form');
  field_group_group_export_delete($group_publication_common, FALSE);
  field_group_group_export_delete($group_publication_files, FALSE);
}

/**
 * Removing field field_publication_summary.
 */
function dt_publication_update_7105() {
  field_delete_field('field_publication_summary');
}

/**
 * Reverting the feature after changes.
 */
function dt_publication_update_7106() {
  features_revert_module('dt_publication');
}

/**
 * Reverting feature.
 */
function dt_publication_update_7107() {
  features_revert_module('dt_department');
  features_revert_module('dt_publication');
  // Importing taxonomy terms to publication_origin.
  _dt_publication_import_taxonomy_terms();
  // Copy content from field_core_department to field_core_department.
  _dt_shared_field_value_copy('node', 'publication', 'field_core_department', 'field_core_departments');
  // Remove field instance.
  if ($instance = field_info_instance('node', 'field_core_department', 'publication')) {
    field_delete_instance($instance);
  }
}

/**
 * NEXTEUROPA-4904: Changing fields.
 */
function dt_publication_update_7108() {
  // Create several field bases.
  features_revert_module('dt_core');
  // Update fields in the publication content type.
  features_revert_module('dt_publication');

  // Migrate content between fields that are renamed.
  _dt_shared_field_value_copy('node', 'publication', 'field_publication_published_on', 'field_core_date_published');
  _dt_shared_field_value_copy('node', 'publication', 'field_publication_contact', 'field_core_contact');

  // Remove deprecated fields, which are already migrated.
  $deprecated_instances = [
    'field_core_introduction',
    'field_publication_published_on',
    'field_publication_contact',
  ];

  foreach ($deprecated_instances as $field_name) {
    if ($instance = field_info_instance('node', $field_name, 'publication')) {
      field_delete_instance($instance);
    }
  }

  // Removing deprecated field group.
  $group_publication_source = field_group_load_field_group('group_publication_source', 'node', 'publication', 'form');
  field_group_group_export_delete($group_publication_source, FALSE);
}

/**
 * NEXTEUROPA-8280: Set default publish date to node creation date if empty.
 */
function dt_publication_update_7109() {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'publication', '=');
  $results = $query->execute();

  if (isset($results['node'])) {
    $nids = array_keys($results['node']);
    $nodes = entity_load('node', $nids);

    foreach ($nodes as $node) {
      if (!isset($node->field_core_date_published[LANGUAGE_NONE]['0'])) {
        $node->field_core_date_published[LANGUAGE_NONE]['0'] = [
          'value' => format_date($node->created, 'custom', 'Y-m-d H:i:s', 'UTC'),
          'timezone' => "Europe/Luxembourg",
          'offset' => 3600,
          'offset2' => 3600,
          'value2' => format_date($node->created, 'custom', 'Y-m-d H:i:s', 'UTC'),
          'timezone_db' => "UTC",
          'date_type' => 'datetime',
        ];
        field_attach_update('node', $node);
        entity_get_controller('node')->resetCache([$node->nid]);
      }
    }
  }
}

/**
 * DTTSB-1321: Enable views_filters_selective.
 *
 * DTTSB-1049: Update translation of collection at Publications.
 */
function dt_publication_update_7111() {
  if (!module_exists('views_filters_selective')) {
    module_enable(['views_filters_selective']);
  }

  // Update fields in the publication content type.
  features_revert_module('dt_publication');

  $tables = [
    'field_data_field_publication_collection',
    'field_revision_field_publication_collection',
  ];
  foreach ($tables as $table) {
    // Delete non English translations, and keep the 'und'.
    db_delete($table)
      ->condition('language', 'en', '!=')
      ->execute();
    // Update all English value to LANGUAGE_NONE.
    db_update($table)
      ->fields(['language' => LANGUAGE_NONE])
      ->condition('language', 'en', '=')
      ->execute();
  }
}

/**
 * Implements hook_update().
 *
 * Publications content type: Type selection box no longer "ticked".
 * So collections and pages appear blank.
 *
 * @see: https://webgate.ec.europa.eu/CITnet/jira/browse/DTTSB-1514
 */
function dt_publication_update_7112(&$sandbox) {
  $limit = 10;

  if (!isset($sandbox['max'])) {
    drush_print(t('Batch notification start of @update_hook', ['@update_hook' => __FUNCTION__]));
    $sandbox['progress'] = 0;
    // Get all publications which don't have a type.
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'publication')
      ->propertyCondition('status', NODE_PUBLISHED);
    $sandbox['max'] = $query->count()->execute();
  }
  else {
    drush_print(t('Batch notification running @update_hook status: @count of @total', [
      '@update_hook' => __FUNCTION__,
      '@count' => $sandbox['progress'],
      '@total' => $sandbox['max'],
    ]));
  }

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'publication')
    ->propertyCondition('status', NODE_PUBLISHED);
  $query = $query->range($sandbox['progress'], $limit);
  $result = $query->execute();

  // Update publications which are don't have a type.
  foreach (entity_load('node', array_keys($result['node'])) as $node) {
    $emw = entity_metadata_wrapper('node', $node);
    // Check if field has data if not let's update this field.
    if (empty($emw->field_publication_collection->value())) {
      $update = FALSE;
      // Check if publication is a collection or a file.
      if ($emw->field_core_publications->value() && !$emw->field_core_files->value()) {
        // A collection of multiple publications.
        $type = 1;
        $update = TRUE;
      }
      // One publication.
      elseif (!$emw->field_core_publications->value() && $emw->field_core_files->value()) {
        $type = 0;
        $update = TRUE;
      }
      if ($update) {
        $node->field_publication_collection[LANGUAGE_NONE][0]['value'] = $type;
        // Take care of publications revisions and not unpublish them.
        $node->revision = 1;
        $node->log = 'Publication automatic update collection/single.';
        $node->uid = 1;
        node_save($node);
        workbench_moderation_moderate($node, 'published');
        watchdog('dt_publication', 'Publication updated: @publication', ['@publication' => $node->nid], WATCHDOG_NOTICE);
      }
      else {
        watchdog('dt_publication', 'Publication not updated: @publication', ['@publication' => $node->nid], WATCHDOG_NOTICE);
      }
    }
  }

  $sandbox['progress'] += $limit;
  if ($sandbox['max'] > 0 && $sandbox['max'] > $sandbox['progress']) {
    $sandbox['#finished'] = $sandbox['progress'] / $sandbox['max'];
  }
  else {
    $sandbox['#finished'] = 1;
    drupal_set_message(t('Batch of @update_hook done.', ['@update_hook' => __FUNCTION__]));
  }
}
