<?php

/**
 * @file
 * Code for the dt Publication feature.
 */

include_once 'dt_publication.features.inc';

/**
 * Implements hook_migrate_api().
 */
function dt_publication_migrate_api() {
  return [
    'api' => 2,
    'groups' => [
      'NextEuropa Digital Transformation' => [
        'title' => t('Stage initial content, publication types.'),
      ],
    ],
    'migrations' => [
      'DTPublicationPublicationTypes' => [
        'class_name' => 'DTPublicationPublicationTypesMigration',
        'group_name' => 'NextEuropa Digital Transformation',
      ],
    ],
  ];
}

/**
 * Implements hook_field_group_pre_render().
 *
 * Here based on the contents, we change the label of the field group.
 */
function dt_publication_field_group_pre_render(&$element, $group, & $form) {
  if ($group->group_name == 'group_publication_file') {
    // Load our display suite field settings.
    $ds_field_settings = ds_get_field_settings($element['#group']->entity_type, $element['#group']->bundle, $element['#group']->mode);

    // Check which field we have to use.
    if (is_array($element['collection_documents'])) {
      $valid_element = 'collection_documents';
      // Remove the other element from the render.
      unset($element['field_core_files']);
    }
    elseif (is_array($element['field_core_files'])) {
      $valid_element = 'field_core_files';
      // Remove the other element from the render.
      unset($element['collection_documents']);
    }

    // Set the label to the correct element.
    if (isset($valid_element)) {
      $element['#group']->label = isset($ds_field_settings[$valid_element]['formatter_settings']['ft']['lb']) ?
        $ds_field_settings[$valid_element]['formatter_settings']['ft']['lb'] :
        $element[$valid_element]['#title'];
    }
  }
}

/**
 * Implements hook_ds_fields_info().
 */
function dt_publication_ds_fields_info($entity_type) {
  $fields = [];

  // List of publications of type "One publication".
  $fields['collection_documents'] = [
    'title' => t('Collection documents'),
    'ui_limit' => ['publication|*'],
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'function' => '_dt_publication_documents',
  ];

  // The "Part of collection:".
  $fields['publication_collections'] = [
    'title' => t('Publication collections'),
    'ui_limit' => ['publication|*'],
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'function' => '_dt_publication_collections',
  ];

  // The collection label.
  $fields['collection_label'] = [
    'title' => t('Collection label'),
    'ui_limit' => ['publication|*'],
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'function' => '_dt_publication_collection_label',
  ];

  // The type label.
  $fields['publication_type_name'] = [
    'title' => t('Publication type name'),
    'ui_limit' => ['publication|*'],
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'function' => '_dt_publication_type_name',
  ];

  // The publication list view.
  $fields['publication_listing'] = [
    'title' => t('Publication listing'),
    'ui_limit' => ['basic_page|full'],
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'function' => '_dt_publication_listing',
  ];

  // The publication list exposed filters.
  $fields['publication_listing_exposed'] = [
    'title' => t('Publication listing filters'),
    'ui_limit' => ['basic_page|full'],
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'function' => '_dt_publication_listing_exposed',
  ];

  return ['node' => $fields];
}

/**
 * Helper function to embed view.
 *
 * @return string
 *    The rendered view.
 */
function _dt_publication_listing($entity) {
  $emw = entity_metadata_wrapper('node', $entity['entity']);
  if (isset($emw->field_publications_visibility) && $emw->field_publications_visibility->value() == TRUE) {
    return views_embed_view('publication_list', 'page_1');
  }
  return NULL;
}

/**
 * Helper function to embed view exposed filter with applied values.
 *
 * @return string
 *    The rendered view.
 */
function _dt_publication_listing_exposed($entity) {
  $emw = entity_metadata_wrapper('node', $entity['entity']);
  $node = $entity['entity'];
  $publication_list_visibility = (!empty($emw->field_publications_visibility)
    && $emw->field_publications_visibility->value() == TRUE);
  if ($publication_list_visibility && (
        $emw->field_publications_country_on->value() == 1
        || $emw->field_publications_year_on->value() == 1
        || $emw->field_publications_type_on->value() == 1
        || $emw->field_publications_tag_on->value() == 1
        || $emw->field_publications_topic_on->value() == 1
    )) {
    // Get the view with the exposed form.
    $view = views_get_view('publication_list');
    $display_id = 'page_1';
    $view->set_display($display_id);

    $form_state = [
      'view' => $view,
      'display' => $view->display_handler->display,
      'exposed_form_plugin' => $view->display_handler->get_plugin('exposed_form'),
      'method' => 'get',
      'rerender' => TRUE,
      'no_redirect' => TRUE,
    ];

    $render = [];
    $render['dt_title'] = [
      '#type' => 'markup',
      '#markup' => t('Refine results'),
      '#prefix' => '<h3 class="block__title filters__title">',
      '#suffix' => '</h3>',
    ];
    // Add the ready exposed form to the render.
    $render['form'] = drupal_build_form('views_exposed_form', $form_state);

    // Topic.
    $predefined_topic = NULL;
    if (!empty($node->field_publications_topic_eurovoc) && $predefined_topic = $node->field_publications_topic_eurovoc[LANGUAGE_NONE][0]['tid']) {
      $render['form']['field_eurovoc_taxonomy_target_id_selective']['#value'] = $predefined_topic;

      // Make sure the preselected term is in the options.
      $options = $render['form']['field_eurovoc_taxonomy_target_id_selective']['#options'];
      if (!array_key_exists($predefined_topic, $options)) {
        $term = i18n_taxonomy_localize_terms(taxonomy_term_load($predefined_topic));
        $render['form']['field_eurovoc_taxonomy_target_id_selective']['#options'][$term->tid] = $term->name;
      }
      if (!empty($_GET['field_eurovoc_taxonomy_target_id_selective'])) {
        $render['form']['field_eurovoc_taxonomy_target_id_selective']['#value'] = $_GET['field_eurovoc_taxonomy_target_id_selective'];
      }
    }
    if (!empty($render['form']['field_eurovoc_taxonomy_target_id_selective']['#options']['All']) && $render['form']['field_eurovoc_taxonomy_target_id_selective']['#options']['All'] == t('- Any -')) {
      $render['form']['field_eurovoc_taxonomy_target_id_selective']['#options']['All'] = t('- All topics -');
    }

    // Country.
    $predefined_country = NULL;
    if (!empty($node->field_publications_country) && $predefined_country = $node->field_publications_country[LANGUAGE_NONE][0]['tid']) {
      $render['form']['field_core_nal_countries_tid_selective']['#value'] = $predefined_country;
      if (!empty($_GET['field_core_nal_countries_tid_selective'])) {
        $render['form']['field_core_nal_countries_tid_selective']['#value'] = $_GET['field_core_nal_countries_tid_selective'];
      }
    }
    if (!empty($render['form']['field_core_nal_countries_tid_selective']['#options']['All']) && $render['form']['field_core_nal_countries_tid_selective']['#options']['All'] == t('- Any -')) {
      $render['form']['field_core_nal_countries_tid_selective']['#options']['All'] = t('- All countries -');
    }

    // Year.
    $predefined_year = NULL;
    if (!empty($node->field_publications_year) && $predefined_year = $node->field_publications_year[LANGUAGE_NONE][0]['value']) {
      $render['form']['field_core_date_updated_value']['#value'] = date('Y', $predefined_year);
      if (!empty($_GET['field_core_date_updated_value'])) {
        $render['form']['field_core_date_updated_value']['value']['year']['#value'] = $_GET['field_core_date_updated_value']['value']['year'];
      }
    }
    if (!empty($render['form']['field_core_date_updated_value']['value']['year']['#options']['']) && $render['form']['field_core_date_updated_value']['value']['year']['#options'][''] == t('-Year')) {
      $render['form']['field_core_date_updated_value']['value']['year']['#options'][''] = t('- All years -');
    }

    // Publication type.
    $predefined_type = NULL;
    if (!empty($node->field_publications_type) && $predefined_type = $node->field_publications_type[LANGUAGE_NONE][0]['tid']) {
      $render['form']['field_publication_type_tid_i18n']['#value'] = $predefined_type;
      if (!empty($_GET['field_publication_type_tid_i18n'])) {
        $render['form']['field_publication_type_tid_i18n']['#value'] = $_GET['field_publication_type_tid_i18n'];
      }
    }
    if (!empty($render['form']['field_publication_type_tid_i18n']['#options']['All']) && $render['form']['field_publication_type_tid_i18n']['#options']['All'] == t('- Any -')) {
      $render['form']['field_publication_type_tid_i18n']['#options']['All'] = t('- All publication types -');
    }

    // Publication tag.
    $predefined_tag = NULL;
    if (!empty($node->field_publications_tag) && $predefined_tag = $node->field_publications_tag[LANGUAGE_NONE][0]['tid']) {
      $render['form']['field_core_tags_tid_i18n']['#value'] = $predefined_tag;
      if (!empty($_GET['field_core_tags_tid_i18n'])) {
        $render['form']['field_core_tags_tid_i18n']['#value'] = $_GET['field_core_tags_tid_i18n'];
      }
    }
    if (!empty($render['form']['field_core_tags_tid_i18n']['#options']['All']) && $render['form']['field_core_tags_tid_i18n']['#options']['All'] == t('- Any -')) {
      $render['form']['field_core_tags_tid_i18n']['#options']['All'] = t('- All tags -');
    }

    return drupal_render($render);
  }
  return NULL;
}

/**
 * Helper function to show the type name in the meta header ds field.
 *
 * @param object $entity
 *   The entity to get the view for.
 *
 * @return string|NULL
 *   The rendered view.
 */
function _dt_publication_type_name($entity) {
  $emw = entity_metadata_wrapper('node', $entity['entity']);
  if ($emw->__isset('field_publication_collection')) {
    if ($emw->field_publication_collection->value() == '0') {
      if ($emw->__isset('field_publication_type') && !is_null($emw->field_publication_type->value())) {
        $tax_emw = entity_metadata_wrapper('taxonomy_term', $emw->field_publication_type->value());
        return $tax_emw->name->value();
      }
    }
  }
  return NULL;
}

/**
 * Helper function to show the correct label in the meta header ds field.
 *
 * @param object $entity
 *   The entity to get the view for.
 *
 * @return string
 *   The rendered view.
 */
function _dt_publication_collection_label($entity) {
  $emw = entity_metadata_wrapper('node', $entity['entity']);
  if ($emw->__isset('field_publication_collection')) {
    if ($emw->field_publication_collection->value() == '1') {
      return t('Collection');
    }
  }
}

/**
 * Helper returning a list entities based on a type of publication.
 *
 * @param object $entity
 *   The entity to get the view for.
 *
 * @return string
 *   The rendered view.
 */
function _dt_publication_documents($entity) {
  $node_wrapper = entity_metadata_wrapper($entity['entity_type'], $entity['entity']);
  if (isset($node_wrapper->field_publication_collection)) {
    $type = $node_wrapper->field_publication_collection->value();
    if ($type == "1") {
      // "1" == Collection.
      return views_embed_view('publications', 'block_1');
    }
  }
}

/**
 * Helper returning a list of links to publications of type collection.
 *
 * @return string
 *   The rendered view.
 */
function _dt_publication_collections() {
  if ($node = menu_get_object('node')) {
    $node_wrapper = entity_metadata_wrapper('node', $node);
    if (isset($node_wrapper->field_publication_collection)) {
      $type = $node_wrapper->field_publication_collection->value();
      if ($type == "0") {
        // "0" == Publication.
        return views_embed_view('publication_collections', 'block');
      }
    }
  }
}

/**
 * Implements hook_views_pre_view().
 */
function dt_publication_views_pre_view(&$view, &$display_id, &$args) {

  if ($view->name == 'publication_list' && $display_id == 'page_1' && $node = menu_get_object()) {
    if (empty($node->field_publications_visibility) || !$node->field_publications_visibility[LANGUAGE_NONE][0]['value']) {
      $view->executed = TRUE;
      $view->build = TRUE;
      $view->display['page_1']->handler->default_display->options['empty'] = [];
    }
    else {
      $prev_filters = $view->display_handler->get_option('filters');

      // Topic.
      $predefined_topic = NULL;
      if (!empty($node->field_publications_topic_eurovoc) && $predefined_topic = $node->field_publications_topic_eurovoc[LANGUAGE_NONE][0]['tid']) {
        $prev_filters['field_eurovoc_taxonomy_target_id_selective']['value'][$predefined_topic] = $predefined_topic;
      }

      // Country.
      $predefined_country = NULL;
      if (!empty($node->field_publications_country) && $predefined_country = $node->field_publications_country[LANGUAGE_NONE][0]['tid']) {
        $prev_filters['field_core_nal_countries_tid_selective']['value'][$predefined_country] = $predefined_country;
      }

      // Year.
      $predefined_year = NULL;
      if (!empty($node->field_publications_year) && $predefined_year = $node->field_publications_year[LANGUAGE_NONE][0]['value']) {
        $prev_filters['field_core_date_updated_value']['value']['value'] = date('Y', $predefined_year);
      }

      // Publication type.
      $predefined_type = NULL;
      if (!empty($node->field_publications_type) && $predefined_type = $node->field_publications_type[LANGUAGE_NONE][0]['tid']) {
        $prev_filters['field_publication_type_tid_i18n']['value'][$predefined_type] = $predefined_type;
      }

      // Publication tag.
      $predefined_tag = NULL;
      if (!empty($node->field_publications_tag) && $predefined_tag = $node->field_publications_tag[LANGUAGE_NONE][0]['tid']) {
        $prev_filters['field_core_tags_tid_i18n']['value'][$predefined_tag] = $predefined_tag;
      }

      $exp_filters = [
        'field_eurovoc_taxonomy_target_id_selective' => ['field_publications_topic_on', $predefined_topic],
        'field_core_nal_countries_tid_selective' => ['field_publications_country_on', $predefined_country],
        'field_core_date_updated_value' => ['field_publications_year_on', $predefined_year],
        'field_publication_type_tid_i18n' => ['field_publications_type_on', $predefined_type],
        'field_core_tags_tid_i18n' => ['field_publications_tag_on', $predefined_tag],
      ];

      foreach ($exp_filters as $exp_filter_key => $exp_filter) {
        if (!$node->{$exp_filter[0]}[LANGUAGE_NONE][0]['value']) {
          if (!$exp_filter[1]) {
            unset($prev_filters[$exp_filter_key]);
          }
          else {
            $prev_filters[$exp_filter_key]['exposed'] = FALSE;
          }
        }
      }

      $view->display_handler->override_option('filters', $prev_filters);
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function dt_publication_preprocess_views_view(&$variables) {
  if ($variables['name'] == 'publication_list' && $variables['display_id'] == 'page_1' && empty($variables['title'])) {
    $view = $variables['view'];
    if (isset($view->filter['type'])) {
      $content_type_filters = $view->filter['type']->value;
      if (is_array($content_type_filters)) {
        // The first element of the array is the right type of filter.
        $content_type = reset($content_type_filters);
      }
      else {
        // Case for Search API filters.
        $content_type = (string) $content_type_filters;
      }

      // Make sure we have a fallback.
      $content_type_forms = _dt_core_get_plural_content_types($content_type);
      // Set the display title and uppercase it.
      $display_title = drupal_ucfirst(format_plural(0, $content_type_forms['singular'], $content_type_forms['plural']));

      $title_markup = [
        '#markup' => $display_title,
        '#prefix' => '<div class="filters__result-count"><span class="filters__items-number">',
        '#suffix' => '</span></div>',
      ];

      // Set the title to what we just configured.
      $variables['title'] = drupal_render($title_markup);
    }
  }
}
