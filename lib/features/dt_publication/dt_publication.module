<?php

/**
 * @file
 * Code for the dt Publication feature.
 */

include_once 'dt_publication.features.inc';

/**
 * Implements hook_migrate_api().
 */
function dt_publication_migrate_api() {
  return [
    'api' => 2,
    'groups' => [
      'NextEuropa Digital Transformation' => [
        'title' => t('Stage initial content, publication types.'),
      ],
    ],
    'migrations' => [
      'DTPublicationPublicationTypes' => [
        'class_name' => 'DTPublicationPublicationTypesMigration',
        'group_name' => 'NextEuropa Digital Transformation',
      ],
    ],
  ];
}

/**
 * Implements hook_field_group_pre_render().
 *
 * Here based on the contents, we change the label of the field group.
 */
function dt_publication_field_group_pre_render(&$element, $group, & $form) {
  if ($group->group_name == 'group_publication_file') {
    // Load our display suite field settings.
    $ds_field_settings = ds_get_field_settings($element['#group']->entity_type, $element['#group']->bundle, $element['#group']->mode);

    // Check which field we have to use.
    if (is_array($element['collection_documents'])) {
      $valid_element = 'collection_documents';
      // Remove the other element from the render.
      unset($element['field_core_files']);
    }
    elseif (is_array($element['field_core_files'])) {
      $valid_element = 'field_core_files';
      // Remove the other element from the render.
      unset($element['collection_documents']);
    }

    // Set the label to the correct element.
    if (isset($valid_element)) {
      $element['#group']->label = isset($ds_field_settings[$valid_element]['formatter_settings']['ft']['lb']) ?
        $ds_field_settings[$valid_element]['formatter_settings']['ft']['lb'] :
        $element[$valid_element]['#title'];
    }
  }
}

/**
 * Implements hook_ds_fields_info().
 */
function dt_publication_ds_fields_info($entity_type) {
  $fields = [];

  // List of publications of type "One publication".
  $fields['collection_documents'] = [
    'title' => t('Collection documents'),
    'ui_limit' => ['publication|*'],
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'function' => '_dt_publication_documents',
  ];

  // The "Part of collection:".
  $fields['publication_collections'] = [
    'title' => t('Publication collections'),
    'ui_limit' => ['publication|*'],
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'function' => '_dt_publication_collections',
  ];

  // The collection label.
  $fields['collection_label'] = [
    'title' => t('Collection label'),
    'ui_limit' => ['publication|*'],
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'function' => '_dt_publication_collection_label',
  ];

  // The type label.
  $fields['publication_type_name'] = [
    'title' => t('Publication type name'),
    'ui_limit' => ['publication|*'],
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'function' => '_dt_publication_type_name',
  ];

  // The publication list view.
  $fields['publication_listing'] = [
    'title' => t('Publication listing'),
    'ui_limit' => ['basic_page|full'],
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'function' => '_dt_publication_listing',
  ];

  // The publication list exposed filters.
  $fields['publication_listing_exposed'] = [
    'title' => t('Publication listing filters'),
    'ui_limit' => ['basic_page|full'],
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'function' => '_dt_publication_listing_exposed',
  ];

  return ['node' => $fields];
}

/**
 * Implements hook_views_pre_build().
 */
function dt_publication_views_pre_build(&$view) {
  if ($view->name == 'publication_list' && $node = menu_get_object()) {
    if ($node->field_publications_visibility[LANGUAGE_NONE][0]['value'] == 1) {
      $prev_filters = $view->display_handler->get_option('filters');

      // Topic.
      $predefined_topic = NULL;
      if (!empty($node->field_publications_topic_eurovoc) && $predefined_topic = $node->field_publications_topic_eurovoc[LANGUAGE_NONE][0]['tid']) {
        $prev_filters['field_eurovoc_taxonomy_target_id_selective']['value'][$predefined_topic] = $predefined_topic;
      }

      // Country.
      $predefined_country = NULL;
      if (!empty($node->field_publications_country) && $predefined_country = $node->field_publications_country[LANGUAGE_NONE][0]['tid']) {
        $prev_filters['field_core_nal_countries_tid_selective']['value'][$predefined_country] = $predefined_country;
      }

      // Year.
      $predefined_year = NULL;
      if (!empty($node->field_publications_year) && $predefined_year = $node->field_publications_year[LANGUAGE_NONE][0]['value']) {
        $prev_filters['field_core_date_published_value']['value']['year'] = date('Y', $predefined_year);
        $predefined_year = ['value' => ['year' => date('Y', $predefined_year)]];
      }

      // Publication type.
      $predefined_type = NULL;
      if (!empty($node->field_publications_type) && $predefined_type = $node->field_publications_type[LANGUAGE_NONE][0]['tid']) {
        $prev_filters['field_publication_type_tid_i18n']['value'][$predefined_type] = $predefined_type;
      }

      // Publication tag.
      $predefined_tag = NULL;
      if (!empty($node->field_publications_tag) && $predefined_tag = $node->field_publications_tag[LANGUAGE_NONE][0]['tid']) {
        $prev_filters['field_core_tags_tid_i18n']['value'][$predefined_tag] = $predefined_tag;
      }

      $exp_filters = [
        'field_eurovoc_taxonomy_target_id_selective' => [
          'field_publications_topic_on',
          $predefined_topic,
        ],
        'field_core_nal_countries_tid_selective' => [
          'field_publications_country_on',
          $predefined_country,
        ],
        'field_core_date_published_value' => [
          'field_publications_year_on',
          $predefined_year,
        ],
        'field_publication_type_tid_i18n' => [
          'field_publications_type_on',
          $predefined_type,
        ],
        'field_core_tags_tid_i18n' => [
          'field_publications_tag_on',
          $predefined_tag,
        ],
      ];

      $exposed_input = [];

      // Hide unwanted filters.
      foreach ($exp_filters as $exp_filter_key => $exp_filter) {
        if (isset($node->{$exp_filter[0]}) && $node->{$exp_filter[0]}[LANGUAGE_NONE][0]['value']) {
          // To show view meta when the exposed filter input isn't available.
          if ($exp_filter[1] && !isset($_GET[$exp_filter_key])) {
            $exposed_input[$exp_filter_key] = $exp_filter[1];
          }
        }

        // If the filter is not enabled, we should set exposed to false.
        if (isset($node->{$exp_filter[0]}) && !$node->{$exp_filter[0]}[LANGUAGE_NONE][0]['value']) {
          $prev_filters[$exp_filter_key]['exposed'] = FALSE;
          $view->filter[$exp_filter_key]->options['exposed'] = FALSE;

          if ($exp_filter[1]) {
            // Date filter has different structure and we have to be aware.
            if ($exp_filter_key == 'field_core_date_published_value') {
              $view->filter[$exp_filter_key]->value = $exp_filter[1];
              $prev_filters[$exp_filter_key]['value'] = $exp_filter[1];
              continue;
            }
            $view->filter[$exp_filter_key]->value = [$exp_filter[1] => $exp_filter[1]];
          }
          else {
            unset($view->filter[$exp_filter_key]);
            unset($prev_filters[$exp_filter_key]);
          }
        }
      }

      // Set the exposed input to our values.
      if (!empty($exposed_input)) {
        $view->set_exposed_input($exposed_input);
      }
      $view->display_handler->override_option('filters', $prev_filters);
    }
  }
}

/**
 * Helper function to embed view.
 *
 * @param object $entity
 *   The entity.
 *
 * @return string
 *    The rendered view.
 */
function _dt_publication_listing($entity) {
  $emw = entity_metadata_wrapper('node', $entity['entity']);
  if (isset($emw->field_publications_visibility) && $emw->field_publications_visibility->value() === TRUE) {
    return views_embed_view('publication_list', 'page_1');
  }
  return NULL;
}

/**
 * Helper function to embed view exposed filter with applied values.
 *
 * We only show if there is an exposed filter set to be visible.
 *
 * @param object $entity
 *   The entity.
 *
 * @return string
 *   The rendered view.
 */
function _dt_publication_listing_exposed($entity) {
  if ($entity['entity']->field_publications_visibility[LANGUAGE_NONE][0]['value'] == 1
  && $entity['entity']->field_publications_topic_on[LANGUAGE_NONE][0]['value'] == 1
    || $entity['entity']->field_publications_country_on[LANGUAGE_NONE][0]['value'] == 1
    || $entity['entity']->field_publications_type_on[LANGUAGE_NONE][0]['value'] == 1
    || $entity['entity']->field_publications_year_on[LANGUAGE_NONE][0]['value'] == 1
    || $entity['entity']->field_publications_tag_on[LANGUAGE_NONE][0]['value'] == 1) {
    $display_id = 'page_1';
    if ($view = views_get_view('publication_list')) {
      if ($view->access($display_id)) {
        $view->build($display_id);
        $view->set_display($display_id);
        $view->init_handlers();
        if (isset($view->display_handler)) {
          $view->execute($display_id);
          $output = $view->display_handler->view_special_blocks('-exp');
          $view->destroy();
          $render = [];
          $render['dt_title'] = [
            '#type' => 'markup',
            '#markup' => t('Refine results'),
            '#prefix' => '<h3 class="block__title filters__title">',
            '#suffix' => '</h3>',
          ];
          $render['form'] = [
            '#type' => 'markup',
            '#markup' => $output['content'],
          ];
          return drupal_render($render);
        }
      }
      $view->destroy();
    }
  }
  return '';
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * In order for the dynamically loaded form to submit to the right location we
 * have to change the action.
 *
 * This part is including the specific solution for DTTSB-1570.
 */
function dt_publication_form_views_exposed_form_alter(&$form, $form_state, $form_id) {
  if ($form_state['view']->name == 'publication_list' && $form_state['view']->current_display == 'page_1') {
    $form['#action'] = '/' . drupal_get_path_alias();

    // Change "All" texts on exposed filters.
    if (!empty($form['field_eurovoc_taxonomy_target_id_selective']['#options']['All']) && $form['field_eurovoc_taxonomy_target_id_selective']['#options']['All'] == t('- Any -')) {
      $form['field_eurovoc_taxonomy_target_id_selective']['#options']['All'] = t('- All topics -');
    }
    if (!empty($form['field_core_nal_countries_tid_selective']['#options']['All']) && $form['field_core_nal_countries_tid_selective']['#options']['All'] == t('- Any -')) {
      $form['field_core_nal_countries_tid_selective']['#options']['All'] = t('- All countries -');
    }
    if (!empty($form['field_publication_type_tid_i18n']['#options']['All']) && $form['field_publication_type_tid_i18n']['#options']['All'] == t('- Any -')) {
      $form['field_publication_type_tid_i18n']['#options']['All'] = t('- All publication types -');
    }
    if (!empty($form['field_core_tags_tid_i18n']['#options']['All']) && $form['field_core_tags_tid_i18n']['#options']['All'] == t('- Any -')) {
      $form['field_core_tags_tid_i18n']['#options']['All'] = t('- All tags -');
    }

    /** @var View $view */
    $view = $form_state['view'];
    $input = $view->get_exposed_input();
    $filters = $view->display_handler->get_option('filters');

    // DTTSB-1570 specific tags selection handling.
    if (isset($input['field_core_tags_tid_i18n']) && isset($filters['field_core_tags_tid_i18n']['exposed']) && $filters['field_core_tags_tid_i18n']['exposed'] === TRUE) {
      $tag_tid = $input['field_core_tags_tid_i18n'];
      // If term has children or parent, show only children.
      if (!empty($children = taxonomy_get_children($tag_tid))
      || !empty($parent = taxonomy_get_parents($tag_tid))) {
        if (isset($parent)) {
          $children = taxonomy_get_children(key($parent));
          $tag_tid = key($parent);
        }
        foreach ($form['field_core_tags_tid_i18n']['#options'] as $tid => $name) {
          if (!array_key_exists($tid, $children)) {
            unset($form['field_core_tags_tid_i18n']['#options'][$tid]);
          }
        }
        $form['field_core_tags_tid_i18n']['#options'] = [$tag_tid => '- Any -'] + $form['field_core_tags_tid_i18n']['#options'];
      }
    }
  }
}

/**
 * Implements hook_date_select_process_alter().
 */
function dt_publication_date_select_process_alter(&$element, &$form_state, $context) {
  if ($context['form']['#id'] == 'views-exposed-form-publication-list-page-1') {
    if (isset($element['year']['#options']['']) && $element['year']['#options'][''] == '-Year') {
      $element['year']['#options'][''] = t('- All years -');
    }
  }
}

/**
 * Helper function to show the type name in the meta header ds field.
 *
 * @param object $entity
 *   The entity to get the view for.
 *
 * @return string|NULL
 *   The rendered view.
 */
function _dt_publication_type_name($entity) {
  $emw = entity_metadata_wrapper('node', $entity['entity']);
  if ($emw->__isset('field_publication_collection')) {
    if ($emw->field_publication_collection->value() == '0') {
      if ($emw->__isset('field_publication_type') && !is_null($emw->field_publication_type->value())) {
        $tax_emw = entity_metadata_wrapper('taxonomy_term', $emw->field_publication_type->value());
        return $tax_emw->name->value();
      }
    }
  }
  return NULL;
}

/**
 * Helper function to show the correct label in the meta header ds field.
 *
 * @param object $entity
 *   The entity to get the view for.
 *
 * @return string
 *   The rendered view.
 */
function _dt_publication_collection_label($entity) {
  $emw = entity_metadata_wrapper('node', $entity['entity']);
  if ($emw->__isset('field_publication_collection')) {
    if ($emw->field_publication_collection->value() == '1') {
      return t('Collection');
    }
  }
}

/**
 * Helper returning a list entities based on a type of publication.
 *
 * @param object $entity
 *   The entity to get the view for.
 *
 * @return string
 *   The rendered view.
 */
function _dt_publication_documents($entity) {
  $node_wrapper = entity_metadata_wrapper($entity['entity_type'], $entity['entity']);
  if (isset($node_wrapper->field_publication_collection)) {
    $type = $node_wrapper->field_publication_collection->value();
    if ($type == "1") {
      // "1" == Collection.
      return views_embed_view('publications', 'block_1');
    }
  }
}

/**
 * Helper returning a list of links to publications of type collection.
 *
 * @return string
 *   The rendered view.
 */
function _dt_publication_collections() {
  if ($node = menu_get_object('node')) {
    $node_wrapper = entity_metadata_wrapper('node', $node);
    if (isset($node_wrapper->field_publication_collection)) {
      $type = $node_wrapper->field_publication_collection->value();
      if ($type == "0") {
        // "0" == Publication.
        return views_embed_view('publication_collections', 'block');
      }
    }
  }
}
