<?php
/**
 * @file
 * Code for the Announcement feature.
 */

include_once 'dt_announcement.features.inc';
include_once 'dt_announcement.ds_fields.inc';

/**
 * Implements hook_theme().
 */
function dt_announcement_theme($existing, $type, $theme, $path) {
  return [
    'dt_announcement_announcement_block' => [
      'template' => 'dt_announcement_announcement_block',
      'path' => drupal_get_path('module', 'dt_announcement') . '/templates',
      'variables' => [
        'heading' => '',
        'news_items' => '',
        'social_links' => '',
      ],
    ],
  ];
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Alters the output of the announcements page exposed form to remove the fields
 * that we use to filter.
 */
function dt_announcement_form_views_exposed_form_alter(&$form, &$form_state, $form_id) {
  // Only apply it to the announcements page.
  if ($form['#id'] == 'views-exposed-form-announcements-page-1') {

    // List of fields we should disable. These fields are used to filter by
    // query parameter. As these are filterd by id, they are of no use for the
    // end user.
    $fields_to_disable = array(
      'persons',
      'announcement',
      'policies',
      'priorities',
      'pri_policy_areas',
      'topics',
      'pages',
    );

    // Fix the fields by setting #access to false. We hide these fields because
    // the end user should not manually filter on these. Also, if we would
    // really expose them, we would have to create the data to be in them and
    // that would require alot more database load.
    foreach ($fields_to_disable as $field) {
      if (isset($form['#info']['filter-field_core_' . $field . '_target_id'])) {
        $form[$field]['#attributes']['class'][] = 'hidden';
        $form['#info']['filter-field_core_' . $field . '_target_id']['label'] = '';
      }
    }
  }
}

/**
 * Implements hook_views_pre_render().
 *
 * Adds token support for see more views blocks.
 * You can use [node_title] in the read more text to have it replaced by the
 * node title.
 */
function dt_announcement_views_pre_render(&$view) {
  $custom_readmore = FALSE;
  // List of views that use this logic:
  $view_announcements_blocks = array(
    'latest_block',
    'block',
  );

  // Initialize button text as empty to avoid bug reported on NEXTEUROPA-7227.
  $alter_button_text = '';

  // Overwrite the no result behavior if its not the front page.
  if ($view->name == 'announcements' && $view->current_display == 'latest_block' && !drupal_is_front_page()) {
    // If it has a specific empty handler we define our custom.
    if (isset($view->display_handler->handlers['empty'])) {
      // Remove the default handlers.
      unset($view->display_handler->handlers['empty']);
      unset($view->display_handler->options['empty']);
      // Replace by our no related text.
      $view->display_handler->options['empty']['area']['id'] = 'area';
      $view->display_handler->options['empty']['area']['table'] = 'views';
      $view->display_handler->options['empty']['area']['field'] = 'area';
      $view->display_handler->options['empty']['area']['empty'] = TRUE;
      $view->display_handler->options['empty']['area']['content'] = 'No related news.';
      $view->display_handler->options['empty']['area']['format'] = 'full_html';
    }
  }

  // On the listing, we alter the read more text to include our node title.
  if ($view->name == 'announcements' && in_array($view->current_display, $view_announcements_blocks)) {

    // Disable the read more button, because we have defined our own
    // replacement, we first have to make sure that we can replace it.
    $view->display_handler->default_display->options['use_more'] = 0;
    $view->display[$view->current_display]->handler->options['use_more'] = 0;

    // If we have substitutions, we alter the button.
    if (!empty($view->build_info['substitutions']['%1'])) {
      // Inintialize our node id.
      $nid = $view->args[0];
      // Get our node type.
      $entity_type = _dt_announcement_get_node_type($nid);
      // More link button will always be visible, but depending on a few
      // conditions the default button text will be different see
      // NEXTEUROPA-6727. We provide a default text value.
      // Custom logic for the front page.
      if (drupal_is_front_page()) {
        $alter_button_text = t('All news');
        $view->display[$view->current_display]->handler->options['use_more'] = 1;
      }
      elseif (!drupal_is_front_page() && (int) count($view->result) >= 1) {
        // Enable the button.
        $view->display[$view->current_display]->handler->options['use_more'] = 1;
        // Tokenize, resolved contextual filter check.
        // Inintialize our read more text variable.
        $read_more_text = $view->display[$view->current_display]->handler->options['use_more_text'];
        // Get our variable.
        if ($variable_read_more_text = variable_get('dt_announcement_read_more__' . $entity_type, FALSE)) {
          $custom_readmore = TRUE;
        }

        // Our replacement array.
        $replacement_array = array(
          'token' => array(
            '[node_title]',
            '[abbreviation]',
          ),
          'replacement' => array(
            $view->build_info['substitutions']['%1'],
            strpos($variable_read_more_text, '[abbreviation]') ? _dt_announcement_get_abbreviation($nid) : '',
          ),
        );

        if ($custom_readmore) {
          // Modify the output.
          $alter_button_text = str_replace(
            $replacement_array['token'],
            $replacement_array['replacement'],
            $variable_read_more_text
          );
        }
        else {
          // Use the default.
          $alter_button_text = str_replace($replacement_array['token'], $replacement_array['replacement'], $read_more_text);
        }
      }
      // Alter the output to our custom text.
      $view->display[$view->current_display]->handler->options['use_more_text'] = $alter_button_text;

      // Get our node type. And then call to our dt function.
      $fields_to_join = _dt_announcement_get_content_reference_fields($entity_type);

      // Construct our url. This will add the query parameters to our url build.
      foreach ($fields_to_join as $field) {
        $url_query[str_replace('field_core_', '', $field['name'])] = $nid;
      }

      // Construct the url. This will use the $url_query defined above and does
      // support multiple values.
      $url = url(
        'announcements',
        array(
          'query' => isset($url_query) ? $url_query : array(),
        )
      );

      // Update the url of our link to the new one. We also need to alter our
      // tpl file for this, because by default it only supports text.
      $view->display[$view->current_display]->handler->options['link_url'] = $url;
    }
  }
}

/**
 * Implements hook_views_query_alter().
 *
 * This query alteration will check if we are displaying the latest block. If we
 * do, then we get the argument node type, and all reference fields using this
 * node type.
 * For each field we have, we create a join to fetch the node id's. The sorting
 * used in views will be respected. We do however remove the contextual filter
 * as we do not want to filter on that in this case.
 */
function dt_announcement_views_query_alter(&$view, &$query) {
  // Set our conditional. We predefine them both because we need them in
  // seperate places. One for the block and one for the page.
  $is_announcement_block = ($view->name == 'announcements' && $view->current_display == 'latest_block');
  $is_announcement_page = ($view->name == 'announcements' && $view->current_display == 'page_1');

  // If it is the page. We need to create our facet.
  if ($is_announcement_page) {
    // Get our Query parameters. Here we use an exclude array because on an ajax
    // request we always have every parameter. And we try to keep the amount of
    // node_load() calls to a minimum.
    $exclude = array(
      'department',
      'combine',
      'type',
      'date_before',
      'date_after',
      'q',
    );
    // Now get our query parameters without the elements above.
    $query_parameters = drupal_get_query_parameters(NULL, $exclude);
    // Loop our exposed input fields. We go over them all and check if it is in
    // our query parameters. If so, then we check if the value corresponds and
    // only then we load the node and set the facet.
    foreach ($view->exposed_input as $filter => $value) {
      // If the filters are exact. As the filters (when filtering by id), do not
      // hold any information we must load the node itself. We do this by
      // checking if any exposed id corresponds to our query parameters, only
      // when we have a match, we load the node and add the custom filter.
      if (isset($query_parameters[$filter]) && $query_parameters[$filter] == $value) {
        // Check if we can load the node.
        if ($node = node_load($value)) {
          // Add our custom filter to the view object.
          if ($node->type == "basic_page") {
            $node->type = "page";
          }
          $view->custom_filters[ucfirst($node->type)] = $node->title;
        }
      }
    }
  }

  // Check if its the correct type and if the argument is set.
  if ($is_announcement_block && !empty($view->args[0])) {
    // First we use a simple query to get our node type using just the node id.
    // After that, we pass the node type to our helper function, which will
    // return all the entity reference fields in this content type in a certain
    // field group. This to avoid overcomplex joins or fetching data we, in the
    // end not need.
    $entity_type = _dt_announcement_get_node_type($view->args[0]);
    $fields_to_join = _dt_announcement_get_content_reference_fields($entity_type);

    // Only apply our logic if we have fields to join.
    if (!empty($fields_to_join)) {

      // Remove our base condition.
      unset($query->where[0]['conditions'][0]);

      // Our "or" group.
      $db_or = db_or();

      // Loop our result and add the join.
      foreach ($fields_to_join as $key => $value) {

        // Alias.
        $alias = $entity_type . '_node_' . $key;

        // Create the join object.
        $join_query = new views_join();
        $join_query->table = $value['data'];
        $join_query->field = 'entity_id';
        $join_query->left_table = 'node';
        $join_query->left_field = 'nid';
        $join_query->type = 'LEFT';

        // Add it to our query.
        $query->add_relationship(
          $alias,
          $join_query,
          'node'
        );

        // Add our conditions.
        $db_or->condition(
          $alias . '.' . $value['name'] . '_target_id',
          $view->args[0]
        );

      }

      // Add our or conditional.
      // Add the where condition, to filter our nodes.
      $query->add_where(
        'OR',
        $db_or
      );

    }
  }
}

/**
 * Helper function to get the available entity reference fields.
 *
 * This function get's all entity reference fields that reference the content
 * type and are available on the announcement content type.
 */
function _dt_announcement_get_content_reference_fields($entity_type) {
  // Inintialize variables.
  $field_join_list = array();
  $counter = 0;

  // Get our cached ctools export object. We use the field_group function for
  // this at it gives us a clean response.
  $field_group = field_group_load_field_group('group_announcement_related', 'node', 'announcement', 'form');

  // Get the full list of entity reference fields.
  $available_fields = field_info_fields();

  // Loop all the available fields.
  foreach ($available_fields as $field_name => $field_data) {
    // Check only entityreference fields.
    if ($field_data['type'] == 'entityreference') {
      // And those that target our node type.
      if (!empty($field_data['settings']['handler_settings']['target_bundles'][$entity_type])) {
        // Then if they are in our group, we include them.
        if (in_array($field_name, $field_group->children)) {
          // Add the data to our array.
          $field_join_list[$counter]['data'] = 'field_data_' . $field_name;
          $field_join_list[$counter]['name'] = $field_name;
          $counter++;
        }
      }
    }
  }

  // Return the data we have.
  return $field_join_list;
}

/**
 * Helper function to get the abbreviation from a node.
 */
function _dt_announcement_get_abbreviation($nid) {
  if ($node = node_load($nid)) {
    $emw = entity_metadata_wrapper('node', $node);
    if (isset($emw->field_core_abbreviation)) {
      return $emw->field_core_abbreviation->value();
    }
  }
  return FALSE;
}

/**
 * Helper function to get the node type.
 *
 * Simple database query to get the node type from a node id. We do it this way
 * because now we can avoid a heavy node_load.
 */
function _dt_announcement_get_node_type($nid) {
  return db_query("SELECT type FROM {node} WHERE nid=:nid",
    array(':nid' => $nid))->fetchField();
}
