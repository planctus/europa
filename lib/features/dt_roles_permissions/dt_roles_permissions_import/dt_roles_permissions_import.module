<?php
/**
 * @file
 * Dt_roles_permissions export functionality.
 */

/**
 * Implements hook_menu().
 */
function dt_roles_permissions_import_menu() {
  $items = array();

  $items['admin/people/permissions/dt_roles_permissions_import'] = array(
    'access arguments' => array('administer site configuration'),
    'description' => 'Import permissions',
    'file' => 'dt_roles_permissions_import.admin.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dt_roles_permissions_import_page'),
    'title' => 'Permission import',
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Helper function to get a list to import and write it to the database.
 *
 * @param string|stdclass $role
 *   Can be either a string or object of roles.
 * @param bool $force
 *   True/False if we should force the import.
 *
 * @return bool
 *   True/false on success/failure.
 */
function _dt_roles_permissions_import_import($role, $force = FALSE) {
  // If the role is a string, we can check here if we can match it.
  if (!in_array($role, array('all', 'clear')) && !is_object($role)) {
    if ($role_id = array_search($role, user_roles())) {
      // If we have a matching role, we can assign it.
      $role = user_role_load($role_id);
    }
  }
  // List of available permissions.
  $modules_permissions = array_keys(user_permission_get_modules());
  // Initialize our permissions array.
  $permissions = array();
  // If our role is an object, then its singular.
  if (is_object($role)) {
    // Include the file containing the array.
    include_once _dt_roles_permissions_get_file_dir($role->name);
    // Revoke them if we force.
    if ($force) {
      user_role_revoke_permissions($role->rid, $modules_permissions);
    }
    // Don't import if we dont have permissions, unless we force it.
    if (!empty($permissions[$role->name])) {
      // Get only the permissions that we can give and are available.
      $permissions_to_grant = array_intersect($permissions[$role->name], $modules_permissions);
      // Grant the new permissions.
      user_role_grant_permissions($role->rid, $permissions_to_grant);
      return TRUE;
    }
  }
  elseif ($role == 'all') {
    foreach (_dt_roles_permissions_import_get_importable() as $key => $name) {
      // Load the role object.
      $role_object = user_role_load($key);
      // Include the file containing the array. ($permissions).
      include_once _dt_roles_permissions_get_file_dir($role_object->name);
      // Revoke them if we force.
      if ($force) {
        user_role_revoke_permissions($role_object->rid, $modules_permissions);
      }
      // Don't import if we dont have permissions, unless we force it.
      if (!empty($permissions[$role_object->name])) {
        // Get only the permissions that we can give (those available in the
        // site).
        $permissions_to_grant = array_intersect($permissions[$role_object->name], $modules_permissions);
        // Grant the new permissions.
        user_role_grant_permissions($role_object->rid, $permissions_to_grant);
        drupal_set_message(t('Permissions for %role have been reconfigured', array('%role' => $role_object->name)));
      }
      else {
        // Somehow the table was empty.
        drupal_set_message(t('Permissions for %role have not been reconfigured as the import file was empty.', array('%role' => $role_object->name)), 'warning');
      }
    }
    return TRUE;
  }
  elseif ($role == 'clear' && $force) {
    foreach (_dt_roles_permissions_import_get_importable() as $key => $name) {
      // Load the role object.
      $role_object = user_role_load($key);
      // Remove all rights.
      user_role_revoke_permissions($role_object->rid, $modules_permissions);
    }
    return TRUE;
  }
  return FALSE;
}

/**
 * Helper function to get the diff for a specific role.
 *
 * @param mixed $role
 *   The role to get the diff for. Object for specific, All for all.
 */
function _dt_roles_permissions_import_get_diff($role) {
  // List of available permissions.
  $modules_permissions = array_keys(user_permission_get_modules());

  if (is_object($role)) {
    // Get the current permissions.
    $current_permissions = user_role_permissions(array($role->rid => $role->name));
    // Load the new ones.
    include_once _dt_roles_permissions_get_file_dir($role->name);
    // See which ones are available.
    $permissions_to_grant = array_intersect($permissions[$role->name], $modules_permissions);

    // Make the arrays the same.
    $current_permissions = array_keys(reset($current_permissions));
    $permissions_to_grant = array_keys(array_flip($permissions_to_grant));

    // Our diff results.
    $to_be_revoked = array_diff($current_permissions, $permissions_to_grant);
    $to_be_granted = array_diff($permissions_to_grant, $current_permissions);

    _dt_roles_permissions_import_show_diff($role->name, $to_be_granted, $to_be_revoked);
  }
  elseif ($role == 'all') {
    foreach (_dt_roles_permissions_import_get_importable() as $key => $name) {
      // Get the current permissions.
      $current_permissions = user_role_permissions(array($key => $name));
      // Load the new ones.
      include_once _dt_roles_permissions_get_file_dir($name);
      // See which ones are available.
      $permissions_to_grant = array_intersect($permissions[$name], $modules_permissions);

      // Make the arrays the same.
      $current_permissions = array_keys(reset($current_permissions));
      $permissions_to_grant = array_keys(array_flip($permissions_to_grant));

      // Our diff results.
      $to_be_revoked = array_diff($current_permissions, $permissions_to_grant);
      $to_be_granted = array_diff($permissions_to_grant, $current_permissions);

      _dt_roles_permissions_import_show_diff($name, $to_be_granted, $to_be_revoked);
    }
  }
}

/**
 * Helper function to show the diff message.
 *
 * @param string $name
 *   The name of the role.
 * @param array $to_be_granted
 *   List of permissions that will be granted.
 * @param array $to_be_revoked
 *   List of permissions that will be revoked.
 */
function _dt_roles_permissions_import_show_diff($name, $to_be_granted = array(), $to_be_revoked = array()) {
  // Init our message.
  $message = 'The following actions will be taken upon importing <strong>' . $name . '</strong>: <br />';
  // New permissions.
  if (!empty($to_be_granted)) {
    $message .= 'The following permissions will be granted: <br />';
    foreach ($to_be_granted as $name) {
      $message .= '<strong>--' . $name . '</strong><br />';
    }
  }
  // Revoked permissions.
  if (!empty($to_be_revoked)) {
    $message .= 'The following permissions will be revoked: <br />';
    foreach ($to_be_revoked as $name) {
      $message .= '<strong>--' . $name . '</strong><br />';
    }
  }
  // If there is no diff.
  if (empty($to_be_granted) && empty($to_be_revoked)) {
    $message .= '<strong>No permissions will be revoked or added.</strong>';
  }
  // Show the message. Lets not pass this one with t().
  drupal_set_message($message);
}

/**
 * Helper function to get the available import files as an $id => $name array.
 *
 * @return array
 *   List of roles.
 */
function _dt_roles_permissions_import_get_importable() {
  // Get our default roles that are available on the site.
  $roles_array = user_roles();
  // Check which import file are available. If it is not available exclude it
  // from the import list.
  foreach ($roles_array as $rid => $role) {
    if (!file_exists(_dt_roles_permissions_get_file_dir($role))) {
      unset($roles_array[$rid]);
    }
  }
  return $roles_array;
}
