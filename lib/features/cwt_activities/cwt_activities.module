<?php
/**
 * @file
 * Code for the CWT Activities feature.
 */

include_once 'cwt_activities.features.inc';

define('CWT_ACTIVITIES_PRINT_PDF_TOKEN', '%print_pdf_link%');

/**
 * Implements hook_form_alter().
 */
function cwt_activities_form_alter(&$form, &$form_state, $form_id) {
  // Hide the body field of Activities. It was requested to temporarily disable
  // this instead of removing it, so we can easily re-enable it in the future
  // without  potentially losing data.
  // @see https://webgate.ec.europa.eu/CITnet/jira/browse/CWT-190
  if ($form_id == 'activities_node_form') {
    $form['body']['#access'] = FALSE;
  }

  // Calendar exposed filter.
  if (in_array($form['#id'], array('views-exposed-form-agenda-list', 'views-exposed-form-agenda-print-list')) && $original_path_cached = &drupal_static('cwt_core_orignal_path')) {
    // Rewrite for action URL to original URL @see cwt_core_url_inbound_alter().
    $form['#action'] = url($original_path_cached['original_path'], array('absolute' => TRUE));
    $form['date_filter_min']['value']['#attributes']['placeholder'] = t('Choose a date');
    $form['date_filter_max']['value']['#attributes']['placeholder'] = t('Choose a date');

    // Mark filter as validated to avoid Views illegal choice bug.
    $form['field_editorial_section_multiple_tid']['#validated'] = TRUE;
    // Add custom submit handler to handle optional end date.
    $form['#submit'][0] = 'cwt_activities_exposed_submit';
  }
}

/**
 * Submit handler for exposed filters.
 */
function cwt_activities_exposed_submit(&$form, &$form_state) {
  // Modify the default views reset target.
  if (!empty($form_state['values']['op']) && $form_state['values']['op'] == $form_state['view']->exposed_input['op']) {
    drupal_goto($form['#action']);
  }

  // And pass this along to Views.
  views_exposed_form_submit($form, $form_state);
}

/**
 * Implements hook_views_query_alter().
 *
 * If start date exposed filter is empty, will only display calendar items from
 * the current date forward.
 */
function cwt_activities_views_query_alter(&$view, &$query) {
  if ($view->name == 'agenda' && empty($view->exposed_raw_input['date_filter_min']['value'])) {
    // If start date field value is empty, adds to the query view the condition
    // to return all items from now forward.
    $date = date($view->filter['field_start_end_date_value2']->format, time());
    $query->add_where(0, 'field_data_field_start_end_date.field_start_end_date_value2', $date, '>=');
  }
}

/**
 * Implements hook_views_pre_view().
 */
function cwt_activities_views_pre_view(&$view, &$display_id, &$args) {
  // Modify the view with the start/end date.
  if ($display_id == 'moderate_all_page' && $view->name == 'workbench_moderation') {
    $options = [
      'format_type' => 'long',
      'fromto' => 'both',
      'multiple_number' => '',
      'multiple_from' => '',
      'multiple_to' => '',
      'show_remaining_days' => 0,
      'relationship' => 'nid',
    ];
    $view->add_item($view->current_display, 'field', 'field_data_field_start_end_date', 'field_start_end_date', $options, 'field_start_end_date');
    return;
  }

  if ($view->name == 'agenda' && $original_path_cached = &drupal_static('cwt_core_orignal_path') && isset($original_path_cached['nid'])) {
    // Load node the Calendar belongs to in the first place.
    // Use its editorial section in first contextual filter.
    $node = node_load($original_path_cached['nid']);
    $wrapper = entity_metadata_wrapper('node', $node);
    $editorial_section = $wrapper->field_editorial_section->value();
    if (!empty($editorial_section)) {
      // Limit allowed sections to children of the selected editorial section.
      // So in exposed filter only these values are available.
      $allowed_terms = taxonomy_get_children($editorial_section->tid);
      $allowed_values = array();
      foreach ($allowed_terms as $term) {
        $allowed_values[$term->tid] = $term->tid;
      }
      $view->display['default']->handler->options['filters']['field_editorial_section_multiple_tid']['value'] = $allowed_values;
      $view->args[0] = $editorial_section->tid;
    }
  }
}

/**
 * Implements hook_views_pre_render().
 */
function cwt_activities_views_pre_render(&$view) {

  if ($view->current_display == 'moderate_all_page' && $view->name == 'workbench_moderation') {
    // First get the keys.
    $keys = array_keys($view->field);
    $first_key = array_shift(array_slice($keys, 0, 1)); ;
    $last_key = end($keys);

    // Store the values.
    $first_item = $view->field[$first_key];
    unset($view->field[$first_key]);
    $last_item = $view->field[$last_key];
    unset($view->field[$last_key]);

    // Put them in place.
    $view->field = [$last_key => $last_item] + $view->field + [$first_key => $first_item];
    return;
  }
  if ($view->name == 'agenda') {
    // Adds the print PDF link to the views header.
    if (isset($view->header['area_text_custom']->options['content'])) {
      $header_content = $view->header['area_text_custom']->options['content'];
      if (FALSE !== strpos($header_content, CWT_ACTIVITIES_PRINT_PDF_TOKEN)) {
        $full_query_parameters = drupal_get_query_parameters(NULL, []);
        $print_path = 'print-' . $full_query_parameters['q'];
        unset($full_query_parameters['q']);

        $pdf_link_prefix = '<span class="rss-link__icon icon-social icon-social--print"></span><span class="rss-link__text">';
        $pdf_link_suffix = '</span>';
        $pdf_link_options = array(
          'query' => $full_query_parameters,
          'html' => TRUE,
          'attributes' => array('rel' => 'nofollow'),
        );

        $print_pdf_link = l($pdf_link_prefix . t('Print these calendar items') . $pdf_link_suffix, '/printpdf/' . $print_path, $pdf_link_options);

        $view->header['area_text_custom']->options['content'] = str_replace(CWT_ACTIVITIES_PRINT_PDF_TOKEN, $print_pdf_link, $header_content);
      }
    }

    // If the term is available, we create an extra view object we later parse
    // in the template.
    if (isset($view->exposed_input['field_editorial_section_multiple_tid'])) {
      $term = taxonomy_term_load($view->exposed_input['field_editorial_section_multiple_tid']);
      $token = !$term ? '' : (' ' . t('for %commissioner', array('%commissioner' => $term->name)));
      $view->items_count['#suffix'] = $token;
    }
  }
}

/**
 * Implements hook_print_pdf_filename_alter().
 *
 * Alters the PDF filename.
 */
function cwt_activities_print_pdf_filename_alter(&$pdf_filename, &$path) {
  if (strpos($path, 'print-calendar') !== FALSE) {
    $filename = variable_get('site_name', 'European Commission') . ' ' . t('Calendar') . ' ' . format_date(time(), 'ec_date_j_f_y');
    $pdf_filename = transliteration_clean_filename($filename);
  }

}

/**
 * Implements hook_node_view().
 *
 * We manipulate the legacy link so that the node links to the external url.
 */
function cwt_activities_node_view($node, $view_mode, $langcode) {
  // Check if the node has a link.
  if ($view_mode == 'teaser' && $node->type == 'activities') {
    if (!empty($node->field_activity_link)) {
      $wrapper = entity_metadata_wrapper('node', $node);
      $node->legacy = $wrapper->field_activity_link->url->value();
    }
    else {
      $node->hidelink = TRUE;
    }
  }
}

/**
 * Implements hook_ds_fields_info().
 */
function cwt_activities_ds_fields_info($entity_type) {
  $fields = array();

  $fields['agenda_with_who'] = array(
    'title' => t('Calendar with who'),
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'function' => '_cwt_activities_ds_fields_agenda_withwho',
  );

  return array('node' => $fields);
}

/**
 * Custom function for single token replacement in a field.
 */
function _cwt_activities_ds_fields_agenda_withwho($field) {
  if (isset($field['entity']) && isset($field['entity']->field_editorial_section_multiple)) {
    $wrapper = entity_metadata_wrapper('node', $field['entity']);
    $editorial_sections = $wrapper->field_editorial_section_multiple->value();
    if (!empty($editorial_sections)) {
      // Init our variable.
      $editorial_section_list = NULL;
      // Loop over the list.
      foreach ($editorial_sections as $editorial_section) {
        $editorial_section_list .= $editorial_section->name . ', ';
      }

      // Return the data.
      return rtrim($editorial_section_list, ', ');
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function cwt_activities_preprocess_page(&$variables) {
  $variables['field_core_introduction'] = [
    '#markup' => t('<p>Activities of Members of the European Commission</p>') . t('<p>Subject to changes during the week</p>'),
  ];
}
