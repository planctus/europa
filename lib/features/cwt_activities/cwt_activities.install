<?php

/**
 * @file
 * Install, update and uninstall functions for the cwt_activities module.
 *
 * @see https://webgate.ec.europa.eu
 * /CITnet/confluence/display/MULTISITE/Custom+features
 */

/**
 * Implements hook_install().
 */
function cwt_activities_install() {
  // Migrating calendar item types.
  _cwt_activities_migrate_calendar_item_types();
}

/**
 * Implements hook_enable().
 */
function cwt_activities_enable() {
  drupal_set_message(t('CWT Activities feature is now active on your site.'));
}

/**
 * Implements hook_disable().
 */
function cwt_activities_disable() {
  drupal_set_message(t('CWT Activities feature is now inactive on your site.'));
}

/**
 * Update Calendar start/end date field granularity to support time input.
 */
function cwt_activities_update_7101() {
  // Update field_start_end_date settings.
  $field_name = 'field_start_end_date';
  $field = field_info_field($field_name);
  $field['settings']['granularity']['hour'] = 'hour';
  $field['settings']['granularity']['minute'] = 'minute';
  field_update_field($field);
}

/**
 * Revert the feature to delete field editorial section.
 */
function cwt_activities_update_7102() {
  features_revert_module('cwt_activities');
  if ($instance = field_info_instance('node', 'field_editorial_section', 'activities')) {
    field_delete_instance($instance);
  }
}

/**
 * Revert the feature to delete field team priorities.
 */
function cwt_activities_update_7103() {
  if ($instance = field_info_instance('node', 'field_team_priorities', 'activities')) {
    field_delete_instance($instance);
  }
}

/**
 * Convert datetime to datestamp fields.
 *
 * Adding terms to the calendar item types. (7104)
 */
function cwt_activities_update_7105() {
  // Make sure that destination vocabularies exists.
  features_revert(['cwt_activities' => ['taxonomy']]);
  _cwt_activities_migrate_calendar_item_types();

  $fields = [
    'field_start_end_date',
  ];

  foreach ($fields as $field) {
    $tables = ['field_data_' . $field, 'field_revision_' . $field];
    $column_name = $field . '_value';

    // Temporary data.
    $param = [
      'type' => 'int',
      'not null' => TRUE,
      'default' => 0,
    ];

    // Update base and revision.
    foreach ($tables as $table) {
      // Add the field.
      db_add_field($table, $column_name . '_temp', $param);
      // Convert the data.
      db_update($table)->expression($column_name . '_temp', "UNIX_TIMESTAMP($column_name)")->execute();
      // Drop the table.
      db_drop_field($table, $column_name);
      // Rename the updated column.
      db_change_field($table, $column_name . '_temp', $column_name, ['type' => 'int']);
    }

    // Change info in the database.
    db_update('field_config')->fields(['type' => 'datestamp'])->condition('field_name', $field)->execute();
  }
  field_cache_clear();
  // Revert the feature.
  features_revert(['dt_core']);
}

/**
 * DTTSB-990: cwt_activities_update_7105 for _value2 of date with range.
 */
function cwt_activities_update_7106() {
  $fields = [
    'field_start_end_date',
  ];

  foreach ($fields as $field) {
    $tables = ['field_data_' . $field, 'field_revision_' . $field];
    $column_name = $field . '_value2';

    // Temporary data.
    $param = [
      'type' => 'int',
      'not null' => TRUE,
      'default' => 0,
    ];

    // Update base and revision.
    foreach ($tables as $table) {
      // Add the field.
      db_add_field($table, $column_name . '_temp', $param);
      // Convert the data.
      db_update($table)->expression($column_name . '_temp', "UNIX_TIMESTAMP($column_name)")->execute();
      // Drop the table.
      db_drop_field($table, $column_name);
      // Rename the updated column.
      db_change_field($table, $column_name . '_temp', $column_name, ['type' => 'int']);
    }

    // Change info in the database.
    db_update('field_config')->fields(['type' => 'datestamp'])->condition('field_name', $field)->execute();
  }
  field_cache_clear();
  // Revert the feature.
  features_revert(['cwt_activities']);
}
