<?php
/**
 * @file
 * Code for the DT Policy input feature.
 */

include_once 'dt_event.features.inc';

// Include our helpers.
module_load_include('inc', 'dt_event', 'dt_event.helpers');
module_load_include('inc', 'dt_event', 'dt_event.ds_fields');

// Constansts that can be used.
define('DT_EVENT_STATE_FUTURE', 1);
define('DT_EVENT_STATE_ONGOING', 2);
define('DT_EVENT_STATE_PAST', 3);
define('DT_EVENT_STATE_CANCELLED', 4);
define('DT_EVENT_STATE_RESCHEDULED', 5);
// Live stream states.
define('DT_EVENT_LIVE_STREAM_NONE', 0);
define('DT_EVENT_LIVE_STREAM_FUTURE', 1);
define('DT_EVENT_LIVE_STREAM_ONGOING', 2);
define('DT_EVENT_LIVE_STREAM_END', 3);

/**
 * Implements hook_entity_load().
 */
function dt_event_entity_load($entities, $type) {
  if ($type == 'node') {
    foreach ($entities as &$entity) {
      if ($entity->type == 'event') {
        _dt_event_entity_add_status_property($entity);
      }
    }
  }
}

/**
 * Implements hook_entitycache_ENTITY_TYPE_load().
 */
function dt_event_entitycache_node_load($entities) {
  foreach ($entities as &$entity) {
    if ($entity->type == 'event') {
      // Force the adding of the status property.
      _dt_event_entity_add_status_property($entity);
    }
  }
}

/**
 * Implements hook_dt_shared_functions_facet_block_alter().
 */
function dt_event_dt_shared_functions_facet_block_alter(&$block, $block_identifier) {
  // Based on the block idetnifier we change the title.
  switch ($block_identifier) {
    case 'field_core_location:country':
      $block_title = t('Country');
      break;

    case 'field_event_type':
      $block_title = t('Event type');
      break;

    case 'field_core_departments':
      $block_title = t('Organizing department');
      break;

    case 'field_core_topics':
      $block_title = t('Topic');
      break;

    case 'field_event_is_online':
    case 'field_event_is_live_streaming':
      $block_title = '<none>';
      break;
  }

  // Modify block title if it's set.
  if (isset($block_title)) {
    $block['title'] = $block_title;
  }
}

/**
 * Implements hook_entity_view_mode_alter().
 */
function dt_event_entity_view_mode_alter(&$view_mode, $context) {
  // Only attempt to change the view mode if it is full, as we never want to
  // change the view mode on a teaser by accident.
  if (isset($context['entity']->type) && $context['entity']->type == 'event' && $view_mode == 'full') {
    // If it is a collection.
    if ($context['entity']->field_event_collection['und'][0]['value'] == 1) {
      $view_mode = 'event_collection';
      return;
    }

    // If we have an event status. And the event is past.
    if (isset($context['entity']->event_status) && $context['entity']->event_status == DT_EVENT_STATE_PAST) {
      $view_mode = 'event_past';
      return;
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Here we add extra modifiers to the file markup.
 */
function dt_event_preprocess_file_entity(&$variables) {
  // Make sure we only do this for event entity's.
  if (isset($variables['entity']) && $variables['entity']->type == 'event') {
    // Also add the file modifier.
    $variables['classes_array'][] = 'file--condensed';

    // We define the wrapper once and apply it when we need it.
    $caption_wrapper = [
      '#prefix' => '<div class="file__caption">',
      '#suffix' => '</div>',
    ];

    if ($variables['type'] == 'video') {
      // If it is a video, we have to apply additional modifiers.
      $variables['classes_array'][] = 'file-video--withbackground';
      // Also add the description to the content render array.
      if (isset($variables['content']['field_video_description'])) {
        $variables['content']['field_video_description']['#label_display'] = 'hidden';
        $variables['content']['field_video_description'] += $caption_wrapper;
      }
    }
    // Add the BEM wrapper.
    if (isset($variables['content']['field_caption'])) {
      $variables['content']['field_caption'] += $caption_wrapper;
    }
  }
}

/**
 * Implements hook_views_pre_render().
 *
 * Here we will replace the %all_events_link token in the views header config.
 */
function dt_event_views_pre_render(&$view) {
  // Replace the link token with the link.
  if ($view->name == 'related_events' && isset($view->args[0]) && $view->current_display == 'block') {
    if (FALSE !== strpos($view->header['area_text_custom']->options['content'], '%all_events_link')) {
      // @todo: Instead of using /events, get the view and return the path of it.
      $link = l(t('All events'), '/events');
      $view->header['area_text_custom']->options['content'] = str_replace('%all_events_link', $link, $view->header['area_text_custom']->options['content']);
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Here we will wrap the view header with our required markup. We do it here to
 * avoid to much markup in the translation table.
 */
function dt_event_preprocess_views_view(&$variables) {
  $markup = [
    '#markup' => $variables['header'],
    '#prefix' => '<section class="text-small section section--force-bottom">',
    '#suffix' => '</section>',
  ];

  $variables['header'] = drupal_render($markup);
}

/**
 * Implements hook_views_query_alter().
 *
 * In this query alter we ensure that we exclude the argument event from the
 * query. This would cause infinte loop.
 */
function dt_event_views_query_alter(&$view, &$query) {
  if ($view->name == 'related_events' && isset($view->args[0]) && $view->current_display == 'block') {
    // Make sure that we dont include the current child event.
    $query->add_where(0, 'node_field_data_field_event_children_events.nid', $view->args[0], '<>');
  }
}

/**
 * Implements hook_date_format_types().
 */
function dt_event_date_format_types() {
  return array(
    'dt_event'  => t('Event date'),
    'dt_past_event'  => t('Past event date'),
  );
}

/**
 * Implements hook_date_formats().
 */
function dt_event_date_formats() {
  $formats = array();

  $formats[] = array(
    'type'    => 'dt_event',
    'format'  => 'l j F',
    'locales' => array(),
  );

  $formats[] = array(
    'type'    => 'dt_past_event',
    'format'  => 'j F Y',
    'locales' => array(),
  );

  foreach ($formats as $key => $format) {
    variable_set('date_format_' . $format['type'], $format['format']);
  }

  return $formats;
}

/**
 * Implements hook_facet_items_alter().
 */
function dt_event_facet_items_alter(&$build, &$settings) {
  switch ($settings->facet) {
    case 'field_event_is_online':
      $settings->settings['hide_facet_count'] = 1;

      foreach ($build as $key => $item) {
        if ($item["#markup"] == 'yes') {
          $build[$key]["#markup"] = t('Online events only');
          $build[$key]['#count'] = NULL;
        }
      }
      break;

    case 'field_event_is_live_streaming':
      $settings->settings['hide_facet_count'] = 1;

      foreach ($build as $key => $item) {
        if ($item["#markup"] == 'yes') {
          $build[$key]["#markup"] = t('Online events with live streaming available');
          $build[$key]['#count'] = NULL;
        }
      }
      break;
  }
}
