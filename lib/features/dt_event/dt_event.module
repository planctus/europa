<?php

/**
 * @file
 * Code for the DT Policy input feature.
 */

include_once 'dt_event.features.inc';

// Include our helpers.
module_load_include('inc', 'dt_event', 'dt_event.helpers');
module_load_include('inc', 'dt_event', 'dt_event.ds_fields');

// Constants that can be used.
define('DT_EVENT_STATE_FUTURE', 1);
define('DT_EVENT_STATE_ONGOING', 2);
define('DT_EVENT_STATE_PAST', 3);
define('DT_EVENT_STATE_CANCELLED', 4);
// Live stream states.
define('DT_EVENT_LIVE_STREAM_NONE', 0);
define('DT_EVENT_LIVE_STREAM_FUTURE', 1);
define('DT_EVENT_LIVE_STREAM_ONGOING', 2);
define('DT_EVENT_LIVE_STREAM_END', 3);

// Other constants.
define('DT_EVENT_LIVE_PATH_REGEX', '/\/live(_[a-zA-Z]{2}|\/$|$)/');

/**
 * Implements hook_entity_load().
 */
function dt_event_entity_load($entities, $type) {
  if ($type == 'node') {
    foreach ($entities as &$entity) {
      if ($entity->type == 'event') {
        _dt_event_entity_add_status_property($entity);
      }
    }
  }
}

/**
 * Implements hook_entitycache_ENTITY_TYPE_load().
 */
function dt_event_entitycache_node_load($entities) {
  foreach ($entities as &$entity) {
    if ($entity->type == 'event') {
      // Force the adding of the status property.
      _dt_event_entity_add_status_property($entity);
    }
  }
}

/**
 * Implements hook_dt_header_background_info().
 */
function dt_event_dt_header_background_info() {
  return [
    [
      'view_mode' => 'event_collection',
      'content_type' => 'event',
    ],
    [
      'view_mode' => 'event_past',
      'content_type' => 'event',
    ],
  ];
}

/**
 * Implements hook_entity_view_mode_alter().
 */
function dt_event_entity_view_mode_alter(&$view_mode, $context) {
  // Only attempt to change the view mode if it is full, as we never want to
  // change the view mode on a teaser by accident.
  if (isset($context['entity']->type) && $context['entity']->type == 'event' && $view_mode == 'full') {
    // Return the live view mode.
    if (_dt_event_is_live_path()) {
      $view_mode = 'event_livestream';
      return;
    }
    // If it is a collection.
    if ($context['entity']->field_event_collection[LANGUAGE_NONE][0]['value'] == 1) {
      $view_mode = 'event_collection';
      return;
    }

    // If we have an event status. And the event is past.
    if (isset($context['entity']->event_status) && $context['entity']->event_status == DT_EVENT_STATE_PAST) {
      $view_mode = 'event_past';
      return;
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Here we add extra modifiers to the file markup.
 */
function dt_event_preprocess_file_entity(&$variables) {
  // Make sure we only do this for event entities.
  if (isset($variables['entity']) && $variables['entity']->type == 'event') {
    // We define the wrapper once for the caption and apply it when we need it.
    $caption_wrapper = [
      '#prefix' => '<div class="file__caption">',
      '#suffix' => '</div>',
    ];
    // If it is a video, we have to apply additional modifiers.
    if ($variables['type'] == 'video') {
      // Adds the modifier class to apply the background color.
      $variables['classes_array'][] = 'file-video--with-background';
      // Also add the description to the content render array.
      if (!empty($variables['content']['field_video_description'])) {
        $variables['content']['field_video_description']['#label_display'] = 'hidden';
        $variables['content']['field_video_description'] += $caption_wrapper;
      }
    }
    // Add the BEM wrapper.
    if (!empty($variables['content']['field_caption'])) {
      $variables['content']['field_caption'] += $caption_wrapper;
    }
  }
}

/**
 * Implements hook_views_pre_render().
 *
 * Here we will replace the %all_events_link token in the views header config.
 */
function dt_event_views_pre_render(&$view) {
  // Replace the [node_title] token in the views read more link.
  if ($view->name == 'events_list') {
    // If we have substitutions, we alter the button.
    if (!empty($view->build_info['substitutions']['%1'])) {
      $read_more_text = str_replace('[node_title]', $view->build_info['substitutions']['%1'], $view->display['default']->handler->options['use_more_text']);
      $view->display['default']->handler->options['use_more_text'] = decode_entities($read_more_text);
    }
  }
  // Replace the link token with the link.
  elseif ($view->name == 'related_events' && $view->current_display == 'block') {
    if (FALSE !== strpos($view->header['area_text_custom']->options['content'], '%all_events_link')) {
      // @todo: Instead of using /events, get the view and return the path of it.
      $link = l(t('View all events'), '/events');
      $view->header['area_text_custom']->options['content'] = str_replace('%all_events_link', $link, $view->header['area_text_custom']->options['content']);
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Here we will wrap the view header with our required markup. We do it here to
 * avoid to much markup in the translation table.
 */
function dt_event_preprocess_views_view(&$variables) {
  $markup = [
    '#markup' => $variables['header'],
    '#prefix' => '<section class="text-small section section--force-bottom">',
    '#suffix' => '</section>',
  ];

  $variables['header'] = drupal_render($markup);

  $view = $variables['view'];
  if ($view->name == 'events' && $view->current_display == 'page') {
    $hitme = libraries_load('hitme');
    if ($hitme['installed']) {
      drupal_add_js($hitme['library path'] . '/jquery.hitMe-min.js');
      drupal_add_js('(function ($) { $(function () { $(\'.listing__item-link\').hitMe(); }); })(jQuery);',
        ['type' => 'inline', 'scope' => 'footer']
      );
    }
  }
}

/**
 * Implements hook_views_query_alter().
 *
 * In this query alter we ensure that we exclude the argument event from the
 * query. This would cause infinte loop.
 */
function dt_event_views_query_alter(&$view, &$query) {
  if ($view->name == 'related_events' && isset($view->args[0]) && $view->current_display == 'block') {
    // Make sure that we dont include the current child event.
    $query->add_where(0, 'node_field_data_field_event_children_events.nid', $view->args[0], '<>');
  }
}

/**
 * Implements hook_facet_items_alter().
 */
function dt_event_facet_items_alter(&$build, &$settings) {
  switch ($settings->facet) {
    case 'field_event_is_online':
      $settings->settings['hide_facet_count'] = 1;

      foreach ($build as $key => $item) {
        if ($item["#markup"] == 'yes') {
          $build[$key]["#markup"] = t('Online events only');
          $build[$key]['#count'] = NULL;
        }
      }
      break;

    case 'field_event_is_live_streaming':
      $settings->settings['hide_facet_count'] = 1;

      foreach ($build as $key => $item) {
        if ($item["#markup"] == 'yes') {
          $build[$key]["#markup"] = t('Online events with live streaming available');
          $build[$key]['#count'] = NULL;
        }
      }
      break;
  }
}

/**
 * Implements hook_url_inbound_alter().
 *
 * Here we check if the url ends on (/live|/live/|/live_{lang}). If that is the
 * case we can populate it so that we later, can add a specific display mode.
 */
function dt_event_url_inbound_alter(&$path, $original_path, $path_language) {
  $replaced_path = preg_replace(DT_EVENT_LIVE_PATH_REGEX, '', $path);
  if ($source = drupal_lookup_path('source', $replaced_path, $path_language)) {
    $path = $source;
  }
}

/**
 * Implements hook_preprocess_easy_breadcrumb().
 */
function dt_event_preprocess_easy_breadcrumb(&$variables) {
  // Live streaming pages.
  if (_dt_event_is_live_path()) {
    // Add node segment for Event.
    $node = menu_get_object();
    $variables['breadcrumb'][] = _easy_breadcrumb_build_item(t('@id', ['@id' => $node->title]), [], 'node/' . $node->nid);
    $variables['segments_quantity']++;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function dt_event_preprocess_dt_date_format_block(&$variables) {
  if (isset($variables['entity'])) {
    $variables['modifier_classes'] .= ' event';
    if ($variables['entity']->event_status == DT_EVENT_STATE_CANCELLED) {
      $variables['modifier_classes'] .= ' cancelled';
    }
    elseif ($variables['entity']->event_status == DT_EVENT_STATE_PAST) {
      $variables['modifier_classes'] .= ' past';
      $variables['show_years'] = TRUE;
      $variables['show_days_name'] = FALSE;
    }
    elseif ($variables['entity']->event_livestream_status) {
      $variables['modifier_classes'] .= ' live-streaming';
    }
  }
}

/**
 * Implements hook_theme().
 */
function dt_event_theme($existing, $type, $theme, $path) {
  return [
    'dt_event_status' => [
      'template' => 'dt_event_status',
      'path' => $path . '/templates',
      'variables' => [
        'message_title' => '',
        'message_body' => '',
        'message_type' => '',
        'message_classes' => '',
      ],
    ],
  ];
}

/**
 * Implements hook_nexteuropa_formatters_view_modes_alter().
 */
function dt_event_nexteuropa_formatters_view_modes_alter(&$view_modes) {
  $view_modes[] = 'event_speaker';
}

/**
 * Implements hook_preprocess_HOOK().
 */
function dt_event_preprocess_dt_event_status(&$variables) {
  if (isset($variables['message_body'])) {
    $variables['message_body'] = filter_xss($variables['message_body']);
  }
}
