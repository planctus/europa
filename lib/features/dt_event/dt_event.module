<?php
/**
 * @file
 * Code for the DT Policy input feature.
 */

include_once 'dt_event.features.inc';

// Include our helpers.
module_load_include('inc', 'dt_event', 'dt_event.helpers');
module_load_include('inc', 'dt_event', 'dt_event.ds_fields');

// Constansts that can be used.
define('DT_EVENT_STATE_FUTURE', 1);
define('DT_EVENT_STATE_ONGOING', 2);
define('DT_EVENT_STATE_PAST', 3);
define('DT_EVENT_STATE_CANCELLED', 4);
define('DT_EVENT_STATE_RESCHEDULED', 5);
// Live stream states.
define('DT_EVENT_LIVE_STREAM_NONE', 0);
define('DT_EVENT_LIVE_STREAM_FUTURE', 1);
define('DT_EVENT_LIVE_STREAM_ONGOING', 2);
define('DT_EVENT_LIVE_STREAM_END', 3);

/**
 * Implements hook_entity_prepare_view().
 *
 * We iterate on the entity's of type 'node'. If we have matching entity's of
 * type 'event' we pass them to our function.
 */
function dt_event_entity_prepare_view($entities, $type, $langcode) {
  if ($type == 'node') {
    foreach ($entities as $entity) {
      if ($entity->type == 'event') {
        _dt_event_entity_add_status_property($entity);
        // Add this to style guide.
        drupal_add_css(".facetapi-facetapi-checkbox-links {list-style: none;}", "inline");
        drupal_add_css(".facetapi-facetapi-checkbox-links input.facetapi-checkbox {margin-right: .5em;}", "inline");
        drupal_add_css(".facetapi-facetapi-checkbox-links a.facetapi-checkbox {text-decoration: none;}", "inline");
      }
    }
  }
}

/**
 * Implements hook_date_format_types().
 */
function dt_event_date_format_types() {
  return array(
    'dt_event'  => t('Event date'),
    'dt_past_event'  => t('Past event date'),
  );
}

/**
 * Implements hook_date_formats().
 */
function dt_event_date_formats() {
  $formats = array();

  $formats[] = array(
    'type'    => 'dt_event',
    'format'  => 'l j F',
    'locales' => array(),
  );

  $formats[] = array(
    'type'    => 'dt_past_event',
    'format'  => 'j F Y',
    'locales' => array(),
  );

  foreach ($formats as $key => $format) {
    variable_set('date_format_' . $format['type'], $format['format']);
  }

  return $formats;
}

/**
 * Implements hook_facet_items_alter().
 */
function dt_event_facet_items_alter(&$build, &$settings) {
  switch ($settings->facet) {
    case 'field_event_is_online':
      $settings->settings['hide_facet_count'] = 1;

      foreach ($build as $key => $item) {
        if ($item["#markup"] == 'yes') {
          $build[$key]["#markup"] = t('Online events only');
          $build[$key]['#count'] = NULL;
        }
      }
      break;

    case 'field_event_is_live_streaming':
      $settings->settings['hide_facet_count'] = 1;

      foreach ($build as $key => $item) {
        if ($item["#markup"] == 'yes') {
          $build[$key]["#markup"] = t('Online events with live streaming available');
          $build[$key]['#count'] = NULL;
        }
      }
      break;
  }
}
