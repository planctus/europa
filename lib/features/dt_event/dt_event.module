<?php
/**
 * @file
 * Code for the DT Policy input feature.
 */

include_once 'dt_event.features.inc';

// Include our helpers.
module_load_include('inc', 'dt_event', 'dt_event.helpers');
module_load_include('inc', 'dt_event', 'dt_event.ds_fields');

// Constansts that can be used.
define('DT_EVENT_STATE_FUTURE', 1);
define('DT_EVENT_STATE_ONGOING', 2);
define('DT_EVENT_STATE_PAST', 3);
define('DT_EVENT_STATE_CANCELLED', 4);
define('DT_EVENT_STATE_RESCHEDULED', 5);
// Live stream states.
define('DT_EVENT_LIVE_STREAM_NONE', 0);
define('DT_EVENT_LIVE_STREAM_FUTURE', 1);
define('DT_EVENT_LIVE_STREAM_ONGOING', 2);
define('DT_EVENT_LIVE_STREAM_END', 3);

/**
 * Implements hook_entity_prepare_view().
 *
 * We iterate on the entity's of type 'node'. If we have matching entity's of
 * type 'event' we pass them to our function.
 */
function dt_event_entity_prepare_view($entities, $type, $langcode) {
  if ($type == 'node') {
    foreach ($entities as $entity) {
      if ($entity->type == 'event') {
        _dt_event_entity_add_status_property($entity);
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Here we add extra modifiers to the file markup.
 */
function dt_event_preprocess_file_entity(&$variables) {
  // Make sure we only do this for event entity's.
  if (isset($variables['entity']) && $variables['entity']->type == 'event') {
    // Also add the file modifier.
    $variables['classes_array'][] = 'file--condensed';
    // If it is a video, we have to apply additional modifiers.
    if ($variables['type'] == 'video') {
      $variables['classes_array'][] = 'file-video--withbackground';
    }
    // Add the BEM wrapper.
    if (isset($variables['content']['field_caption'])) {
      $variables['content']['field_caption']['#prefix'] = '<div class="file__caption">';
      $variables['content']['field_caption']['#suffix'] = '</div>';
    }

  }
}

/**
 * Implements hook_date_format_types().
 */
function dt_event_date_format_types() {
  return array(
    'dt_event'  => t('Event date'),
    'dt_past_event'  => t('Past event date'),
  );
}

/**
 * Implements hook_date_formats().
 */
function dt_event_date_formats() {
  $formats = array();

  $formats[] = array(
    'type'    => 'dt_event',
    'format'  => 'l j F',
    'locales' => array(),
  );

  $formats[] = array(
    'type'    => 'dt_past_event',
    'format'  => 'j F Y',
    'locales' => array(),
  );

  foreach ($formats as $key => $format) {
    variable_set('date_format_' . $format['type'], $format['format']);
  }

  return $formats;
}
