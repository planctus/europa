<?php
/**
 * @file
 * Code for the DT Policy input feature.
 */

include_once 'dt_event.features.inc';

// Include our helpers.
module_load_include('inc', 'dt_event', 'dt_event.helpers');
module_load_include('inc', 'dt_event', 'dt_event.ds_fields');

// Constansts that can be used.
define('DT_EVENT_STATE_FUTURE', 1);
define('DT_EVENT_STATE_ONGOING', 2);
define('DT_EVENT_STATE_PAST', 3);
define('DT_EVENT_STATE_CANCELLED', 4);
define('DT_EVENT_STATE_RESCHEDULED', 5);
// Live stream states.
define('DT_EVENT_LIVE_STREAM_NONE', 0);
define('DT_EVENT_LIVE_STREAM_FUTURE', 1);
define('DT_EVENT_LIVE_STREAM_ONGOING', 2);
define('DT_EVENT_LIVE_STREAM_END', 3);

/**
 * Implements hook_entity_prepare_view().
 *
 * We iterate on the entity's of type 'node'. If we have matching entity's of
 * type 'event' we pass them to our function.
 */
function dt_event_entity_prepare_view($entities, $type, $langcode) {
  if ($type == 'node') {
    foreach ($entities as $entity) {
      if ($entity->type == 'event') {
        _dt_event_entity_add_status_property($entity);
      }
    }
  }
}

/**
 * Reset all HTML for the field.
 */
function dt_event_preprocess_node(&$vars) {
  if ($vars['type'] == 'event' && $vars['view_mode'] == 'full') {
    $entity = entity_metadata_wrapper('node', $vars['node']);
    $node = $vars['node'];
    $date = $entity->field_event_date->value();
    $location = $entity->field_core_location->value();
    $start_date = format_date($date['value'], 'dt_event');
    $current_date = format_date(time(), 'dt_event');
    $streaming = $entity->field_event_live_streaming_link->value();
    $is_streaming = $entity->field_event_is_live_streaming->value();

    // Build the markup.
    $wrapper = '<div class="page-header__eventinfo">';
    // Event date, current date if it's an ongoing event.
    switch ($node->event_status) {
      case 2:
        $event_date = '<div class="icon icon--calendar event__date">' . $current_date . '</div>';
        break;

      default:
        $event_date = '<div class="icon icon--calendar event__date">' . $start_date . '</div>';
    }

    // Event location, online event only.
    if (!$entity->field_event_is_online) {
      $event_country = '<span class="icon icon--location event__location">' . t('Online only') . ', ' . $country . '</span>';
    }
    // All of the others.
    else {
      $event_country .= '<span class="icon icon--location event__location">' . $location['locality'];

      // We only get the country ISO code from addressfield.
      if (!empty($location['country'])) {
        $countries = country_get_list();
        $event_country .= ', ' . $countries[$location['country']];
      }

      '</span>';
    }

    if ($is_streaming) {
      $event_streaming = '<span icon icon--streaming class="event__livestreaming">' . t('live streaming available') . '</span>';
    }

    $closure = '</div>';
    $markup = $wrapper . $event_date . $event_country . $event_streaming . $closure;
    $vars['dt_event_header'] = $markup;
  }
}

/**
 * Implements hook_date_format_types().
 */
function dt_event_date_format_types() {
  return array(
    'dt_event'  => t('Event date'),
  );
}

/**
 * Implements hook_date_formats().
 */
function dt_event_date_formats() {
  $formats = array();

  $formats[] = array(
    'type'    => 'dt_event',
    'format'  => 'l j F',
    'locales' => array(),
  );

  variable_set('date_format_' . $formats[0]['type'], $formats[0]['format']);

  return $formats;
}
