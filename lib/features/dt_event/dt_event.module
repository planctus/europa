<?php
/**
 * @file
 * Code for the DT Policy input feature.
 */

include_once 'dt_event.features.inc';

// Include our helpers.
module_load_include('inc', 'dt_event', 'dt_event.helpers');
module_load_include('inc', 'dt_event', 'dt_event.ds_fields');

// Constansts that can be used.
define('DT_EVENT_STATE_FUTURE', 1);
define('DT_EVENT_STATE_ONGOING', 2);
define('DT_EVENT_STATE_PAST', 3);
define('DT_EVENT_STATE_CANCELLED', 4);
define('DT_EVENT_STATE_RESCHEDULED', 5);
// Live stream states.
define('DT_EVENT_LIVE_STREAM_NONE', 0);
define('DT_EVENT_LIVE_STREAM_FUTURE', 1);
define('DT_EVENT_LIVE_STREAM_ONGOING', 2);
define('DT_EVENT_LIVE_STREAM_END', 3);

/**
 * Implements hook_entity_prepare_view().
 *
 * We iterate on the entity's of type 'node'. If we have matching entity's of
 * type 'event' we pass them to our function.
 */
function dt_event_entity_prepare_view($entities, $type, $langcode) {
  if ($type == 'node') {
    foreach ($entities as $entity) {
      if ($entity->type == 'event') {
        _dt_event_entity_add_status_property($entity);
      }
    }
  }
}

/**
 * Reset all HTML for the field.
 */
function dt_event_preprocess_node(&$vars) {
  if ($vars['type'] == 'event' && $vars['view_mode'] == 'full') {
    $entity = entity_metadata_wrapper('node', $vars['node']);
    $node = $vars['node'];
    $date = $entity->field_event_date->value();
    $location = $entity->field_core_location->value();
    $start_date = format_date($date['value'], 'dt_event');
    $end_date = !empty($date['value2']) ? $date['value2'] : $date['value'];
    $past_date = format_date($date['value'], 'dt_past_event');
    $current_date = format_date(time(), 'dt_event');
    $is_streaming = $entity->field_event_is_live_streaming->value();
    $modifier = $node->event_status == 4 ? 'page-header__date--cancelled ' : '';

    // Build the markup.
    $wrapper = '<div class="page-header__eventinfo">';
    $markup = '<div class="' . $modifier . 'page-header__date icon icon--calendar">';

    switch ($node->event_status) {
      // Ongoing, it shows the current date.
      case 2:
        $markup .= $current_date;
        break;

      // Past event, it shows also the year.
      case 3:
        $markup .= $past_date;
        break;

      // Cancelled, it shows the starting date with a strikethrough.
      case 4:
        $markup .= time() > $end_date ? $past_date : $start_date;
        break;

      // Default is showing the start date of the event.
      default:
        $markup .= $start_date;
    }

    $markup .= '</div>';

    // Event location, online event only.
    if (!$entity->field_event_is_online) {
      $markup .= '<span class="icon icon--location page-header__location">' . t('Online only') . '</span>';
    }
    // All of the others.
    else {
      $markup .= '<span class="icon icon--location page-header__location">' . $location['locality'];

      // We only get the country ISO code from addressfield.
      if (!empty($location['country'])) {
        $countries = country_get_list();
        $markup .= ', ' . $countries[$location['country']];
      }

      '</span>';
    }

    if ($is_streaming && ($node->event_status !== 3 && $node->event_status !== 4)) {
      $markup .= '<span icon icon--streaming class="page-header__livestreaming">' . t('live streaming available') . '</span>';
    }

    $closure = '</div>';
    $markup = $wrapper . $markup . $closure;
    $vars['dt_event_header'] = $markup;
  }
}

/**
 * Implements hook_date_format_types().
 */
function dt_event_date_format_types() {
  return array(
    'dt_event'  => t('Event date'),
    'dt_past_event'  => t('Past event date'),
  );
}

/**
 * Implements hook_date_formats().
 */
function dt_event_date_formats() {
  $formats = array();

  $formats[] = array(
    'type'    => 'dt_event',
    'format'  => 'l j F',
    'locales' => array(),
  );

  $formats[] = array(
    'type'    => 'dt_past_event',
    'format'  => 'j F Y',
    'locales' => array(),
  );

  foreach ($formats as $key => $format) {
    variable_set('date_format_' . $format['type'], $format['format']);
  }

  return $formats;
}
