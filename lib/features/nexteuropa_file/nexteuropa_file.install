<?php

/**
 * @file
 * Digital Transformation File install.
 */

/**
 * Implements hook_install().
 */
function nexteuropa_file_install() {
  // Reverting feature components that have overriden state after installing.
  features_revert([
    'nexteuropa_file' => ['field_base', 'field_group', 'field_instance'],
  ]);
  // Apply default configuration to the content type,
  // needed for correct translation management..
  multisite_config_service('nexteuropa_core')->applyDefaultConfigurationToContentType('file');
}

/**
 * Implements hook_uninstall().
 */
function nexteuropa_file_uninstall() {
  drupal_set_message(t('NextEuropa File feature is uninstalled on your site.'));
}

/**
 * Removing the field_file_lang_specific field.
 */
function nexteuropa_file_update_7101() {
  // Remove the field.
  $fields_to_remove = [
    'field_file_lang_specific',
  ];
  foreach ($fields_to_remove as $field_name) {
    if (field_info_field($field_name) !== NULL) {
      field_delete_field($field_name);
    }
  }

  features_revert_module('nexteuropa_file');
  // The fields need component-based way.
  features_revert([
    'nexteuropa_file' => ['field_instance'],
  ]);
}

/**
 * Reverting the nexteuropa_file fields configurations.
 */
function nexteuropa_file_update_7102() {
  features_revert([
    'nexteuropa_file' => ['field_base', 'field_group', 'field_instance'],
  ]);
}

/**
 * Applying default settings from soft config.
 */
function nexteuropa_file_update_7103() {
  // Apply default configuration to the content type,
  // needed for correct translation management..
  multisite_config_service('nexteuropa_core')->applyDefaultConfigurationToContentType('file');

  // Order the fields added by the soft configuration correctly.
  features_revert_module('nexteuropa_file');
}

/**
 * DTTSB-826: Update field_title from title at file bundle.
 */
function nexteuropa_file_update_7104(&$sandbox) {
  // Initial settings.
  if (!isset($sandbox['max'])) {
    // Query all file contents, which has no title_field.
    // These are the content, which had been created before
    // the 'title_field' was added to the file content type.
    $count_query = db_select('node', 'n');
    $count_query->leftJoin('field_data_title_field', 'f', 'n.nid = f.entity_id');
    $count_query->condition('type', 'file')
      ->isNull('f.title_field_value')
      ->addExpression('COUNT(n.nid)', 'count');
    $sandbox['max'] = $count_query->execute()->fetchField();
    $sandbox['progress'] = 0;
  }

  $limit = variable_get('title_field_replacement_batch_size', 5);
  $query = db_select('node', 'n');
  $query->leftJoin('field_data_title_field', 'f', 'n.nid = f.entity_id');
  $query
    ->condition('n.type', 'file')
    ->fields('n', ['nid'])
    ->orderBy('n.nid')
    ->range($sandbox['position'], $limit);
  $nids = $query
    ->execute()
    ->fetchCol();

  if (!empty($nids)) {
    // Using the function, which copy from the 'title' field
    // to 'field_title' at 'file' bundle.
    title_field_replacement_init('node', 'file', 'title', $nids);
  }
  unset($nids);
  $sandbox['position'] += $limit;

  if ($sandbox['max'] > 0 && $sandbox['max'] > $sandbox['position']) {
    $sandbox['#finished'] = $sandbox['position'] / $sandbox['max'];
  }
  else {
    $sandbox['#finished'] = 1;
  }
}

/**
 * Deleting field_core_description field instance.
 *
 * Migrate file type and origin terms.
 */
function nexteuropa_file_update_7105() {
  // Remove field instance.
  if ($instance = field_info_instance('node', 'field_core_description', 'file')) {
    field_delete_instance($instance);
  }

  // Revert to create the new taxonomies and fields.
  features_revert_module('nexteuropa_file');

  // This will run the migration task.
  _nexteuropa_file_migrate_file_types();
}
