<?php
/**
 * @file
 * Code for the List view content feature.
 */

include_once 'dt_list_view_content.features.inc';

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Here we will modify and populate the bean form so that it will list the
 * available views.
 */
function dt_list_view_content_form_bean_form_alter(&$form, &$form_state, $form_id) {
  // We should only modify our list view content bean.
  if ($form['#bundle'] == 'list_view_content' && $views = _dt_list_view_content_get_views()) {
    // Do not display the title and view mode selection.
    $form['view_mode']['#type'] = 'hidden';
    $form['title_field']['#type'] = 'hidden';
    // Set the available options (And include the current options).
    $form['field_list_view_views'][LANGUAGE_NONE]['#options'] = array_merge($form['field_list_view_views'][LANGUAGE_NONE]['#options'], $views);
    // Set the default value.
    $default_view = isset($form['#entity']->field_list_view_views[LANGUAGE_NONE][0]['value']) ? $form['#entity']->field_list_view_views[LANGUAGE_NONE][0]['value'] : '';
    $form['field_list_view_views'][LANGUAGE_NONE]['#default_value'] = $default_view;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Here we will alter the header.
 */
function dt_list_view_content_preprocess_page(&$variables) {
  // If the current page is a view.
  if ($view = views_get_page_view()) {
    // Check if we have additional views content.
    if ($views_content = _dt_list_view_get_bean_content($view)) {
      // If we have, and there is an introduction, push it to the variables.
      if (isset($views_content['introduction'])) {
        $variables['field_core_introduction'] = $views_content['introduction']['value'];
      }
    }
  }
}

/**
 * Helper function to get bean content for the view.
 *
 * @param object $view
 *   The views object to check it for.
 *
 * @return array
 *   Array containing the content of the bean.
 */
function _dt_list_view_get_bean_content($view) {

  // Check if it might have been called already.
  $contents = &drupal_static(__FUNCTION__ . '_' . $view->name);

  // If the view is complient to the requirements.
  if (!isset($contents) && $view->tag == DT_CORE_VIEWS_TAG && array_key_exists(_dt_list_view_content_view_identifier($view), _dt_list_view_content_get_views())) {

    // Initialize the contents array.
    $contents = [];

    // Get our language.
    global $language;

    // If there is a bean, we modify the view display.
    if ($bean = entity_load('bean', _dt_list_view_content_get_bean($view))) {
      // Metadata wrapper.
      $bean_mdw = entity_metadata_wrapper('bean', reset($bean));

      // List of fields to check for.
      $fields_to_add = [
        'content' => 'field_list_view_content',
        'description' => 'field_core_description',
        'introduction' => 'field_core_introduction',
      ];

      // Loop over the fields we like to add.
      foreach ($fields_to_add as $key => $field) {
        if (
          $bean_mdw->language($language->language)->__isset($field) &&
          $content = $bean_mdw->language($language->language)->{$field}->value()
        ) {
          $contents[$key] = $content;
        }
      }
    }
  }
  return $contents;
}

/**
 * Implements hook_views_pre_view().
 *
 * At this stage we will hook into the view, and alter the object with our
 * custom values.
 */
function dt_list_view_content_views_pre_view($view, &$display_id, &$args) {
  if ($views_content = _dt_list_view_get_bean_content($view)) {
    // Set the content if available.
    if (isset($views_content['content'])) {
      $header_options = array(
        'content' => $views_content['content']['value'],
        'format' => $views_content['content']['format'],
        'empty' => 1,
      );
      $view->add_item($display_id, 'header', 'views', 'area', $header_options);
    }
    // Set the description if available.
    if (isset($views_content['description'])) {
      $view->description = $views_content['description'];
    }
  }
}

/**
 * Helper function to get a possibly attached bean.
 *
 * @param object $view
 *   The views object which we need to find the bean for.
 *
 * @return object
 *    Bean entity.
 */
function _dt_list_view_content_get_bean($view) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'bean')
    ->propertyCondition('type', 'list_view_content')
    ->fieldCondition('field_list_view_views', 'value', _dt_list_view_content_view_identifier($view), '=')
    ->range(0, 1);
  $result = $query->execute();
  return isset($result['bean']) ? array_keys($result['bean']) : FALSE;
}

/**
 * Helper function to construct the views identifier.
 *
 * @param object $view
 *   The views object.
 *
 * @return string|Bool
 *    Either the full view identifier or a FALSE if it could not be generated.
 */
function _dt_list_view_content_view_identifier($view) {
  if (isset($view->current_display)) {
    return $view->name . '.' . $view->current_display;
  }
  return FALSE;
}

/**
 * Helper function to get the available views.
 *
 * @return array
 *    An array of matching views.
 */
function _dt_list_view_content_get_views() {
  // Get all the view.
  $views = ctools_export_crud_load_all('views_view');
  // Take all the views that have a page and are exported.
  foreach ($views as $name => $object) {
    if ($object->tag == DT_CORE_VIEWS_TAG && isset($object->display['page'])) {
      foreach ($object->display as $display_object) {
        if ($display_object->display_plugin == 'page') {
          $views_options[$name . '.' . $display_object->id] = $object->human_name . ' (' . $display_object->display_title . ')';
        }
      }
    }
  }
  if (isset($views_options)) {
    return $views_options;
  }
  return FALSE;
}
