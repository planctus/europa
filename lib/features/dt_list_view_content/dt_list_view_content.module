<?php
/**
 * @file
 * Code for the List view content feature.
 */

include_once 'dt_list_view_content.features.inc';

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Here we will modify and populate the bean form so that it will list the
 * available views.
 */
function dt_list_view_content_form_bean_form_alter(&$form, &$form_state, $form_id) {
  // We should only modify our list view content bean.
  if ($form['#bundle'] == 'list_view_content') {
    $form['view_mode']['#type'] = 'hidden';


    // Set the available options (And include the current options).
    $form['field_list_view_views'][LANGUAGE_NONE]['#options'] = array_merge($form['field_list_view_views'][LANGUAGE_NONE]['#options'], _dt_list_view_content_get_views());
  }
}

/**
 * Implements hook_views_pre_render().
 *
 * At this stage we will hook into the view, and alter the object with our
 * custom values.
 */
function dt_list_view_content_views_pre_render(&$view) {
  // We start with a tag check, as this way prevents unnecessary loads.
  if ($view->tag == DT_VIEWS_TAG && array_key_exists(_dt_list_view_content_view_identifier($view), _dt_list_view_content_get_views())) {
    $header_options = array(
      'label' => t('Header text'),
      'content' => 'Foo',
      'format' => 'filtered_html',
      'empty' => 1,
    );
    $view->add_item('default', 'header', 'views', 'area', $header_options);

    _dt_list_view_content_get_bean($view);
  }
}

/**
 * Helper function to get a possibly attached bean.
 *
 * @param object $view
 *   The views object which we need to find the bean for.
 *
 * @return object
 *    Bean entity.
 */
function _dt_list_view_content_get_bean($view) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'bean')
    ->propertyCondition('type', 'list_view_content')
    ->fieldCondition('field_list_view_views', 'value', _dt_list_view_content_view_identifier($view));

  $identifier = _dt_list_view_content_view_identifier($view);

  $result = $query->execute();
  $var = "foo";
}

/**
 * Helper function to construct the views identifier.
 *
 * @param object $view
 *   The views object.
 *
 * @return string
 *    The complete views identifier..
 */
function _dt_list_view_content_view_identifier($view) {
  if (isset($view->current_display)) {
    return $view->name . '.' . $view->current_display;
  }
  return FALSE;
}
/**
 * Helper function to get the available views.
 *
 * @return array
 *    An array of matching views.
 */
function _dt_list_view_content_get_views() {
  // Get all the view.
  $views = ctools_export_crud_load_all('views_view');
  // Take all the views that have a page and are exported.
  foreach ($views as $name => $object) {
    if ($object->tag == DT_VIEWS_TAG && isset($object->display['page'])) {
      foreach ($object->display as $display_id => $display_object) {
        if ($display_object->display_plugin == 'page') {
          $views_options[$name . '.' . $display_object->id] = $object->human_name . ' (' . $display_object->display_title . ')';
        }
      }
    }
  }
  if (isset($views_options)) {
    return $views_options;
  }
  return FALSE;
}
