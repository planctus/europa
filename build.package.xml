<?xml version="1.0" encoding="UTF-8" ?>

<project name="My subsite" default="help">

    <!-- Delete the previous build. -->
    <target name="delete-platform">
        <!--
            During the Drupal installation process the settings folder is write
            protected. Ensure it is writeable so it can be removed.
         -->
        <if>
            <available file="${platform.build.settings.dir}" type="dir" />
            <then>
                <chmod mode="0777" failonerror="true" verbose="false" quiet="true">
                    <fileset dir="${platform.build.settings.dir}" />
                </chmod>
            </then>
        </if>

        <echo msg="Delete previous build." />
        <!-- Use the faster native command on UNIX systems. -->
        <if>
            <os family="unix" />
            <then>
                <echo msg='rm -rf "${platform.build.dir}"' />
                <exec
                    command='rm -rf "${platform.build.dir}"'
                    dir="${project.basedir}"
                    passthru="true"
                    checkreturn="true"
                />
            </then>
            <else>
                <delete dir="${platform.build.dir}" includeemptydirs="true" failonerror="false" />
            </else>
        </if>
    </target>

    <!-- Make the subsite. -->
    <target name="make-subsite" depends="unpack-platform">
        <echo msg="Make the subsite." />
        <phingcall target="drush-make-no-core">
            <property name="drush.make.target.file" value="${subsite.make}" />
        </phingcall>
    </target>

    <!-- Generate the makefile used to download development modules. -->
    <target name="generate-development-makefile">
        <echo msg="Generate the makefile for development modules." />
        <if>
            <available file="${subsite.temporary.development.make}" type="file" property="development.makefile.available" />
            <then>
                <echo message="Deleting existing makefile." />
                <delete file="${subsite.temporary.development.make}" failonerror="false" />
            </then>
        </if>
        <drushmakefile
            makeFile="${subsite.temporary.development.make}"
            coreVersion="${drupal.core.version}"
            projects="${development.modules.download}"
            defaultProjectDir="${development.modules.location}"
        />
    </target>

    <!-- Download development modules. -->
    <target name="download-development-modules" depends="generate-development-makefile">
        <echo msg="Download development modules." />
        <phingcall target="drush-make-no-core">
            <property name="drush.make.target.file" value="${subsite.temporary.development.make}" />
        </phingcall>
    </target>

    <!-- Subtarget: execute a makefile with the no-core option. -->
    <target name="drush-make-no-core">
        <drush
            command="make"
            assume="yes"
            bin="${drush.bin}"
            pipe="yes"
            verbose="${drush.verbose}"
            root="${platform.build.dir}">
            <param>${drush.make.target.file}</param>
            <param>${platform.build.dir}</param>
            <!-- Increasing the concurrency improves the build time by a factor of 3. -->
            <option name="concurrency">10</option>
            <option name="no-patch-txt"></option>
            <!-- This option will allow us to build inside an existing folder. -->
            <option name="no-core"></option>
        </drush>
    </target>

    <!-- Symlink the source folders for easy development. -->
    <target name="link-subsite-resources">
        <!-- Symlink our custom modules. -->
        <symlink link="${platform.build.subsite.modules.custom.dir}" target="${subsite.resources.modules.dir}" />
        <!-- Symlink our custom features. -->
        <symlink link="${platform.build.subsite.modules.features.dir}" target="${subsite.resources.features.dir}" />
        <!-- Symlink our custom themes. Delete the empty folder which is created during Drush make. -->
        <delete dir="${platform.build.subsite.themes.dir}" includeemptydirs="true" failonerror="false" />
        <symlink link="${platform.build.subsite.themes.dir}" target="${subsite.resources.themes.dir}" />
        <!-- Symlink our custom PSR-4 code. -->
        <symlink link="${platform.build.subsite.source.dir}" target="${subsite.resources.source.dir}" />
        <!-- Symlink composer configuration. -->
        <symlink link="${platform.build.subsite.composer.json}" target="${subsite.resources.composer.json}" />
        <symlink link="${platform.build.subsite.composer.lock}" target="${subsite.resources.composer.lock}" />
    </target>

    <!-- Install Composer dependencies for the build system. -->
    <target name="install-build-dependencies">
        <composer command="install" composer="${composer.bin}">
            <arg value="--working-dir=${project.basedir}" />
        </composer>
    </target>

    <!-- Install Composer dependencies for the subsite. -->
    <target name="install-subsite-dependencies">
        <composer command="install" composer="${composer.bin}">
            <arg value="--working-dir=${platform.build.subsite.dir}" />
        </composer>
    </target>

    <!-- Link site document root to Webserver document root. -->
    <target
        name="link-docroot"
        description="Create a symlink from the build folder to the webserver document root.">
        <symlink link="${server.docroot}" target="${platform.build.dir}" overwrite="true" />
    </target>

    <!-- Update .htaccess. -->
    <target name="update-htaccess">
        <if>
            <istrue value="${drupal.htaccess.append.text}" />
            <then>
                <append destfile="${drupal.htaccess.path}" text="${drupal.htaccess.append.text}" />
            </then>
        </if>
    </target>

    <!-- Download the platform. -->
    <target name="download-platform">
        <!--
            The platform is very large so downloading it can take a long time.
            Only download it when it hasn't yet been downloaded.
         -->
        <if>
            <not>
                <available file="${platform.package.tarball}" type="file" />
            </not>
            <then>
                <!-- Create the destination directory if it doesn't exist. -->
                <mkdir dir="${platform.package.destination}" />
                <echo msg="Starting to download the platform. Depending on your connection this can take between 5-30 minutes. Go get some coffee." />
                <echo msg="This file will only be downloaded once and will be cached in ${platform.package.tarball}." />
                <echo msg="You can delete this cached file whenever you want to download a new version of the platform." />
                <continuousphp-config token="${platform.package.token}" />
                <continuousphp-package
                    provider="${platform.package.provider}"
                    repository="${platform.package.repository}"
                    reference="${platform.package.reference}"
                    destination="${platform.package.destination}"
                    property="platform.package.property"
                />
                <echo msg="Downloaded platform package reference ${platform.package.property}" />
            </then>
            <else>
                <echo msg="Skipping platform download, it is already downloaded at ${platform.package.tarball}. Delete this file if you want to download the latest version." />
            </else>
        </if>
    </target>

    <!-- Unpack the platform. -->
    <target name="unpack-platform" depends="download-platform, delete-platform">
        <!-- Use the faster native commands on UNIX systems. -->
        <if>
            <os family="unix" />
            <then>
                <!--
                    The tarball contains the entire build folder including all
                    resources that were used to create the build. Extract it in a
                    temporary location and then move the correct subfolder that
                    contains the actual build.

                    A feature request is pending at ContinuousPHP to have only the build
                    folder available for download.

                    Todo: Remove this workaround when ContinuousPHP adds support for
                    downloading only the actual build folder.
                 -->
                <echo msg='rm -rf "${platform.package.destination}/extract"' />
                <exec
                    command='rm -rf "${platform.package.destination}/extract"'
                    dir="${project.basedir}"
                    passthru="true"
                />
                <echo msg='mkdir "${platform.package.destination}/extract"' />
                <exec
                    command='mkdir "${platform.package.destination}/extract"'
                    dir="${project.basedir}"
                    passthru="true"
                />
                <echo msg='tar xzf "${platform.package.tarball}" -C "${platform.package.destination}/extract"' />
                <exec
                    command='tar xzf "${platform.package.tarball}" -C "${platform.package.destination}/extract"'
                    dir="${project.basedir}"
                    passthru="true"
                    checkreturn="true"
                />
                <echo msg='mv "${platform.package.destination}/extract/build" "${platform.build.dir}"' />
                <exec
                    command='mv "${platform.package.destination}/extract/build" "${platform.build.dir}"'
                    dir="${project.basedir}"
                    passthru="true"
                    checkreturn="true"
                />
                <echo msg='rm -rf "${platform.package.destination}/extract"' />
                <exec
                    command='rm -rf "${platform.package.destination}/extract"'
                    dir="${project.basedir}"
                    passthru="true"
                    checkreturn="true"
                />
            </then>
            <else>
                <!--
                    The tarball contains the entire build folder including all
                    resources that were used to create the build. Extract it in a
                    temporary location and then move the correct subfolder that
                    contains the actual build.

                    A feature request is pending at ContinuousPHP to have only the build
                    folder available for download.

                    Todo: Remove this workaround when ContinuousPHP adds support for
                    downloading only the actual build folder.
                 -->
                <delete dir="${platform.package.destination}/extract" includeemptydirs="true" failonerror="false" quiet="true" />
                <untar file="${platform.package.tarball}" todir="${platform.package.destination}/extract" />
                <move includeemptydirs="true" todir="${platform.build.dir}">
                  <fileset dir="${platform.package.destination}/extract/build"/>
                </move>
                <delete dir="${platform.package.destination}/extract" includeemptydirs="true" failonerror="false" />
            </else>
        </if>
    </target>

    <!-- Copy subsite resources into the build folder. -->
    <target name="copy-subsite-resources">
        <echo msg='${platform.build}' />
        <echo msg='${platform.build.sites.dir}' />
        <echo msg='${platform.build.profiles.dir}' />
        <echo msg='${platform.build.subsite.modules.custom.dir}' />
        <!-- Custom modules. -->
        <copy todir="${platform.build.subsite.modules.custom.dir}" overwrite="true">
          <fileset dir="${subsite.resources.modules.dir}"/>
        </copy>

        <!-- Features. -->
        <copy todir="${platform.build.subsite.modules.features.dir}" overwrite="true">
          <fileset dir="${subsite.resources.features.dir}"/>
        </copy>

        <!-- Themes -->
        <copy todir="${platform.build.subsite.themes.dir}" overwrite="true">
          <fileset dir="${subsite.resources.themes.dir}"/>
        </copy>

        <!-- PSR-4 -->
        <copy todir="${platform.build.subsite.source.dir}" overwrite="true">
          <fileset dir="${subsite.resources.source.dir}"/>
        </copy>

        <!-- Composer. -->
        <copy file="${subsite.resources.composer.json}" tofile="${platform.build.subsite.composer.json}" overwrite="true" />
        <copy file="${subsite.resources.composer.lock}" tofile="${platform.build.subsite.composer.lock}" overwrite="true" />
    </target>

    <!-- Re-initialize variables for dist build. -->
    <target name="init-dist">
      <property name="platform.build.dir" value="${platform.dist.dir}" override="true" />
      <property name="platform.build.sites.dir" value="${platform.build.dir}/sites" override="true" />
      <property name="platform.build.settings.dir" value="${platform.build.sites.dir}/default" override="true" />
      <property name="platform.build.files.dir" value="${platform.build.settings.dir}/files" override="true" />
      <property name="platform.build.profiles.dir" value="${platform.build.dir}/profiles" override="true" />
      <property name="platform.build.profile.dir" value="${platform.build.profiles.dir}/${platform.profile.name}" override="true" />
      <property name="platform.build.subsite.dir" value="${platform.build.sites.dir}/${drupal.site.name}" override="true" />
      <property name="platform.build.subsite.libraries.dir" value="${platform.build.subsite.dir}/libraries" override="true" />
      <property name="platform.build.subsite.modules.dir" value="${platform.build.subsite.dir}/modules" override="true" />
      <property name="platform.build.subsite.modules.contrib.dir" value="${platform.build.subsite.modules.dir}/contrib" override="true" />
      <property name="platform.build.subsite.modules.custom.dir" value="${platform.build.subsite.modules.dir}/custom" override="true" />
      <property name="platform.build.subsite.modules.features.dir" value="${platform.build.subsite.modules.dir}/features" override="true" />
      <property name="platform.build.subsite.source.dir" value="${platform.build.subsite.dir}/src" override="true" />
      <property name="platform.build.subsite.themes.dir" value="${platform.build.subsite.dir}/themes" override="true" />
    </target>

    <target
        name="build-dev"
        description="Build a local development version of the subsite."
        depends="install-build-dependencies, delete-platform, download-platform, unpack-platform, link-subsite-resources, make-subsite, install-subsite-dependencies, setup-behat, update-htaccess, setup-php-codesniffer, download-development-modules" />

    <target
        name="build-dist"
        description="Build a version of the subsite intended to distribute as a release package."
        depends="install-build-dependencies, init-dist, delete-platform, download-platform, unpack-platform, make-subsite, copy-subsite-resources" />

</project>
