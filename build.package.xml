<?xml version="1.0" encoding="UTF-8" ?>

<project name="My subsite" default="help">

    <!-- Delete the previous build. -->
    <target name="delete-platform">
        <!--
            During the Drupal installation process the settings folder is write
            protected. Ensure it is writeable so it can be removed.
         -->
        <if>
            <available file="${platform.build.settings.dir}" type="dir" />
            <then>
                <chmod mode="0777" failonerror="false" verbose="false" quiet="true">
                    <fileset dir="${platform.build.settings.dir}" />
                </chmod>
            </then>
        </if>

        <echo msg="Delete previous build." />
        <delete dir="${platform.build.dir}" includeemptydirs="true" failonerror="false" />
    </target>

    <!-- Make the subsite. -->
    <target name="make-subsite" depends="unpack-platform">
        <echo msg="Make the subsite." />
        <drush
            command="make"
            assume="yes"
            bin="${drush.bin}"
            pipe="yes"
            verbose="${drush.verbose}"
            root="${platform.build.dir}">
            <param>${subsite.make}</param>
            <param>${platform.build.dir}</param>
            <!-- Increasing the concurrency improves the build time by a factor of 3. -->
            <option name="concurrency">10</option>
            <option name="no-patch-txt"></option>
            <!-- This option will allow us to build inside an existing folder. -->
            <option name="no-core"></option>
        </drush>
    </target>

    <!-- Symlink the source folders for easy development. -->
    <target name="link-subsite-resources">
        <!-- Symlink our custom modules. -->
        <symlink link="${platform.build.subsite.modules.custom.dir}" target="${subsite.resources.modules.dir}" />
        <!-- Symlink our custom features. -->
        <symlink link="${platform.build.subsite.modules.features.dir}" target="${subsite.resources.features.dir}" />
        <!-- Symlink our custom themes. Delete the empty folder which is created during Drush make. -->
        <delete dir="${platform.build.subsite.themes.dir}" includeemptydirs="true" failonerror="false" />
        <symlink link="${platform.build.subsite.themes.dir}" target="${subsite.resources.themes.dir}" />
        <!-- Symlink our custom PSR-4 code. -->
        <symlink link="${platform.build.subsite.source.dir}" target="${subsite.resources.source.dir}" />
        <!-- Symlink composer configuration. -->
        <symlink link="${platform.build.subsite.composer.json}" target="${subsite.resources.composer.json}" />
        <symlink link="${platform.build.subsite.composer.lock}" target="${subsite.resources.composer.lock}" />
    </target>

    <!-- Install Composer dependencies for the build system. -->
    <target name="install-build-dependencies">
        <composer command="install" composer="${composer.bin}">
            <arg value="--working-dir=${project.basedir}" />
        </composer>
    </target>

    <!-- Install Composer dependencies for the subsite. -->
    <target name="install-subsite-dependencies">
        <composer command="install" composer="${composer.bin}">
            <arg value="--working-dir=${platform.build.subsite.dir}" />
        </composer>
    </target>

    <!-- Link site document root to Webserver document root. -->
    <target
        name="link-docroot"
        description="Create a symlink from the build folder to the webserver document root.">
        <symlink link="${server.docroot}" target="${platform.build.dir}" overwrite="true" />
    </target>

    <!-- Update .htaccess. -->
    <target name="update-htaccess">
        <if>
            <istrue value="${drupal.htaccess.append.text}" />
            <then>
                <append destfile="${drupal.htaccess.path}" text="${drupal.htaccess.append.text}" />
            </then>
        </if>
    </target>

    <!-- Download the platform. -->
    <target name="download-platform">
        <!--
            The platform is very large so downloading it can take a long time.
            Only download it when it hasn't yet been downloaded.
         -->
        <if>
            <not>
                <available file="${platform.package.tarball}" type="file" />
            </not>
            <then>
                <!-- Create the destination directory if it doesn't exist. -->
                <mkdir dir="${platform.package.destination}" />
                <echo msg="Starting to download the platform. Depending on your connection this can take between 5-30 minutes. Go get some coffee." />
                <echo msg="This file will only be downloaded once and will be cached in ${platform.package.tarball}." />
                <echo msg="You can delete this cached file whenever you want to download a new version of the platform." />
                <continuousphp-config token="${platform.package.token}" />
                <continuousphp-package
                    provider="${platform.package.provider}"
                    repository="${platform.package.repository}"
                    reference="${platform.package.reference}"
                    destination="${platform.package.destination}"
                    property="platform.package.property"
                />
                <echo msg="Downloaded platform package reference ${platform.package.property}" />
            </then>
            <else>
                <echo msg="Skipping platform download, it is already downloaded at ${platform.package.tarball}. Delete this file if you want to download the latest version." />
            </else>
        </if>
    </target>

    <!-- Unpack the platform. -->
    <target name="unpack-platform" depends="download-platform, delete-platform">
        <!--
            The tarball contains the entire build folder including all
            resources that were used to create the build. Extract it in a
            temporary location and then move the correct subfolder that
            contains the actual build.

            A feature request is pending at ContinuousPHP to have only the build
            folder available for download.

            Todo: Remove this workaround when ContinuousPHP adds support for
            downloading only the actual build folder.
         -->
        <delete dir="${platform.package.destination}/extract" includeemptydirs="true" failonerror="false" />
        <untar file="${platform.package.tarball}" todir="${platform.package.destination}/extract" />
        <move includeemptydirs="true" todir="${platform.build.dir}">
          <fileset dir="${platform.package.destination}/extract/build"/>
        </move>
        <delete dir="${platform.package.destination}/extract" includeemptydirs="true" failonerror="false" />
    </target>

    <!-- Copy subsite resources into the build folder. -->
    <target name="copy-subsite-resources">
        <echo msg="TODO: COPY SUBSITE RESOURCES." />
    </target>

    <target
        name="build-dev"
        description="Build a local development version of the subsite."
        depends="install-build-dependencies, delete-platform, download-platform, unpack-platform, make-subsite, link-subsite-resources, install-subsite-dependencies, setup-behat, update-htaccess, setup-php-codesniffer" />

    <target
        name="build-dist"
        description="Build a version of the subsite intended to distribute as a release package."
        depends="install-build-dependencies, delete-platform, download-platform, unpack-platform, make-subsite, copy-subsite-resources" />

</project>
