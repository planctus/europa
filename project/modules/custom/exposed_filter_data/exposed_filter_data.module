<?php

/**
 * @file
 * Provides simple way to print exposed filter data
 */

/**
 * Implementation of hook_theme().
 */
function exposed_filter_data_theme() {
  return array(
    'exposed_filter_data' => array(
      'template' => 'exposed_filter_data',
      'variables' => array(
        'view' => NULL,
      ),
    ),
  );
}

/**
 * Implementation of hook_preprocess().
 */
function exposed_filter_data_preprocess_exposed_filter_data(&$vars) {
  // Add the CSS.
  drupal_add_css(drupal_get_path('module', 'exposed_filter_data') . '/exposed_filter_data.css');
  $view = $vars['view'];

  // In case no view - get the current view.
  if ($view == NULL) {
    $view = views_get_current_view();
  }

  // Make a variable out of each filter.
  if (isset($view->exposed_input)) {
    foreach ($view->exposed_input as $filter => $value) {
      $vars[$filter] = $value;
      $pretty_filter_key = _get_pretty_filter($filter);
      $vars['exposed_filters'][$pretty_filter_key] = _get_pretty_label($filter, $view);
    }
  }
}

/**
 * Helper to get the human pretty name of a given field by value.
 * @param $filter
 * @param $view
 * @return array
 */
function _get_pretty_label($filter, $view) {
  foreach ($view->display_handler->handlers['filter'] as $filter_handler) {
    if ($filter_handler->options['expose']['identifier'] === $filter) {
      $value = $filter_handler->value;
      if (is_array($value)) {
        $raw_val = reset($value);
        if (isset($filter_handler->value_options[$raw_val])) {
          $val = $filter_handler->value_options[$raw_val];
          return $val;
        }
      }
      else {
        return $value;
      }
    }
  }
}

/**
 * Prettify filter.
 * @param $filter
 * @return mixed
 */
function _get_pretty_filter($filter) {
  $pretty_filter = str_replace("_", " ", strtolower($filter));
  return $pretty_filter;
}

/**
 * Simple call to the theme, easy to be used in a view header.
 */
function get_exposed_filter_output() {
  return theme('exposed_filter_data');
}
