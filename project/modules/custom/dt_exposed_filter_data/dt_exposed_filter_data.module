<?php

/**
 * @file
 * Provides simple way to print exposed filter data.
 */

/**
 * Implements hook_theme().
 */
function dt_exposed_filter_data_theme() {
  return array(
    'exposed_filter_data' => array(
      'template' => 'dt_exposed_filter_data',
      'variables' => array(
        'view' => NULL,
      ),
    ),
  );
}

/**
 * Implements hook_preprocess().
 *
 * By default the function uses the views exposed filters to build the facets.
 * But we can add custom_filters to the views object which will then be added to
 * the facets array.
 */
function dt_exposed_filter_data_preprocess_exposed_filter_data(&$vars) {
  $view = $vars['view'];

  // In case no view - get the current view.
  if ($view == NULL) {
    $view = views_get_current_view();
  }

  // Make a variable out of each filter.
  if (isset($view->exposed_input)) {
    foreach ($view->exposed_input as $filter => $value) {
      $pretty = _dt_exposed_filter_data_get_pretty($filter, $view);
      if (isset($pretty['filter'])) {
        $vars[$filter] = $value;
        $pretty_filter_key = $pretty['label'];
        $vars['exposed_filters'][$pretty_filter_key] = $pretty['filter'];
      }
    }
  }

  // Extra option for when it is a custom filter.
  if (isset($view->custom_filters)) {
    foreach ($view->custom_filters as $filter => $value) {
      $vars['exposed_filters'][$filter] = '"' . $value . '"';
    }
  }
}

/**
 * Helper to get the human pretty name of a given field by value.
 *
 * @param string $filter
 *   Exposed filter.
 * @param object $view
 *   View object.
 *
 * @return array
 *   filter settings
 */
function _dt_exposed_filter_data_get_pretty($filter, $view) {
  $result = array();
  foreach ($view->display_handler->handlers['filter'] as $filter_handler) {
    if ($filter_handler->options['expose']['identifier'] === $filter) {
      // Combined filters will need custom handlig.
      $is_combined = $filter_handler->field == 'combine';

      $result['label'] = $is_combined ? t('containing') : $filter_handler->options['expose']['label'];
      $result['filter'] = array();
      $value = $filter_handler->value;
      if (is_array($value)) {
        if (isset($value['type']) && $value['type'] === "date") {
          // We could have 2 different times.
          if (empty($value['value']) && (!empty($value['min']) || !empty($value['max']))) {
            // Start date.
            if (!empty($value['min'])) {
              $date_min_formatted = format_date(strtotime($value['min']), 'ec_date_j_f_y');
              if (empty($value['max'])) {
                // If the end date is not set make it the same.
                $date_max_formatted = format_date(strtotime($value['min']), 'ec_date_j_f_y');
              }
            }
            // End date.
            if (!empty($value['max'])) {
              $date_max_formatted = format_date(strtotime($value['max']), 'ec_date_j_f_y');
              if (empty($value['min'])) {
                // If the start date is not set make it the same.
                $date_min_formatted = format_date(strtotime($value['max']), 'ec_date_j_f_y');
              }
            }

            // Prepare our filters.
            $between_date = (isset($date_min_formatted) && isset($date_max_formatted));
            $different_date = ($date_min_formatted <> $date_max_formatted);

            // Prepare our variable.
            $date_formatted = '';
            // Create the markup.
            // In case 2 different dates, display BETWEEN ##DATE##.
            $date_formatted .= ($between_date && $different_date) ? t('Between') . ' ' : '';
            // In case of the same date, display ON ##DATE##.
            $date_formatted .= !$different_date ? t('On') . ' ' : '';
            // Display start date.
            $date_formatted .= (isset($date_min_formatted) && $different_date) ? $date_min_formatted : '';
            // In case 2 different dates, display ##DATE## AND ##DATE##.
            $date_formatted .= ($between_date && $different_date) ? ' ' . t('and') . ' ' : '';
            // Display end date.
            $date_formatted .= isset($date_max_formatted) ? $date_max_formatted : '';

          }
          else {
            $date = strtotime($value['value']);
            $date_formatted = format_date($date, 'ec_date_j_f_y');
          }

          // Check if we actually got some date.
          if (!empty($date_formatted)) {
            $result['filter'][] = '"' . $date_formatted . '"';
          }
        }
        $raw_vals = array();
        foreach ($value as $key => $val) {
          $raw_vals[] = $val;
        }
        foreach ($raw_vals as $raw_val) {
          if (isset($filter_handler->value_options[$raw_val]) && !empty($filter_handler->value_options[$raw_val])) {
            $result['filter'][] = '"' . trim($filter_handler->value_options[$raw_val]) . '"';
          }
        }
      }
      elseif (!empty($value)) {
        $result['filter'] = $is_combined ? ('"' . $value . '"') : $value;
      }
    }
  }

  if (!empty($result)) {
    return $result;
  }

  return FALSE;
}

/**
 * Simple call to the theme, easy to be used in a view header.
 */
function _dt_exposed_filter_data_get_exposed_filter_output() {
  return theme('exposed_filter_data');
}
