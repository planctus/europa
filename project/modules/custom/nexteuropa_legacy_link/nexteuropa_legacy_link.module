<?php
/**
 * @file
 * Nexteuropa Legacy link
 */

/**
 * Implements hook_entity_load().
 */
function nexteuropa_legacy_link_entity_load($entities, $type) {
  foreach ($entities as $entity) {
    // If Legacy link field is used add it to path array.
    if ($legacy_link = _nexteuropa_legacy_link_get($type, $entity)) {
      $entity->legacy = $legacy_link;
    }
  }
}

/**
 * Implements hook_field_attach_view_alter().
 */
function nexteuropa_legacy_link_field_attach_view_alter(&$output, $context) {
  foreach (element_children($output) as $field_name) {
    $element = &$output[$field_name];
    // Fix linked entity references to link to Legacy link and not to entity.
    if ($element['#field_type'] == 'entityreference' || $element['#field_type'] == 'taxonomy_term_reference') {
      $field = field_info_field($field_name);
      $instance = field_info_instance($element['#entity_type'], $field_name, $element['#bundle']);
      $display = field_get_display($instance, $context['view_mode'], $element['#object']);

      if ($element['#field_type'] == 'entityreference') {
        // Skip entity reference fields not targeting nodes.
        if (
          (
            !isset($display['settings']['link']) ||
            !isset($field['settings']['target_type']))  &&
          (
            $field['settings']['target_type'] !== 'node' ||
            $field['settings']['target_type'] !== 'taxonomy_term'
          )
        ) {
          continue;
        }

        foreach ($element['#items'] as $delta => $item) {
          // Check if item has Legacy link.
          if (isset($item['entity']->legacy)) {
            $element[$delta] = array('#markup' => l($item['entity']->title, $item['entity']->legacy));
          }
        }
      }
      // Taxonomy term reference.
      else {
        $fromatters = array('taxonomy_term_reference_link');
        if (in_array($display['type'], $fromatters)) {
          foreach ($element['#items'] as $delta => $item) {
            $term = taxonomy_term_load($item['tid']);
            $link = isset($term->legacy) ? $term->legacy : url('taxonomy/term/' . $item['tid']);

            $element[$delta] = array(
              '#type' => 'link',
              '#title' => $term->name,
              '#href' => $link,
            );
          }
        }
      }
    }
  }
}

/**
 * Implements hook_token_info().
 */
function nexteuropa_legacy_link_token_info() {
  return array(
    'tokens' => array(
      'node' => array(
        'legacy-link' => array(
          'name' => t("Legacy link with fallback."),
          'description' => t('When the field_core_legacy_link exists and not empty, the token gives back the legacy link, else the node url.'),
        ),
      ),
    ),
  );
}

/**
 * Implements hook_tokens().
 */
function nexteuropa_legacy_link_tokens($type, $tokens, $data = array(), $options = array()) {
  $replacements = array();
  if ($type == 'node' && !empty($data['node'])) {
    $url_options = array('absolute' => TRUE);
    $node = $data['node'];
    foreach ($tokens as $name => $original) {
      switch ($name) {
        // Simple key values on the node.
        case 'legacy-link':
          if ($legacy_link = _nexteuropa_legacy_link_get('node', $node)) {
            $replacements[$original] = url($legacy_link);
          }
          else {
            $url_options['language'] = i18n_language_load($node->language);
            $url_options['absolute'] = FALSE;
            $replacements[$original] = url('node/' . $node->nid, $url_options);
          }

          break;
      }
    }
  }

  return $replacements;
}

/**
 * Helper function to check if legacy link exist.
 */
function _nexteuropa_legacy_link_get($entity_type, $entity) {
  $wrapper = entity_metadata_wrapper($entity_type, $entity);
  if ($wrapper->__isset('field_core_legacy_link')) {
    $legacy_link = $wrapper->field_core_legacy_link->value();

    return (isset($legacy_link['url'])) ? $legacy_link['url'] : FALSE;
  }

  return FALSE;
}
