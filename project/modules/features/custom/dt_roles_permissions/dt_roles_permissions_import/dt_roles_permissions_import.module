<?php
/**
 * @file
 * Dt_roles_permissions export functionality.
 */

/**
 * Implements hook_menu().
 */
function dt_roles_permissions_import_menu() {
  $items = array();

  $items['admin/people/permissions/dt_roles_permissions_import'] = array(
    'access arguments' => array('administer site configuration'),
    'description' => 'Import permissions',
    'file' => 'dt_roles_permissions_import.admin.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dt_roles_permissions_import_page'),
    'title' => 'Permission import',
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implements hook_flush_caches().
 *
 * We use this hook to reload all the permissions as it is the only hook that is
 * triggered after drupal update.php (or drush updb).
 */
function dt_roles_permissions_import_flush_caches() {
  _dt_roles_permissions_import_import('all');
  drupal_set_message(t('Permissions have been reÃ¯ninitialized'));
}

/**
 * Helper function to get a list to import and write it to the database.
 */
function _dt_roles_permissions_import_import($role) {
  // List of available permissions.
  $modules_permissions = array_keys(user_permission_get_modules());
  // Initialize our permissions array.
  $permissions = array();
  // If our role is an object, then its singular.
  if (is_object($role)) {
    // Include the file containing the array.
    include_once _dt_roles_permissions_get_file_dir($role->name);
    // List of permissions.
    $modules_permissions = array_keys(user_permission_get_modules());
    // Revoke them.
    user_role_revoke_permissions($role->rid, $modules_permissions);
    // Grant the new permissions.
    user_role_grant_permissions($role->rid, $permissions[$role->name]);
    return TRUE;
  }
  elseif ($role == 'all') {
    foreach (_dt_roles_permissions_get_importable() as $key => $name) {
      // Load the role object.
      $role_object = user_role_load($key);
      // Include the file containing the array.
      include_once _dt_roles_permissions_get_file_dir($role_object->name);
      // Revoke them.
      user_role_revoke_permissions($role_object->rid, $modules_permissions);
      // Grant the new permissions.
      user_role_grant_permissions($role_object->rid, $permissions[$role_object->name]);
    }
    return TRUE;
  }
  elseif ($role == 'clear') {
    foreach (_dt_roles_permissions_get_importable() as $key => $name) {
      // Load the role object.
      $role_object = user_role_load($key);
      // Remove all rights.
      user_role_revoke_permissions($role_object->rid, $modules_permissions);
    }
    return TRUE;
  }
  return FALSE;
}

/**
 * Helper function to get the available import files as an $id => $name array.
 */
function _dt_roles_permissions_get_importable() {
  // Get our default roles that are available on the site.
  $roles_array = user_roles();
  // Check which import file are available. If it is not available exclude it
  // from the import list.
  foreach ($roles_array as $rid => $role) {
    if (!file_exists(_dt_roles_permissions_get_file_dir($role))) {
      unset($roles_array[$rid]);
    }
  }
  return $roles_array;
}
