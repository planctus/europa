<?php
/**
 * @file
 * Code for the cwt_biography feature.
 */

include_once 'cwt_biography.features.inc';

/**
 * Implements hook_init().
 *
 * Biographies can be flagged as "Partially translated". If the node page of a
 * partially translated biography is visited, redirect to the English version.
 */
function cwt_biography_init() {
  // Check if we are on the full node view of a non-English Biography node.
  $menu_item = menu_get_item();
  if ($menu_item['path'] == 'node/%' && ($node = menu_get_object()) && $node->type == 'biography' && $node->language != 'en') {
    // Check if the node has been flagged as partially translated.
    $items = field_get_items('node', $node, 'field_partial_translation');
    $item = reset($items);
    if (!empty($item['value'])) {
      // If the user doesn't have permission to access partial translations,
      // redirect to the English translation. If no English translation exists,
      // deny access.
      if (!user_access('access partially translated biographies')) {
        $translations = translation_node_get_translations($node->tnid);
        if (!empty($translations['en'])) {
          // Fetch the target alias in the target language.
          $url_options = array(
            'language' => i18n_language_load('en'),
            'absolute' => TRUE,
          );
          $url = url('node/' . $translations['en']->nid, $url_options);
          drupal_goto($url);
        }
        drupal_access_denied();
      }
      // Inform the user that they are looking at a partially translated page
      // which is not accessible by the public.
      else {
        drupal_set_message(t('This page is marked as "partially translated" and is not accessible by the public.'), 'warning');
      }
    }
  }
}

/**
 * Implements hook_permission().
 */
function cwt_biography_permission() {
  return array(
    'access partially translated biographies' => array(
      'title' => t('Access partially translated biographies'),
      'description' => t('Biographies can be marked as partially translated. Roles that have this permission can access these biographies. Others will be redirected to the English version of the biography.'),
    ),
  );
}

/**
 * Implements hook_node_view().
 */
function cwt_biography_node_view($node, $view_mode, $langcode) {
  if ($node->type == 'biography' && $view_mode == 'full' && $role = field_get_items('node', $node, 'field_biography_role')) {
    $role_term = taxonomy_term_load($role[0]['tid']);
    $is_president = !$role_term ? FALSE : _commissioner_uuid_is('president', $role_term->uuid);
    if ($is_president) {
      $label = t('Role');
    }
    else {
      $label = t('Responsibilities');
    }
    $node->content['body']['#title'] = $label;
  }

  if ($node->type == 'aggregated_news' && $view_mode == 'teaser') {
    $wrapper = entity_metadata_wrapper('node', $node);
    $link = $wrapper->field_aggregated_news_link->value();
    if (!empty($link['url'])) {
      $node->link = $link['url'];
    }
  }
}

/**
 * Implements hook_block_info().
 */
function cwt_biography_block_info() {
  $blocks = array();
  $blocks['biography_contact_form']['info'] = t('Biography Contact form');
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function cwt_biography_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'biography_contact_form':
      global $language;
      $node = menu_get_object();
      $wrapper = entity_metadata_wrapper('node', $node);
      if ($node->type == 'biography' && _cwt_biography_is_contact_enabled($wrapper)) {
        // Pattern:
        // https://webforms.edcc.eu/form/view/commissioner/[lang]/['remote_id'].
        $src = variable_get('embedded_contact_form_src', 'https://webforms.edcc.eu/form/view/commissioner/')
          . $language->language . '/' . $wrapper->field_remote_id->value();
        $block['content'] = '<iframe class="iframe-contact-form" src="' . $src . '"></iframe>';
        drupal_add_js(array('cwtBiography' => array('biographyName' => $node->title)), 'setting');
      }
      break;
  }
  return $block;
}

/**
 * Checks if Embedded contact form is enabled and configured for Biography node.
 *
 * @param object $wrapper
 *   EntityMetadataWrapper of biography.
 *
 * @return bool
 *   Embedded contact form is enabled.
 */
function _cwt_biography_is_contact_enabled($wrapper) {
  if ($wrapper->__isset('field_embedded_contact_enabled') && $wrapper->__isset('field_remote_id')) {
    return $wrapper->field_embedded_contact_enabled->value() && $wrapper->field_remote_id->value();
  }
  return FALSE;
}

/**
 * Set default weights for biographies.
 *
 * Intended to be run from drush eval.
 *
 * @see https://webgate.ec.europa.eu/CITnet/jira/browse/CWT-247
 */
function cwt_biography_set_default_weights() {
  module_load_include('module', 'weight');
  $settings = _weight_get_settings('biography');
  if (!empty($settings)) {
    _weight_set_defaults($settings['default'], 'biography');
  }
}

/**
 * Returns the biography of a commissioner in the given editorial section.
 *
 * @param object $editorial_section
 *   An editorial section taxonomy term object.
 *
 * @return object|FALSE
 *   The biography of the commissioner, or FALSE if no biography was found.
 */
function cwt_biography_get_commissioner_biography_by_editorial_section($editorial_section) {
  // Find the Biography that is linked to this Editorial Section. The
  // editorial sections are used to control access using Workbench Access.
  // However, these taxonomy terms do not contain the data that we need:
  // the pathauto alias for the Biography of the commissioner that is the
  // lead of the section. Unfortunately there is not a direct correlation
  // between the editorial sections and the biographies: multiple
  // biographies can be tagged with the same editorial section. To get
  // around this we filter the on the biography role. This excludes lowly
  // cabinet members such as assistants whom we assume are not worthy of
  // having blog posts or news items.
  $query = db_select('node', 'n');
  $query->join('field_data_field_editorial_section', 'es', 'es.entity_id = n.nid');
  $query->join('field_data_field_biography_role', 'r', 'r.entity_id = n.nid');
  $query->join('taxonomy_term_data', 't', 'r.field_biography_role_tid = t.tid');
  $query
    ->fields('n', array('nid'))
    ->condition('n.type', 'biography')
    ->condition('es.bundle', 'biography')
    ->condition('es.field_editorial_section_tid', $editorial_section->tid)
    ->condition('r.bundle', 'biography')
    // Commissioner, Vice President, President, First vice-pres, High-rep.
    ->condition('t.uuid', array(
      'fea4c060-eb2d-4686-9ccc-64997aad4930',
      'ffbcfcf3-2f50-4c70-a11c-936cc4385cde',
      'f7f7834a-3d60-4525-804b-439fd2d9f97a',
      'e0028e61-1cfa-4f6e-a036-4665b12ce86a',
      'd6304632-edda-4f20-871a-0e49513adfa5',
    ), 'IN')
    ->range(0, 1);

  if ($nid = $query->execute()->fetchColumn()) {
    return node_load($nid);
  }

  return FALSE;
}

