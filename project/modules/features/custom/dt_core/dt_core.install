<?php
/**
 * @file
 * Digital Transformation Core install file.
 */

/**
 * Implements hook_install().
 */
function dt_core_install() {
  // Enabling admin theme for node pages.
  variable_set('node_admin_theme', 1);

  // Removing admin pages to use default theme(WATCH OUT FOR THAT!!!!!!).
  variable_set('cce_basic_config_admin_pages', array());

  // Applying a default set of buttons to the Full HTML profile.
  dt_apply_wysiwyg_buttons();

  if (module_exists('dashboard')) {
    module_disable(array('dashboard'));
    drupal_uninstall_modules(array('dashboard'));
  }

  // Switch on entity translation for the body field.
  _dt_core_enable_entity_translation('body', $sandbox);

  // Set our default social network url.
  variable_set('dt_core_other_social_networks_link', 'http://europa.eu/contact/social-networks/index_en.htm#n:|i:4|e:1|t:|s:');
}

/**
 * Implements hook_uninstall().
 */
function dt_core_uninstall() {
  $path = drupal_get_path('module', 'dt_core') . '/dt_core.info';
  $info = drupal_parse_info_file($path);
  drupal_set_message(t('NextEuropa Subject %v feature is uninstalled on your site.', array('%v' => $info['version'])));
}

/**
 * Enabling About the EC and Strategy classes and also Homepage Core feature.
 */
function dt_core_update_7101() {
  $slices = array(
    'dt_homepage_core',
    'dt_aboutec_core',
    'dt_strategy_core',
  );
  module_enable($slices);
}

/**
 * Enabling Announcements feature.
 */
function dt_core_update_7102() {
  module_enable(array('dt_announcement'));
}

/**
 * Enable Europa theme.
 */
function dt_core_update_7103() {
  theme_enable(array('europa'));
  variable_set('theme_default', 'europa');
}

/**
 * Removing admin pages to use default theme(WATCH OUT FOR THAT IN THE FUTURE).
 */
function dt_core_update_7104() {
  variable_set('cce_basic_config_admin_pages', array());
}


/**
 * Enabling adressfield and inline_entity_form.
 */
function dt_core_update_7105() {
  module_enable(array('addressfield', 'inline_entity_form'));
}


/**
 * Enabling DT contact feature containing contact content type.
 */
function dt_core_update_7106() {
  module_enable(array('dt_contact'));
}

/**
 * Enabling Nexteuropa feedback form.
 */
function dt_core_update_7107() {
  module_enable(array('nexteuropa_feedback'));
}

/**
 * Enabling admin theme for node pages.
 */
function dt_core_update_7108() {
  variable_set('node_admin_theme', 1);
}

/**
 * Enabling Announcements feature.
 */
function dt_core_update_7109() {
  module_enable(array('nexteuropa_page'));
}

/**
 * Delete subjects vocabulary.
 */
function dt_core_update_7110() {
  if ($voc = taxonomy_vocabulary_machine_name_load('subjects')) {
    taxonomy_vocabulary_delete($voc->vid);
  }
}

/**
 * Disable and uninstall the dashboard module.
 */
function dt_core_update_7111() {
  if (module_exists('dashboard')) {
    module_disable(array('dashboard'));
    drupal_uninstall_modules(array('dashboard'));
  }
}

/**
 * Enabling Metatag modules.
 */
function dt_core_update_7112() {
  $meta_modules = array(
    'metatag',
    'metatag_views',
    'metatag_opengraph',
  );
  module_enable($meta_modules);
}

/**
 * Enabling DT date formats module.
 */
function dt_core_update_7113() {
  $modules = array(
    'dt_date_format',
  );
  module_enable($modules);
}

/**
 * Enabling 'topic' and 'toplink' content types.
 */
function dt_core_update_7114() {
  // The features to enable.
  $features = array(
    'dt_topic',
    'dt_toplink',
  );
  module_enable($features);

  // Reverting the features.
  foreach ($features as $feature) {
    features_revert_module($feature);
  }
}

/**
 * Revering menu_links, menu_custom and context in dt_core.
 */
function dt_core_update_7115() {
  features_revert(array(
    'dt_core' => array('menu_links', 'menu_custom', 'context'),
  ));
}

/**
 * Enabling Legacy link module.
 */
function dt_core_update_7116() {
  $modules = array(
    'nexteuropa_legacy_link',
  );
  module_enable($modules);

  // The features to enable.
  $features = array(
    'dt_department',
    'dt_person',
    'dt_priority',
  );
  module_enable($features);

  // Reverting the features.
  foreach ($features as $feature) {
    features_revert_module($feature);
  }
}

/**
 * Enabling multisite_maxlength module.
 */
function dt_core_update_7117() {
  $modules = array(
    'multisite_maxlength',
  );
  module_enable($modules);
  features_revert_module('nexteuropa_page');
}

/**
 * DT Editor configurations.
 */
function dt_core_update_7118() {
  features_revert_module('dt_core');
}

/**
 * Enabling dt_exposed_filter_data.
 */
function dt_core_update_7119() {
  $modules = array(
    'dt_exposed_filter_data',
  );
  module_enable($modules);

  // The features to revert.
  $features = array(
    'dt_announcement',
    'dt_department',
  );

  // Reverting the features.
  foreach ($features as $feature) {
    features_revert_module($feature);
  }
}

/**
 * Reverts dt_announcement, dt_contact and dt_person.
 */
function dt_core_update_7120() {
  // The features to revert.
  $features = array(
    'dt_announcement',
    'dt_contact',
    'dt_person',
  );

  // Reverting the features.
  foreach ($features as $feature) {
    features_revert_module($feature);
  }
}

/**
 * Revert updated feautres.
 */
function dt_core_update_7121() {
  // The features to enable.
  $features = array(
    'dt_department',
    'dt_person',
    'dt_priority',
  );
  module_enable($features);

  // Reverting the features.
  foreach ($features as $feature) {
    features_revert_module($feature);
  }
}

/**
 * Addinb buttons to Full HTML. Removing dt_editor format and profile.
 */
function dt_core_update_7122() {
  $profile = 'dt_editor';
  // Applying a default set of buttons to the Full HTML profile.
  dt_apply_wysiwyg_buttons();

  // Remove dt_editor from the wysiwyg profile.
  if (wysiwyg_profile_load($profile)) {
    wysiwyg_profile_delete($profile);
  }

  // Disable the filter format as well.
  db_update('filter_format')
    ->fields(array('status' => 0))
    ->condition('format', $profile)
    ->execute();

  // Revert dt_core.
  features_revert_module('dt_core');
}

/**
 * Enabling dt_social_network_links.
 */
function dt_core_update_7123() {
  $modules = array(
    'dt_social_network_links',
  );
  module_enable($modules);

  // The features to revert.
  $features = array(
    'dt_social_network_links',
    'dt_department',
  );

  // Reverting the features.
  foreach ($features as $feature) {
    features_revert_module($feature);
  }
}

/**
 * Enable dt_roles_permissions module.
 */
function dt_core_update_7124() {
  module_enable(array('dt_roles_permissions'));
}

/**
 * Copying field_core_link to field_core_links.
 */
function dt_core_update_7125() {
  // The features to revert.
  $features = array(
    'dt_department' => 'department',
    'dt_announcement' => 'announcement',
    'nexteuropa_page' => 'page',
  );

  // Reverting the features.
  features_revert_module('dt_core');
  foreach ($features as $feature => $content_type) {
    features_revert_module($feature);
    drupal_set_message(t('Reverted %feature.', array('%feature' => $feature)));
    // Copy the field content.
    _dt_core_field_value_copy('node', $content_type, 'field_core_link', 'field_core_links');
    drupal_set_message(t('Copied %content_type.', array('%content_type' => $content_type)));

    // Remove field instance.
    if ($instance = field_info_instance('node', 'field_core_link', $content_type)) {
      field_delete_instance($instance);
    }
  }
}

/**
 * Enable dt_page module.
 */
function dt_core_update_7126() {
  module_enable(array('dt_page'));
}

/**
 * Prompt to update aliases.
 */
function dt_core_update_7127() {
  $delete = url('admin/config/search/path/delete_bulk');
  $update = url('admin/config/search/path/update_bulk');
  drupal_set_message(t('Please <a href="!delete">bulk delete</a> and <a href="!update">update all aliases</a>!', array('!delete' => $delete, '!update' => $update)));
}

/**
 * Adding reset button filters on departments and topics views lists.
 */
function dt_core_update_7128() {
  // The features to revert.
  $features = array(
    'dt_department',
    'dt_topic',
  );

  // Reverting the features.
  foreach ($features as $feature) {
    features_revert_module($feature);
    drupal_set_message(t('Reverted %feature.', array('%feature' => $feature)));
  }
}

/**
 * Enabling ckeditor_link on full_html.
 */
function dt_core_update_7129() {
  // Insert or update the text format settings for full_html text format.
  $existing = db_select('filter', 'status')
    ->fields('status')
    ->condition('format', 'full_html', '=')
    ->condition('module', 'ckeditor_link', '=')
    ->condition('name', 'ckeditor_link_filter', '=')
    ->execute()
    ->fetchAssoc();
  if (
    $existing['status'] != 1 &&
    filter_format_exists('full_html') &&
    module_exists('ckeditor_link')
  ) {
    // Set status to 1.
    $updated = db_update('filter')
      ->fields(array(
        'status' => 1,
      ))
      ->condition('format', 'full_html', '=')
      ->condition('module', 'ckeditor_link', '=')
      ->condition('name', 'ckeditor_link_filter', '=')
      ->execute();
    if ($updated) {
      drupal_set_message(t("Plugin ckeditor_link was successfully enabled for full_html."));
    }
    else {
      drupal_set_message(t("Error occurred while trying to enable ckeditor_link plugin for full_html.", "error"));
    }
  }
}

/**
 * Enable dt_site_menu module.
 */
function dt_core_update_7130() {
  module_enable(array('dt_site_menu'));
}

/**
 * Adding site switcher tab components in header and footer.
 */
function dt_core_update_7131() {
  features_revert_module('dt_core');
}

/**
 * Due to a mistake schema is ahead by one, this is a placeholder only.
 */
function dt_core_update_7132() {

}

/**
 * Enabling dt_information_core.
 */
function dt_core_update_7133() {
  // Enabling dt_information_core only on information site.
  // Because the hook_updates will not running on a new install.
  module_enable(array('dt_information_core'));
  $features = array(
    'dt_core',
    'dt_information_core',
  );
  // Reverting the features.
  foreach ($features as $feature) {
    features_revert_module($feature);
  }
}

/**
 * Enable nexteuropa_formatters module.
 */
function dt_core_update_7134() {
  module_enable(array('nexteuropa_formatters'));
}

/**
 * Enabling nexteuropa_views module.
 */
function dt_core_update_7135() {
  module_enable(array('nexteuropa_views'));
}

/**
 * Enabling dt_core_info, dt_core_pol, disabling legacy info and pol features.
 */
function dt_core_update_7136() {
  // Checking dt_information_core, if it is enabled on the site.
  if (module_exists('dt_information_core')) {
    module_disable(array('dt_information_core'));
    module_enable(array('dt_core_info'));
  }

  // Checking dt_political_core, if it is enabled on the site.
  if (module_exists('dt_political_core')) {
    module_disable(array('dt_political_core'));
    module_enable(array('dt_core_pol'));
  }
}
/**
 * Switch on entity translation for the body field.
 */
function dt_core_update_7137($sandbox) {
  _dt_core_enable_entity_translation('body', $sandbox);
}

/**
 * Enabling dt_language_selector_site_popup.
 */
function dt_core_update_7138() {
  module_enable(array('dt_language_selector_site_popup'));
}

/**
 * Check all node titles and trim the whitespace.
 */
function dt_core_update_7139() {
  $query = db_update('node')->expression('title', 'RTRIM(title)')->execute();
  drupal_set_message('<strong>' . $query . '</strong> node title(s) have been fixed.');

  $query = db_update('$field_data_title_field')->expression('title_field_value', 'RTRIM(title_field_value)')->execute();
  drupal_set_message('<strong>' . $query . '</strong> title_field\'s title(s) have been fixed.');

  $query = db_update('$field_revision_title_field')->expression('title_field_value', 'RTRIM(title_field_value)')->execute();
  drupal_set_message('<strong>' . $query . '</strong> revision_title_field title(s) have been fixed.');
}

/**
 * Reset weight_frontpage.
 */
function dt_core_update_7140() {
  variable_set('weight_frontpage', 0);
}

/**
 * Update the default social media link url (other social networks).
 */
function dt_core_update_7141() {
  variable_set('dt_core_other_social_networks_link', 'http://europa.eu/contact/social-networks/index_en.htm#n:|i:4|e:1|t:|s:');
}

/**
 * Resetting Views settings related to Nexteuropa BEM listing.
 */
function dt_core_update_7142() {
  $features = array(
    'dt_announcement',
    'dt_department',
    'dt_policy',
    'dt_policy_area',
    'dt_topic',
  );
  // Reverting the features.
  foreach ($features as $feature) {
    // If module enabled, that revert.
    if (module_exists($feature)) {
      features_revert_module($feature);
    }
  }
}

/**
 * Update specific languages to be lower case.
 */
function dt_core_update_7143() {
  // Call our helper function to update the list.
  if (_dt_core_transform_language_to_lower_case(_dt_core_lower_case_languages())) {
    // Set our message.
    $message = 'Language labels have been updated into lower case without errors.';
  }
  else {
    // Set our message.
    $message = 'There were some errors updating the languages, please check the logs for detailed information';
  }

  // Display the final message.
  drupal_set_message($message);
}

/**
 * NEXTEUROPA-4747: Enabling dt_node_settings to introduce helper content types.
 */
function dt_core_update_7144() {
  module_enable(array('dt_node_settings'));

  $helper_types = array(
    'article',
    'banner_quote',
    'banner_video',
    'class_link_group',
    'contact',
    'featured_item',
    'page',
    'person',
    'policy_implementation',
    'policy_input',
    'policy_keyfile',
    'toplink',
    'editorial_team',
    'file',
  );

  foreach ($helper_types as $type) {
    variable_set('helper_node_type_' . $type, 1);
  }

  features_revert_module('dt_roles_permissions');
}


/**
 * Set body field content to english.
 */
function dt_core_update_7145() {
  // Removed this as it is no longer required due to the changes in update 7146.
}

/**
 * Set body field content to english.
 */
function dt_core_update_7146() {
  $data = db_query("SELECT language, entity_id FROM field_data_body AS fdfb WHERE language = 'und' AND (SELECT count(*) FROM field_data_body WHERE entity_id = fdfb.entity_id GROUP BY entity_id ) = 1")->fetchAll();

  foreach ($data as $key => $value) {
    db_update('field_data_body')
      ->fields(array(
        'language' => 'en',
      ))
      ->condition('entity_id', $value->entity_id)
      ->condition('language', 'und', '=')
      ->execute();

    db_update('field_revision_body')
      ->fields(array(
        'language' => 'en',
      ))
      ->condition('entity_id', $value->entity_id)
      ->condition('language', 'und', '=')
      ->execute();
  }
}

/**
 * Enabling dt_shared_functions module.
 */
function dt_core_update_7147() {
  module_enable(array('dt_shared_functions'));
}

/**
 * NEXTEUROPA-4834: Update features for the modified timeline.
 */
function dt_core_update_7148() {
  $features = array(
    'dt_page',
    'dt_policy',
    'dt_pri_policy_area_default',
    'dt_priority_default',
  );
  // Reverting the features.
  foreach ($features as $feature) {
    // If module enabled, that revert.
    if (module_exists($feature)) {
      features_revert_module($feature);
    }
  }
}

/**
 * NEXTEUROPA-6905: Facebook is not showing up as Social Network in non-English.
 */
function dt_core_update_7149() {
  $sql = "
    UPDATE
      {taxonomy_term_data} AS ttd
    LEFT JOIN {taxonomy_vocabulary} AS tv ON (ttd.vid = tv.vid)
    SET
      ttd.language = 'und'
    WHERE
      tv.machine_name = 'social_networks'
  ";
  db_query($sql)->execute();
}
