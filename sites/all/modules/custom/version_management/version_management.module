<?php

/**
 * @file
 * Mark a node edit as not major version, preventing the timestamp from
 * updating.
 * This module allows content types to be designated for major edits, and
 * users given the permission to mark an edit.  Marking an edit as not major
 * prevents $node->changed from being updated, which keeps the node from popping
 * to the top of ordered-by-time lists.  Revisions are marked with the correct
 * timestamp data.
 */

/**
 * Implements hook_permission().
 */
function version_management_permission() {
  return array(
    'version management edits' => array(
      'title' => t('Major version edits'),
      'description' => t('Allow to mark a content as a major version.'),
    ),
  );
}

/**
 * Implements hook_menu().
 *
 * Adds a link to the settings page in Configuration -> Content authoring.
 */
function version_management_menu() {
  $items = array();
  $items['admin/config/content/version_management/settings'] = array(
    'title' => 'Version management',
    'description' => 'Adjust version management edit options.',
    'page callback' => 'drupal_get_form',
    'access arguments' => array('administer site configuration'),
    'page arguments' => array('version_management_settings'),
    'file' => 'version_management.admin.inc',
    'file path' => drupal_get_path('module', 'version_management'),
  );
  return $items;
}

/**
 * Implements hook_form_alter().
 *
 * Adds the version management edit toggle to node-editing forms for
 * content types (Node-adding forms are ignored.)
 */
function version_management_form_alter(&$form, &$form_state, $form_id) {
  $types = variable_get('version_management_node_types');
  $formid_type = strstr($form_id, '_node_form', 1);

  if (
    // If: $form_id identifies a node-editing form,
    preg_match('/_node_form$/', $form_id)

    // And: The content type is one configured to permit Minor Edits,
    && $types[$formid_type]

    // And: We're editing, not adding a new node.
    && arg(2) == 'edit'
    ) {

    $form['actions']['minor_version'] = array(
      '#access' => user_access('version management edits'),
      '#type' => 'checkbox',
      '#title' => t('Mark as major version'),
      '#default_value' => 0,
      '#attached' => array(
        'css' => array(drupal_get_path('module', 'version_management') . '/version_management.css'),
        'js' => array(drupal_get_path('module', 'version_management') . '/version_management.js'),
      ),
      '#weight' => $form['actions']['submit']['#weight'] + 1,
    );
  }
}

/**
 * Implements hook_node_presave().
 *
 * Prevents update of $node->changed.
 */
function version_management_node_presave($node) {
  $types = variable_get('version_management_node_types');
  if ($types[$node->type]) {
    if (isset($node->minor_version)) {
      if ($node->minor_version == 0) {
        unset($node->changed);
        if (isset($node->workbench_moderation)) {
          $minor_version_nids = variable_get('minor_version_nids', array());
          $minor_version_nids[$node->nid] = 'minor';
          variable_set('minor_version_nids', $minor_version_nids);
        }
      }
    }
    else {
      // Manage the second node_save when workbench_moderation is used.
      $minor_version_nids = variable_get('minor_version_nids');
      if (isset($minor_version_nids[$node->nid])) {
        unset($node->changed);
        unset($minor_version_nids[$node->nid]);
        variable_set('minor_version_nids', $minor_version_nids);
      }
    }
  }
}


/**
 * Implements hook_help().
 */
function version_management_help($path, $arg) {
  switch ($path) {
    case 'admin/help#version_management':
      $output = '';
      $output .= '<h3>' . t('About Version management (major/minor version)') . '</h3>';
      $output .= '<p>' . t("Version management adds a toggle to node editing forms which, if not checked (not mark as major), prevents the node's updated time from changing.  This keeps it from floating to the top of last-updated listings.  This may be desirable behavior when the edit isn't substantial, such as typo correction.<br /><br />This behavior must be enabled per content type on the admin/config/version_management/settings page, and requires the 'administer nodes' privilege.") . '<p>';
      return $output;
  }
}
