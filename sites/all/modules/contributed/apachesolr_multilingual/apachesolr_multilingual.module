<?php

/**
 * @file
 * Multilingual search using Apache Solr.
 *
 * @see apachesolr.module
 *
 * @author Markus Kalkbrenner (mkalkbrenner) | bio.logis GmbH
 *   @see http://drupal.org/user/124705
 */

/**
 * Implements hook_node_insert().
 *
 * @return void
 */
function apachesolr_multilingual_node_insert($node) {
  apachesolr_multilingual_node_update($node);
}

/**
 * Implements hook_node_delete().
 *
 * @return void
 */
function apachesolr_multilingual_node_delete($node) {
  apachesolr_multilingual_node_update($node);
}

/**
 * Implements hook_node_update().
 *
 * @return void
 */
function apachesolr_multilingual_node_update($node) {
  if (variable_get('apachesolr_multilingual_index_translations', 0) && !empty($node->tnid)) {
    $translations = translation_node_get_translations($node->tnid);
    foreach ($translations as $node_stub) {
      if ($node_stub->nid != $node->nid) {
        apachesolr_mark_entity('node', $node_stub->nid);
      }
    }
  }
}


/**
 * Implements hook_apachesolr_index_documents_alter().
 */
function apachesolr_multilingual_apachesolr_index_documents_alter(&$documents, $entity, $entity_type, $env_id) {
  foreach ($documents as $document) {

    if (LANGUAGE_NONE == $document->ss_language) {
      // language-neutral
      $document->ss_language = variable_get('apachesolr_multilingual_map_language_neutral', LANGUAGE_NONE);
    }

    $fields = $document->getFieldNames();
//       if (in_array('vid', $fields) && is_array($document->vid)) { // vid is vocabulary id in this case
//         $term_languages = array($language);
//         if (module_exists('i18ntaxonomy') && variable_get('apachesolr_multilingual_index_term_translations', 0)) {
//           $term_languages = variable_get('apachesolr_multilingual_languages', array());
//         }
//         foreach ($term_languages as $term_language) {
//           if ($term_language) {
//             $vids = array_unique($document->vid);
//             $terms = array();
//             foreach ($vids as $vid) {
//               if (module_exists('i18ntaxonomy')) {
//                 $tmp = '';
//                 if (in_array('im_vid_' . $vid, $fields)) {
//                   foreach ($document->{'im_vid_' . $vid} as $tid) {
//                     $term = i18nstrings("taxonomy:term:$tid:name", '', $term_language);
//                     if (!empty($term)) {
//                       $tmp .= $term . ' ';
//                     }
//                   }
//                 }
//                 if (!empty($tmp)) {
//                   $terms[] = $tmp;
//                 }
//               }
//               else {
//                 // module i18ntaxonomy isn't installed
//                 // in this case we simply copy the terms
//                 if (in_array('ts_vid_' . $vid . '_names', $fields)) {
//                   $terms[] = $document->{'ts_vid_' . $vid . '_names'};
//                 }
//                 // REVIEW see http://drupal.org/node/783924
//               }
//             }

//             if ($terms) {
//               $document->{'taxonomy_names_' . $term_language} = $terms;
//             }
//           }
//         }
//       }

    // use language-specific stemming and so on
    // by copying all fields of type text to
    // a language-specific text field
    if (in_array('label', $fields)) {
      $document->{'i18n_label_' . $document->ss_language} = $document->label;
    }
    if (in_array('teaser', $fields)) {
      $document->{'i18n_teaser_' . $document->ss_language} = $document->teaser;
    }
    if (in_array('content', $fields)) {
      $document->{'i18n_content_' . $document->ss_language} = $document->content;
    }
    if (in_array('path_alias', $fields)) {
      $document->{'i18n_path_alias_' . $document->ss_language} = $document->path_alias;
    }
    foreach ($fields as $field_name) {
      foreach (array('ts_', 'tm_', 'tos_', 'tom_', 'tags_') as $prefix) {
        if (strpos($field_name, $prefix) === 0 && !empty($document->{$field_name})) {
          // search for existing language identifier at second position
          $tmp = explode('_', $field_name);
          if ($document->ss_language != $tmp[1]) {
            // Dynamic fields have to be prefixed with 'i18n_' to distinguish between
            // language-specific dynamic fields and standard dynamic fields.
            // The language suffix is not enough, because someone could define a
            // drupal field name like 'de_foo', which matches ts_de_* but not i18n_ts_*
            $document->{'i18n_' . $tmp[0] . '_' . $document->ss_language . drupal_substr($field_name, drupal_strlen($tmp[0]))} = $document->{$field_name};
          }
        }
      }
    }

    if ('node' == $document->entity_type) {
      if (variable_get('apachesolr_multilingual_index_translations', 0) && in_array('is_tnid', $fields) && !empty($document->is_tnid)) {
        // TODO distinguish between published and unpublished translations
        $translations = translation_node_get_translations($document->is_tnid);
        foreach ($translations as $node_stub) {
          if ($node_stub->nid != $document->entity_id) {
            if ($translation_node = node_load($node_stub->nid)) {
              $translation_document = new ApacheSolrDocument();
              apachesolr_index_node_solr_document($translation_document, $translation_node, 'node', $env_id);
              $translation_fields = $translation_document->getFieldNames();
              // use language-specific stemming and so on
              // by copying all fields of type text to
              // a language-specific text field
              if (in_array('label', $translation_fields)) {
                $document->{'i18n_label_' . $translation_document->ss_language} = $translation_document->label;
              }
              if (in_array('teaser', $translation_fields)) {
                $document->{'i18n_teaser_' . $translation_document->ss_language} = $translation_document->teaser;
              }
              if (in_array('content', $translation_fields)) {
                $document->{'i18n_content_' . $translation_document->ss_language} = $translation_document->content;
              }
              if (in_array('path_alias', $translation_fields)) {
                $document->{'i18n_path_alias_' . $translation_document->ss_language} = $translation_document->path_alias;
              }
              foreach ($translation_fields as $field_name) {
                foreach (array('ts_', 'tm_', 'tos_', 'tom_', 'tags_') as $prefix) {
                  if (strpos($field_name, $prefix) === 0 && !empty($translation_document->{$field_name})) {
                    // search for existing language identifier at second position
                    $tmp = explode('_', $field_name);
                    if ($translation_document->ss_language != $tmp[1]) {
                      $document->{'i18n_' . $tmp[0] . '_' . $translation_document->ss_language . drupal_substr($field_name, drupal_strlen($tmp[0]))} = $translation_document->{$field_name};
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}


/**
 * Implements hook_form_apachesolr_search_bias_form_alter().
 *
 * @param $form
 * @param $state
 * @param $form_id
 * @return mixed
 */
function apachesolr_multilingual_form_apachesolr_search_bias_form_alter(&$form, &$form_state, $form_id) {
  $environment = apachesolr_environment_load($form['#env_id']);
  $fields = apachesolr_search_get_fields($environment);
  $types = array('text');
  $defaults = array();
  foreach (locale_language_list() as $language_id => $language) {
    $types[] = 'text_' . $language_id;
    // get the current weights
    $defaults['i18n_content_' . $language_id] = '1.0';
    $defaults['i18n_ts_' . $language_id . '_comments'] = '0.5';
    $defaults['i18n_tos_' . $language_id . '_content_extra'] = '0.1';
    $defaults['i18n_label_' . $language_id] = '5.0';
    $defaults['i18n_tos_' . $language_id . '_name'] = '3.0';
    $defaults['i18n_taxonomy_names_' . $language_id] = '2.0';
    $defaults['i18n_tags_' . $language_id . '_h1'] = '5.0';
    $defaults['i18n_tags_' . $language_id . '_h2_h3'] = '3.0';
    $defaults['i18n_tags_' . $language_id . '_h4_h5_h6'] = '2.0';
    $defaults['i18n_tags_' . $language_id . '_inline'] = '1.0';
    $defaults['i18n_tags_' . $language_id . '_a'] = '0';
  }

  $qf = apachesolr_environment_variable_get($environment['env_id'], 'field_bias', $defaults);
  $weights = drupal_map_assoc(array('21.0', '13.0', '8.0', '5.0', '3.0', '2.0', '1.0', '0.8', '0.5', '0.3', '0.2', '0.1'));
  $weights['0'] = t('Omit');
  if (!$qf) {
    $qf = $defaults;
  }
  if ($fields) {
    foreach ($fields as $field_name => $field) {
      // Only indexed feids are searchable.
      if ($field->schema{0} == 'I') {
        // We use filter_xss to make sure links are allowed
        $form['field_bias'][$field_name] = array(
          '#access' => in_array($field->type, $types),
          '#type' => 'select',
          '#options' => $weights,
          '#title' => filter_xss(apachesolr_field_name_map($field_name)),
          '#default_value' => isset($qf[$field_name]) ? $qf[$field_name] : '1.0',
          '#description' => filter_xss(('text' == $field->type) ? t('Unspecified language: recomandation is set this bias to "Omit"') : ''),
        );
      }
    }

    // Make sure all the default fields are included, even if they have
    // no indexed content.
    foreach ($defaults as $field_name => $weight) {
      $form['field_bias'][$field_name] = array(
        '#type' => 'select',
        '#options' => $weights,
        '#title' => check_plain(apachesolr_field_name_map($field_name)),
        '#default_value' => isset($qf[$field_name]) ? $qf[$field_name] : $defaults[$field_name],
      );
    }

    ksort($form['field_bias']);
  }
}

/**
 * Implements hook_apachesolr_field_name_map_alter().
 */
function apachesolr_multilingual_apachesolr_field_name_map_alter(&$map) {
  $active_languages = locale_language_list();
  foreach ($active_languages as $language => $language_name) {
    $map['i18n_content_' . $language] = $language_name . ': ' . t('The full, rendered content (e.g. the rendered node body)');
    $map['i18n_ts_' . $language . '_comments'] = $language_name . ': ' . t('The rendered comments associated with a node');
    $map['i18n_tos_' . $language . '_content_extra'] = $language_name . ': ' . t('Extra rendered content or keywords');
    $map['i18n_tos_' . $language . '_name_formatted'] = $language_name . ': ' . t('Author name (Formatted)');
    $map['i18n_label_' . $language] = $language_name . ': ' . t('Title or label');
    $map['i18n_teaser_' . $language] = $language_name . ': ' . t('Teaser or preview');
    $map['i18n_tos_' . $language . '_name'] = $language_name . ': ' . t('Author name');
    $map['i18n_path_alias_' . $language] = $language_name . ': ' . t('Path alias');
    $map['i18n_tags_h1_' . $language] = $language_name . ': ' . t('Body text inside H1 tags');
    $map['i18n_tags_h2_h3_' . $language] = $language_name . ': ' . t('Body text inside H2 or H3 tags');
    $map['i18n_tags_h4_h5_h6_' . $language] = $language_name . ': ' . t('Body text inside H4, H5, or H6 tags');
    $map['i18n_tags_inline_' . $language] = $language_name . ': ' . t('Body text in inline tags like EM or STRONG');
    $map['i18n_tags_a_' . $language] = $language_name . ': ' . t('Body text inside links (A tags)');
//     if (module_exists('taxonomy')) {
//      $map['taxonomy_names' => t('All taxonomy term names'),
//       foreach (taxonomy_get_vocabularies() as $vocab) {
//         $map['tm_vid_' . $vocab->vid . '_names'] = t('Taxonomy term names only from the %name vocabulary', array('%name' => $vocab->name));
//         $map['im_vid_' . $vocab->vid] = t('Taxonomy term IDs from the %name vocabulary', array('%name' => $vocab->name));
//       }
//     }
//   }
  }
}


/**
 * Implements hook_menu().
 */
function apachesolr_multilingual_menu() {

  $items['admin/config/search/apachesolr/multilingual'] = array(
    'title' => 'Multilingual',
    'weight' => 0,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('apachesolr_multilingual_admin_form'),
    'file' => 'apachesolr_multilingual.admin.inc',
    'access arguments' => array('administer search'),
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implements hook_apachesolr_modify_query().
 */
function apachesolr_multilingual_apachesolr_query_alter($query) {
  global $language;

  $languages = locale_language_list();

  $qf = $query->getParam('qf');

  $filter_language = '';

  // REVIEW We assume that a user is not able to select two different languages as filter
  $language_filters = $query->getFilters('ss_language');
  if (!empty($language_filters)) {
    $filter_language = $language_filters[0]['#value'];
  }


  if (!$filter_language && variable_get_value('apachesolr_multilingual_auto_language_filter') &&
    (!variable_get_value('apachesolr_multilingual_auto_language_filter_detachable') ||
    (variable_get_value('apachesolr_multilingual_auto_language_filter_detachable') && empty($_GET['detach-auto-language-filter'])))) {

    if (!empty($language->language)) {
      $filter_language = $language->language;
      if (variable_get_value('apachesolr_multilingual_show_language_undefined_results')) {
        $subquery = apachesolr_drupal_query('Multilingual Language Limit');
        $subquery->addFilter('ss_language', $filter_language);
        $subquery->addFilter('ss_language', LANGUAGE_NONE);
        $subquery->operator = 'OR'; // that's the default, but this way it's readable
        $query->addFilterSubQuery($subquery);
      }
      else {
        $query->addFilter('ss_language', $filter_language);
      }
    }
  }

  foreach ($qf as $index => $field) {
    if (strpos($field, 'i18n_content') === 0) {
      list($field_name, $boost) = explode('^', $field);
      // Normed fields tend to have a lower score. Multiplying by 40 is
      // a rough attempt to bring the score in line with fields that are
      // not normed.
      $qf[$index] = $field_name . '^' . (40.0 * $boost);
    }
    else {
      $mapping_language = variable_get_value('apachesolr_multilingual_map_language_neutral');
      foreach (array('label', 'teaser', 'content', 'path_alias', 'ts', 'tm', 'tos', 'tom', 'tags') as $prefix) {
        if (strpos($field, $prefix) === 0) {
          if ($filter_language) {
            if (variable_get_value('apachesolr_multilingual_show_language_undefined_results')) {
              if (LANGUAGE_NONE == $mapping_language) {
                $qf[] = $qf[$index];
              }
              elseif ($mapping_language != $filter_language) {
                $qf[] = str_replace($prefix, 'i18n_' . $prefix . '_' . $mapping_language, $field);
              }
            }
            // replace common query field by language-specific one
            $qf[$index] = str_replace($prefix, 'i18n_' . $prefix . '_' . $filter_language, $field);
          }
          else {
            if (!variable_get_value('apachesolr_multilingual_show_language_undefined_results') || LANGUAGE_NONE != $mapping_language) {
              unset($qf[$index]);
            }
            // add all language-specific query fields
            foreach (array_keys($languages) as $language_id) {
              $qf[] = str_replace($prefix, 'i18n_' . $prefix . '_' . $language_id, $field);
            }
          }
          break;
        }
      }
    }
  }

  $query->replaceParam('qf', $qf);

  if ($filter_language) {
    // use language specfic fields for keyword highlighting in search result snippets
    $query->replaceParam('hl.fl', 'i18n_content_' . $filter_language);
    $query->addParam('f.i18n_content_' . $filter_language . '.hl.alternateField', 'i18n_teaser_' . $filter_language);

    // TODO language-specific spell-checking
//     if (variable_get('apachesolr_search_spellcheck', FALSE) && array_key_exists('spell_' . $filter_language, $fields)) {
//       $params['spellcheck.dictionary'] = 'spellchecker_' . $filter_language;
//     }
  }
  else {
    // multiple language-specific highlighters are not supported by solr at the moment
  }
}


/**
 * Implements hook_form_search_form_alter().
 *
 * @param $form
 * @param $form_state
 */
function apachesolr_multilingual_form_apachesolr_search_custom_page_search_form_alter(&$form, $form_state) {
  if (variable_get('apachesolr_multilingual_auto_language_filter', 0) && variable_get('apachesolr_multilingual_auto_language_filter_detachable', 0)) {
    $lang_filter = FALSE;
    foreach ($_GET as $key => $value) {
      if ('f' == $key && is_array($value)) {
        foreach ($value as $filter) {
          if (strpos($filter, 'ss_language:') === 0) {
            $lang_filter = TRUE;
            break;
          }
        }
      }
    }

    $form['basic']['detach_auto_language_filter'] = array(
      '#type' => $lang_filter ? 'hidden' : 'checkbox',
      '#title' => t('Search all languages'),
      '#default_value' => (int) isset($_GET['detach-auto-language-filter']),
    );

    if (!isset($form['#submit']) || !is_array($form['#submit'])) {
      $form['#submit'] = array();
    }

    $form['#submit'] = array_merge(array('apachesolr_multilingual_apachesolr_search_custom_page_search_form_submit'), $form['#submit']);
  }
}


/**
 * @see apachesolr_multilingual_form_search_form_alter()
 */
function apachesolr_multilingual_apachesolr_search_custom_page_search_form_submit($form, &$form_state) {
  $fv = $form_state['values'];
  if (!empty($fv['get'])) {
    $get = json_decode($fv['get'], TRUE);
    if (!empty($fv['detach_auto_language_filter'])) {
      $get['detach-auto-language-filter'] = '1';
    }
    elseif (isset($get['detach-auto-language-filter'])) {
      unset($get['detach-auto-language-filter']);
    }

    $form_state['values']['get'] = json_encode($get);
  }
}

/**
 * A shorthand for variable_get_info and variable_form_element
 *
 * @param string $name
 * @return Array The generated form element
 */
function apachesolr_multilingual_variable_definition_to_form_element($name) {
  module_load_include('form.inc', 'variable');
  $variable = variable_get_info($name);

  return variable_form_element($variable);
}

/**
 * Implements hook_variable_update().
 */
function apachesolr_multilingual_variable_update($name, $value, $old_value, $options) {
  switch ($name) {
    case 'apachesolr_multilingual_map_language_neutral':
    case 'apachesolr_multilingual_index_translations':
    case 'apachesolr_multilingual_index_unpublished_translations':
    case 'apachesolr_multilingual_index_term_translations':
    case 'apachesolr_multilingual_clir':
      apachesolr_multilingual_message_reindex($name, $value, $old_value, $options);
      break;
  }
}

/**
 * Shows a hint to the user that he has to reindex the content
 */
function apachesolr_multilingual_message_reindex($name, $value, $old_value, $options) {
  static $msg_sent = FALSE;

  if (!$msg_sent) {
    if ($value != $old_value) {
      $info = variable_get_info($name);
      if (is_null($info)) {
        // ignore for now
        // drupal_set_message(t('Error: Unknown variable @varname.', array('@varname' => $name)), 'error');
      }
      else {
        drupal_set_message(
          t(
            'Changing "%title" requires you to !link_reindex your content.',
            array('%title' => $info['title'] . (array_key_exists('key', $options) ? ' (' . $options['key'] . ')' : ''), '!link_reindex' => l(t('re-index'), 'admin/config/search/apachesolr'))
          ),
          'warning'
        );
        $msg_sent = TRUE;
      }
    }
  }
}
