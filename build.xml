<?xml version="1.0" encoding="UTF-8" ?>

<project name="${phing.project.name}" default="help">
    <import file="deliver.xml" optional="true"/>
    <!-- If `build.properties.local` exists then we want it badly -->
    <if>
        <available file="build.properties.local"/>
            <then>
                <property file="build.properties.local"/>
          </then>
    </if>
    <property file="build.properties"/>

    <target name="help" description="Phing target list">
      <echo msg="${project.code.dir}" />
        <exec executable="${phing.bin}"
              passthru="true">
            <arg value="-l"/>
        </exec>
    </target>

    <target name="init">
        <taskdef name="drush" classname="DrushTask" />
    </target>

    <!-- Initializes veriables to build dev environment. -->
    <target name="init-dev-properties">
      <property name="project.code.dir" value="${project.basedir}/${phing.project.build.dir}" override="true"/>
      <property name="drupal.profile.dir" value="${dev.drupal.profile.dir}" override="true"/>
      <property name="drupal.sites.dir" value="${dev.drupal.sites.dir}" override="true"/>
      <property name="drupal.settings.dir" value="${dev.drupal.settings.dir}" override="true"/>
      <property name="drupal.files.dir" value="${dev.drupal.files.dir}" override="true"/>
      <property name="drupal.site.dir" value="${dev.drupal.site.dir}" override="true"/>
      <property name="drupal.libraries.dir" value="${dev.drupal.libraries.dir}" override="true"/>
      <property name="drupal.modules.dir" value="${dev.drupal.modules.dir}" override="true"/>
      <property name="drupal.themes.dir" value="${dev.drupal.themes.dir}" override="true"/>
    </target>

    <!-- Initializes veriables to build production environment. -->
    <target name="init-distro-properties">
      <property name="project.code.dir" value="${project.basedir}/${phing.project.distro.dir}" override="true"/>
      <property name="drupal.profile.dir" value="${distro.drupal.profile.dir}" override="true"/>
      <property name="drupal.sites.dir" value="${distro.drupal.sites.dir}" override="true"/>
      <property name="drupal.settings.dir" value="${distro.drupal.settings.dir}" override="true"/>
      <property name="drupal.files.dir" value="${distro.drupal.files.dir}" override="true"/>
      <property name="drupal.site.dir" value="${distro.drupal.site.dir}" override="true"/>
      <property name="drupal.libraries.dir" value="${distro.drupal.libraries.dir}" override="true"/>
      <property name="drupal.modules.dir" value="${distro.drupal.modules.dir}" override="true"/>
      <property name="drupal.themes.dir" value="${distro.drupal.themes.dir}" override="true"/>
    </target>

    <!-- Execute drush make file and download profile. -->
    <target name="drush-make" depends="init">
        <if>
            <not>
                <available file="${phing.project.platform.dir}" type="dir" />
            </not>
            <then>
                <echo message="Platform not initialized. Proceed by initializing the platform." />
                <phingcall target="init-platform" />
                <phingcall target="patch-platform" />
            </then>
        </if>

        <if>
            <available file="${drupal.settings.dir}" type="dir" />
            <then>
              <chmod mode="0777" failonerror="false" verbose="true" quiet="true">
                <fileset dir="${drupal.settings.dir}" />
              </chmod>
            </then>
        </if>

        <echo msg="Delete previous build." />
        <delete dir="${project.code.dir}" includeemptydirs="true" failonerror="false" />

        <echo msg="Make the distribution." />
        <drush
            command="make"
            assume="yes"
            bin="${drush.bin}"
            pipe="yes"
            verbose="yes"
            root="${project.code.dir}">
            <param>${platform.profile.dir}/${drupal.profile.name}/build.make</param>
            <param>${project.code.dir}</param>
            <!--
              High concurrency used because of make problems.
              @see https://github.com/drush-ops/drush/issues/985
            -->
            <option name="concurrency">11</option>
        </drush>

        <echo msg="Copy platform files." />
        <copy todir="${project.code.dir}">
            <fileset dir="${phing.project.platform.dir}" excludes="*.sh" defaultexcludes="true"/>
        </copy>
    </target>

    <!-- Link custom modules. -->
    <target name="link-project" depends="init,drush-make">
        <symlink link="${dev.drupal.sites.dir}/${drupal.site.name}" target="../../${phing.project.project.dir}" />
    </target>

    <!-- Copy custom modules. -->
    <target name="copy-project" depends="init, init-distro-properties">
        <copy todir="${drupal.modules.dir}" overwrite="true">
            <fileset dir="${phing.project.project.dir}/modules" />
        </copy>
        <copy todir="${drupal.themes.dir}" overwrite="true">
            <fileset dir="${phing.project.project.dir}/themes" />
        </copy>
        <copy todir="${drupal.libraries.dir}" overwrite="true">
            <fileset dir="${phing.project.project.dir}/libraries" />
        </copy>
    </target>

    <target name="link-docroot" description="Link site document root to Apache document root">
        <symlink link="${server.docroot}" target="${project.code.dir}" overwrite="true" />
    </target>

    <!-- Link test files into the build root. -->
    <target name="link-tests" depends="init,drush-make">
        <if>
            <not>
                <available file="${project.basedir}/tests/behat.yml" type="file" />
            </not>
            <then>
                <echo message="Creating behat.yml config file" />
                <loadfile property="behat.yml" file="${project.basedir}/tests/behat.yml.dist">
                    <filterchain>
                        <replacetokens>
                            <token key="project.code.dir" value="${project.code.dir}" />
                            <token key="drupal.site.dir" value="${drupal.site.dir}" />
                            <token key="base_url" value="${base_url}" />
                        </replacetokens>
                    </filterchain>
                </loadfile>
                <echo message="${behat.yml}" file="${project.basedir}/tests/behat.yml" />
            </then>
        </if>
        <symlink link="${phing.project.build.dir}/behat.yml" target="../tests/behat.yml" />
        <symlink link="${phing.project.build.dir}/features" target="../tests/features" />
    </target>

    <!-- Make files directory. -->
    <target name="files-directory" depends="init">
        <mkdir dir="${drupal.files.dir}" />
        <chmod file="${drupal.files.dir}" mode="0775" failonerror="true" />
    </target>

    <!-- Manipulate settings.php file. -->
    <target name="create-settings.php" depends="init">
        <echo msg="Copying default.settings.php file to settings.php..." />
        <copy file="${drupal.sites.dir}/default/default.settings.php" tofile="${drupal.settings.dir}/settings.php" haltonerror="false"/>
        <chmod file="${drupal.settings.dir}/settings.php" mode="0775" failonerror="true" />
    </target>

    <!-- Manipulate settings.php file. -->
    <target name="create-sites.php" depends="init">
        <echo msg="Copying example.sites.php file to sites.php..." />
        <delete file="${phing.project.build.dir}/sites/sites.php" failonerror="false" />
        <copy file="${phing.project.build.dir}/sites/example.sites.php" tofile="${phing.project.build.dir}/sites/sites.php" />
        <chmod file="${phing.project.build.dir}/sites/sites.php" mode="0775" failonerror="true" />
        <property name="host" value="${base_url}">
          <filterchain>
            <replaceregexp>
              <regexp pattern="http://" replace="" ignoreCase="true"/>
              <regexp pattern="https://" replace="" ignoreCase="true"/>
              <regexp pattern="/" replace="." ignoreCase="true"/>
            </replaceregexp>
          </filterchain>
        </property>
        <append destFile="${phing.project.build.dir}/sites/sites.php" text="${line.separator}$sites['${host}'] = '${drupal.site.name}';" />
    </target>

    <!-- Backup settings.php file. -->
    <target name="backup-site-settings" depends="init">
        <if>
            <available file="${drupal.settings.dir}/settings.php" type="file" />
            <then>
                <echo message="Creating backup of settings.php file" />
                <mkdir dir="${project.basedir}/${phing.project.tmp.dir}" />
                <chmod file="${drupal.settings.dir}/settings.php" mode="0777" failonerror="false" verbose="false" quiet="true" />
                <copy file="${drupal.settings.dir}/settings.php" toDir="${project.basedir}/${phing.project.tmp.dir}" />
            </then>
            <else>
              <echo message="No settings.php file found. Proceeding with normal build." />
            </else>
        </if>
    </target>

    <!-- Backup settings.php file. -->
    <target name="restore-site-settings" depends="init">
        <if>
            <available file="${project.basedir}/${phing.project.tmp.dir}/settings.php" type="file" />
            <then>
                <echo message="Restoring settings.php file from backup." />
                <copy file="${project.basedir}/${phing.project.tmp.dir}/settings.php" tofile="${drupal.settings.dir}/settings.php" />
                <echo message="Clean-up temporary folder." />
                <delete dir="${project.basedir}/${phing.project.tmp.dir}" includeemptydirs="true" failonerror="false" />
            </then>
            <else>
              <echo message="No backup settings.php file found. Proceeding with normal build." />
            </else>
        </if>
    </target>

    <!-- Install dependencies. -->
    <target name="install-dependencies" description="Install dependencies." depends="init">
        <composer command="install" composer="${composer.bin}">
            <arg value="--working-dir=${project.code.dir}" />
        </composer>
    </target>

    <!-- Install drupal. -->
    <target name="install-drupal" description="Run the install." depends="init">
        <drush command="site-install" assume="yes" root="${project.code.dir}" bin="${drush.bin}" verbose="false">
            <option name="db-url" value="${drupal.db.url}"/>
            <option name="site-name" value="BETA"/>
            <option name="account-name" value="${drupal.admin.username}"/>
            <option name="account-pass" value="${drupal.admin.password}"/>
            <option name="account-mail" value="${drupal.admin.email}"/>
            <option name="sites-subdir" value="${drupal.site.name}"/>
            <param>${drupal.profile.name}</param>
        </drush>
    </target>

    <!-- Enable modules. -->
    <target name="enable-drupal-modules" description="Enable Drupal modules." depends="install-drupal">
        <drush command="pm-enable" assume="yes" root="${project.code.dir}" uri="${drupal.site.name}" bin="${drush.bin}">
            <param>${drupal.modules}</param>
            <param>--quiet</param>
        </drush>
    </target>

    <!-- Run behat tests. -->
    <target name="behat-tests" description="Run behat tests." depends="init">
        <exec command="${behat.bin}"
              logoutput="true"
              checkreturn="true"
              dir="${project.code.dir}"
              passthru="true" />
    </target>

    <target name="patch-platform" description="Applies patches to Multisite" depends="init">
        <echo message="Patching Multisite." />
        <!-- Apply patches -->
        <foreach param="filename" absparam="absfilename" target="apply-patch">
           <fileset dir="${phing.project.patches.dir}">
               <include name="*.patch" />
           </fileset>
        </foreach>
    </target>

    <target name="apply-patch" >
        <echo msg="Applying patch: ${absfilename}" />
        <exec command="patch --directory=${project.basedir} --batch -p1 --backup --input=${absfilename}" passthru="true" />
    </target>

    <target name="build-dev"
            description="Build a local Drupal site in order to dev"
            depends="init, init-dev-properties, drush-make, link-project, link-tests, files-directory, create-settings.php, create-sites.php" />

    <target name="rebuild-dev"
            description="Re-build a local Drupal site in order to dev, keeps settings.php and files intact."
            depends="init, init-dev-properties, drush-make, link-project, link-tests, files-directory, create-sites.php" />

    <target name="package"
            description="Build the Drupal site in order to install it"
            depends="init, init-distro-properties, drush-make, copy-project" />

    <target name="install"
            description="Install the Drupal site"
            depends="files-directory, install-drupal, enable-drupal-modules" />

    <target name="install-dev"
            description="Install the Dev Drupal site"
            depends="init-dev-properties, install" />

    <target name="test"
            description="Run tests."
            depends="behat-tests" />
</project>
